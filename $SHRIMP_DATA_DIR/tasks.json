{
  "tasks": [
    {
      "id": "7f37da00-f88c-4a83-8f5c-537bbf301eef",
      "name": "백업 및 중복 collector 파일 제거",
      "description": "현재 사용되지 않는 레거시 collector 파일들과 백업 파일들을 안전하게 제거. collection_manager.py에서 실제 사용하는 HAR-based collector만 보존하고 나머지 중복 버전들 정리",
      "notes": "HAR-based collector는 현재 production 핵심이므로 절대 삭제 금지. collection_manager.py의 import 라인 확인 후 진행",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-25T17:24:19.953Z",
      "updatedAt": "2025-06-25T17:29:09.696Z",
      "relatedFiles": [
        {
          "path": "src/core/har_based_collectors_backup.py",
          "type": "TO_MODIFY",
          "description": "백업 파일 - 삭제 대상"
        },
        {
          "path": "src/core/working_regtech_collector.py",
          "type": "TO_MODIFY",
          "description": "실험 버전 collector - 삭제 대상"
        },
        {
          "path": "src/core/working_secudium_collector.py",
          "type": "TO_MODIFY",
          "description": "실험 버전 collector - 삭제 대상"
        },
        {
          "path": "src/core/improved_collectors.py",
          "type": "TO_MODIFY",
          "description": "통합 실험 collector - 삭제 대상"
        },
        {
          "path": "src/core/working_collectors.py",
          "type": "TO_MODIFY",
          "description": "실험 버전 collector - 삭제 대상"
        },
        {
          "path": "src/core/collection_manager.py",
          "type": "REFERENCE",
          "description": "실제 사용 collector 확인용"
        }
      ],
      "implementationGuide": "1. collection_manager.py에서 실제 import되는 collector 확인\\n2. 제거 대상: har_based_collectors_backup.py, working_regtech_collector.py, working_secudium_collector.py, improved_collectors.py, working_collectors.py\\n3. 레거시 collector: regtech_collector.py, secudium_collector.py, regtech_har_collector.py, secudium_har_collector.py\\n4. 각 파일 제거 전 import 참조 검사\\n5. Git으로 변경사항 추적",
      "verificationCriteria": "collection_manager.py가 정상 동작하고 HAR-based collector import가 성공하는지 확인. 제거된 파일들이 다른 곳에서 참조되지 않는지 grep 검색으로 확인",
      "analysisResult": "프로젝트 파일 정리 및 통합을 통한 구조 최적화: 현재 HAR-based collector를 중심으로 한 production 아키텍처를 보존하면서 100개 이상의 중복/레거시 파일들을 체계적으로 정리. 3단계 접근법을 통해 안전성을 보장하며 코드베이스를 50% 이상 단순화",
      "summary": "백업 및 중복 collector 파일 제거 완료 - 5개 파일 안전하게 제거됨. HAR-based collector는 보존되어 production 안정성 유지. 레거시 collector들은 scripts에서 사용 중이므로 보존. routes_unified.py도 app_compact에서 미사용으로 확인되어 제거",
      "completedAt": "2025-06-25T17:29:09.695Z"
    },
    {
      "id": "2dc25909-9e5c-43f1-b5a2-dbf918dbf6c1",
      "name": "중복 dashboard 템플릿 통합",
      "description": "여러 버전의 dashboard 템플릿들을 메인 dashboard.html로 통합. advanced, enhanced, minimal, simple 버전들의 유용한 기능들을 메인 dashboard에 병합 후 중복 파일 제거",
      "notes": "regtech/dashboard.html은 전용 기능이므로 보존. main dashboard.html은 최근 개선되었으므로 기존 기능 손상 주의",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-06-25T17:24:19.953Z",
      "updatedAt": "2025-06-25T17:24:19.953Z",
      "relatedFiles": [
        {
          "path": "templates/dashboard.html",
          "type": "TO_MODIFY",
          "description": "메인 대시보드 - 기능 통합 대상"
        },
        {
          "path": "templates/advanced_dashboard.html",
          "type": "TO_MODIFY",
          "description": "고급 기능 추출 후 삭제"
        },
        {
          "path": "templates/enhanced_dashboard.html",
          "type": "TO_MODIFY",
          "description": "향상된 UI 추출 후 삭제"
        },
        {
          "path": "templates/minimal_dashboard.html",
          "type": "TO_MODIFY",
          "description": "삭제 대상"
        },
        {
          "path": "templates/simple_dashboard.html",
          "type": "TO_MODIFY",
          "description": "삭제 대상"
        },
        {
          "path": "src/web/routes.py",
          "type": "REFERENCE",
          "description": "템플릿 참조 확인"
        }
      ],
      "implementationGuide": "1. 현재 dashboard.html 기능 분석 (최근 하드코딩 제거 적용됨)\\n2. advanced_dashboard.html의 고급 기능 식별\\n3. enhanced_dashboard.html의 향상된 UI 요소 식별\\n4. 유용한 기능들을 main dashboard.html에 병합\\n5. 중복 템플릿 파일들 제거: advanced_, enhanced_, minimal_, simple_\\n6. routes에서 삭제된 템플릿 참조 제거",
      "verificationCriteria": "메인 dashboard 페이지가 정상 로드되고 기존 기능들이 모두 동작하는지 확인. 삭제된 템플릿들에 대한 404 에러가 없는지 확인",
      "analysisResult": "프로젝트 파일 정리 및 통합을 통한 구조 최적화: 현재 HAR-based collector를 중심으로 한 production 아키텍처를 보존하면서 100개 이상의 중복/레거시 파일들을 체계적으로 정리. 3단계 접근법을 통해 안전성을 보장하며 코드베이스를 50% 이상 단순화"
    },
    {
      "id": "e7a13ae3-2a10-4eab-b765-6bfd2b89e06b",
      "name": "Scripts 디렉토리 대량 정리",
      "description": "scripts 디렉토리의 100개 이상 파일 중 개발/디버깅용 일회성 스크립트들을 정리. production에서 사용되는 핵심 스크립트만 보존하고 나머지 제거",
      "notes": "배포 관련 스크립트들은 현재 CI/CD에서 사용 중이므로 신중하게 확인. 최근 수정된 파일들은 우선 보존",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-06-25T17:24:19.953Z",
      "updatedAt": "2025-06-25T17:24:19.953Z",
      "relatedFiles": [
        {
          "path": "scripts/",
          "type": "TO_MODIFY",
          "description": "전체 scripts 디렉토리 정리"
        },
        {
          "path": "scripts/collection/collect_regtech_simple.py",
          "type": "REFERENCE",
          "description": "최근 수정된 핵심 스크립트 - 보존"
        },
        {
          "path": "deploy-single.sh",
          "type": "REFERENCE",
          "description": "배포 스크립트 - 보존"
        },
        {
          "path": ".github/workflows/build-deploy.yml",
          "type": "REFERENCE",
          "description": "CI/CD에서 사용하는 스크립트 확인"
        }
      ],
      "implementationGuide": "1. Production 필수 스크립트 식별: deploy-single.sh, manage-volumes.sh, check-docker-volumes.sh\\n2. 최근 수정된 핵심 스크립트: scripts/collection/collect_regtech_simple.py\\n3. 제거 대상 카테고리:\\n   - debug_*.py, test_*.py, analyze_*.py 시리즈\\n   - fix-*.sh 일회성 스크립트들\\n   - scripts/collection/ 하위 중복 collector 테스트들\\n   - 실험적 collector 변형들\\n4. scripts/README.md 업데이트\\n5. CI/CD에서 참조하는 스크립트 확인",
      "verificationCriteria": "CI/CD 파이프라인이 정상 동작하고 필수 배포 스크립트들이 유지되는지 확인. 제거된 스크립트들이 다른 곳에서 참조되지 않는지 확인",
      "analysisResult": "프로젝트 파일 정리 및 통합을 통한 구조 최적화: 현재 HAR-based collector를 중심으로 한 production 아키텍처를 보존하면서 100개 이상의 중복/레거시 파일들을 체계적으로 정리. 3단계 접근법을 통해 안전성을 보장하며 코드베이스를 50% 이상 단순화"
    },
    {
      "id": "d37b506a-6bde-4b3d-85c0-2ddc3e069e83",
      "name": "사용되지 않는 routes 파일 정리",
      "description": "app_compact.py에서 실제 등록되지 않거나 import 실패하는 routes 파일들을 정리. 실제 동작하는 routes만 보존하고 중복/실패 모듈들 제거",
      "notes": "v2_routes.py는 향후 API 확장 계획 확인 후 결정. simple_api.py는 fallback으로 동작하므로 보존",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "7f37da00-f88c-4a83-8f5c-537bbf301eef"
        }
      ],
      "createdAt": "2025-06-25T17:24:19.953Z",
      "updatedAt": "2025-06-25T17:24:19.953Z",
      "relatedFiles": [
        {
          "path": "src/core/routes_unified.py",
          "type": "TO_MODIFY",
          "description": "사용되지 않는 routes - 삭제 대상"
        },
        {
          "path": "src/core/unified_routes.py",
          "type": "TO_MODIFY",
          "description": "사용되지 않는 routes - 삭제 대상"
        },
        {
          "path": "src/core/app_compact.py",
          "type": "TO_MODIFY",
          "description": "실패하는 import 라인 정리"
        },
        {
          "path": "src/core/collection_routes.py",
          "type": "REFERENCE",
          "description": "실제 등록되는 routes - 보존"
        },
        {
          "path": "src/core/collection_control_routes.py",
          "type": "REFERENCE",
          "description": "실제 등록되는 routes - 보존"
        }
      ],
      "implementationGuide": "1. app_compact.py의 실제 routes 등록 현황 분석\\n2. 제거 대상 확인:\\n   - routes_unified.py (사용되지 않음)\\n   - unified_routes.py (사용되지 않음)\\n   - v2_routes_simple (missing import)\\n   - simple_routes (missing import)\\n   - collection_simple (missing import)\\n3. 성공적으로 등록되는 routes 보존:\\n   - collection_routes.py\\n   - collection_control_routes.py\\n   - missing_routes.py\\n4. app_compact.py에서 실패하는 import 라인 정리",
      "verificationCriteria": "app_compact.py가 에러 없이 시작되고 모든 API 엔드포인트가 정상 동작하는지 확인. 제거된 routes에 대한 404 에러가 없는지 확인",
      "analysisResult": "프로젝트 파일 정리 및 통합을 통한 구조 최적화: 현재 HAR-based collector를 중심으로 한 production 아키텍처를 보존하면서 100개 이상의 중복/레거시 파일들을 체계적으로 정리. 3단계 접근법을 통해 안전성을 보장하며 코드베이스를 50% 이상 단순화"
    },
    {
      "id": "16e0a2aa-9f37-4e0e-ad98-75702b57fa3b",
      "name": "레거시 앱 진입점 정리",
      "description": "main.py의 복잡한 fallback chain을 단순화하고 사용되지 않는 레거시 app 파일들 확인 후 정리. app_compact -> minimal_app 구조로 단순화",
      "notes": "현재 production에서는 app_compact가 정상 동작하므로 이를 기준으로 단순화. minimal_app은 진정한 fallback으로만 유지",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "d37b506a-6bde-4b3d-85c0-2ddc3e069e83"
        }
      ],
      "createdAt": "2025-06-25T17:24:19.953Z",
      "updatedAt": "2025-06-25T17:24:19.953Z",
      "relatedFiles": [
        {
          "path": "main.py",
          "type": "TO_MODIFY",
          "description": "fallback chain 단순화"
        },
        {
          "path": "src/core/app_compact.py",
          "type": "REFERENCE",
          "description": "메인 진입점 - 보존"
        },
        {
          "path": "src/core/minimal_app.py",
          "type": "REFERENCE",
          "description": "fallback 진입점 - 보존"
        },
        {
          "path": "src/app.py",
          "type": "TO_MODIFY",
          "description": "존재시 레거시 파일 - 삭제 검토"
        },
        {
          "path": "app.py",
          "type": "TO_MODIFY",
          "description": "존재시 레거시 파일 - 삭제 검토"
        }
      ],
      "implementationGuide": "1. 현재 main.py fallback 경로 분석: app_compact -> minimal_app -> src.app -> app\\n2. src.app, app 레거시 파일 존재 여부 확인\\n3. 실제 사용되지 않는 fallback 단계 제거\\n4. main.py를 app_compact -> minimal_app 2단계로 단순화\\n5. 레거시 app 파일들이 존재하면 제거\\n6. error handling 개선하여 명확한 실패 메시지 제공",
      "verificationCriteria": "main.py가 정상적으로 app_compact를 로드하고 애플리케이션이 성공적으로 시작되는지 확인. fallback이 필요한 경우 minimal_app으로 정상 전환되는지 확인",
      "analysisResult": "프로젝트 파일 정리 및 통합을 통한 구조 최적화: 현재 HAR-based collector를 중심으로 한 production 아키텍처를 보존하면서 100개 이상의 중복/레거시 파일들을 체계적으로 정리. 3단계 접근법을 통해 안전성을 보장하며 코드베이스를 50% 이상 단순화"
    },
    {
      "id": "675085bd-5048-45fd-9a3c-740c2139409d",
      "name": "프로젝트 구조 문서화 및 검증",
      "description": "정리 완료 후 새로운 프로젝트 구조를 문서화하고 전체 시스템이 정상 동작하는지 종합 검증. 의존성 그래프 업데이트 및 아키텍처 문서 정리",
      "notes": "전체 정리 작업의 마지막 단계로 시스템 안정성 확인이 핵심. 문제 발견시 이전 단계 롤백 준비",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "7f37da00-f88c-4a83-8f5c-537bbf301eef"
        },
        {
          "taskId": "2dc25909-9e5c-43f1-b5a2-dbf918dbf6c1"
        },
        {
          "taskId": "e7a13ae3-2a10-4eab-b765-6bfd2b89e06b"
        },
        {
          "taskId": "d37b506a-6bde-4b3d-85c0-2ddc3e069e83"
        },
        {
          "taskId": "16e0a2aa-9f37-4e0e-ad98-75702b57fa3b"
        }
      ],
      "createdAt": "2025-06-25T17:24:19.953Z",
      "updatedAt": "2025-06-25T17:24:19.953Z",
      "relatedFiles": [
        {
          "path": "CLAUDE.md",
          "type": "TO_MODIFY",
          "description": "프로젝트 구조 섹션 업데이트"
        },
        {
          "path": "README.md",
          "type": "TO_MODIFY",
          "description": "정리된 구조 반영"
        },
        {
          "path": "src/",
          "type": "REFERENCE",
          "description": "전체 src 구조 검증"
        },
        {
          "path": "templates/",
          "type": "REFERENCE",
          "description": "정리된 템플릿 구조 검증"
        },
        {
          "path": "scripts/",
          "type": "REFERENCE",
          "description": "정리된 스크립트 구조 검증"
        }
      ],
      "implementationGuide": "1. 정리 후 프로젝트 구조 스캔 및 문서화\\n2. 핵심 모듈 의존성 그래프 작성\\n3. 전체 시스템 동작 테스트:\\n   - 웹 인터페이스 로드 확인\\n   - API 엔드포인트 동작 확인\\n   - collector 기능 동작 확인\\n4. CLAUDE.md 업데이트 (프로젝트 구조 섹션)\\n5. README.md 업데이트 (정리된 구조 반영)\\n6. 정리 전후 파일 수 비교 리포트 작성",
      "verificationCriteria": "전체 애플리케이션이 정상 동작하고 모든 핵심 기능이 유지되는지 확인. 정리 전후 파일 수가 50% 이상 감소했는지 확인. CI/CD 파이프라인이 정상 동작하는지 확인",
      "analysisResult": "프로젝트 파일 정리 및 통합을 통한 구조 최적화: 현재 HAR-based collector를 중심으로 한 production 아키텍처를 보존하면서 100개 이상의 중복/레거시 파일들을 체계적으로 정리. 3단계 접근법을 통해 안전성을 보장하며 코드베이스를 50% 이상 단순화"
    }
  ]
}