name: 🐳 Multi-Docker Deploy | All Services
# PostgreSQL + Redis + Blacklist 이미지 변경 감지 및 자동 배포

on:
  push:
    branches:
      - main
    paths:
      - 'docker/postgresql/**'
      - 'docker/redis/**'
      - '*.py'
      - 'main.py'
      - 'Dockerfile'
      - 'requirements*.txt'
      - 'package.json'
  workflow_dispatch:
    inputs:
      force_rebuild_all:
        description: 'Force rebuild all Docker images'
        required: false
        default: false
        type: boolean
      rebuild_postgresql:
        description: 'Force rebuild PostgreSQL'
        required: false
        default: false
        type: boolean
      rebuild_redis:
        description: 'Force rebuild Redis'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: registry.jclee.me
  REGISTRY_USER: admin
  REGISTRY_PASS: bingogo1

jobs:
  # ============================================
  # 스마트 Docker 이미지 변경 감지
  # ============================================
  detect-docker-changes:
    name: "🔍 Multi-Docker Change Detection"
    runs-on: ubuntu-latest
    outputs:
      blacklist_changed: ${{ steps.changes.outputs.blacklist_changed }}
      postgresql_changed: ${{ steps.changes.outputs.postgresql_changed }}
      redis_changed: ${{ steps.changes.outputs.redis_changed }}
      any_changed: ${{ steps.changes.outputs.any_changed }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: "📊 Generate Version"
      id: version
      run: |
        # Package version from package.json + git commit count
        if [ -f package.json ]; then
          PACKAGE_VERSION=$(grep '"version"' package.json | head -1 | cut -d'"' -f4 || echo "1.0.0")
        else
          PACKAGE_VERSION="1.0.0"
        fi
        
        # Use the package version directly
        VERSION="$PACKAGE_VERSION"
        TIMESTAMP=$(date +%Y%m%d-%H%M)
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        
        echo "📦 Build Version: $VERSION"
        echo "🕐 Timestamp: $TIMESTAMP"
        
    - name: "🔍 Smart Docker Change Detection"
      id: changes
      run: |
        echo "🔍 Docker 이미지 변경 감지 시작..."
        
        # 초기화
        BLACKLIST_CHANGED=false
        POSTGRESQL_CHANGED=false
        REDIS_CHANGED=false
        ANY_CHANGED=false
        
        # Manual 트리거 확인
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "📌 Manual trigger detected"
          
          if [ "${{ github.event.inputs.force_rebuild_all }}" = "true" ]; then
            echo "🔨 Force rebuild all requested"
            BLACKLIST_CHANGED=true
            POSTGRESQL_CHANGED=true
            REDIS_CHANGED=true
            ANY_CHANGED=true
          else
            if [ "${{ github.event.inputs.rebuild_postgresql }}" = "true" ]; then
              POSTGRESQL_CHANGED=true
              ANY_CHANGED=true
              echo "🔨 Force rebuild PostgreSQL"
            fi
            if [ "${{ github.event.inputs.rebuild_redis }}" = "true" ]; then
              REDIS_CHANGED=true
              ANY_CHANGED=true
              echo "🔨 Force rebuild Redis"
            fi
          fi
        else
          # 변경된 파일 감지
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "📝 Changes detected:"
            echo "$CHANGED_FILES"
            echo ""
            
            # Blacklist 앱 변경 감지
            if echo "$CHANGED_FILES" | grep -q "\.py$\|^main\.py\|Dockerfile\|requirements.*\.txt\|package\.json"; then
              BLACKLIST_CHANGED=true
              ANY_CHANGED=true
              echo "✅ Blacklist: 변경 감지됨"
            fi
            
            # PostgreSQL 변경 감지
            if echo "$CHANGED_FILES" | grep -q "docker/postgresql/"; then
              POSTGRESQL_CHANGED=true
              ANY_CHANGED=true
              echo "✅ PostgreSQL: 변경 감지됨"
            fi
            
            # Redis 변경 감지  
            if echo "$CHANGED_FILES" | grep -q "docker/redis/"; then
              REDIS_CHANGED=true
              ANY_CHANGED=true
              echo "✅ Redis: 변경 감지됨"
            fi
          else
            echo "ℹ️ No relevant changes detected"
          fi
        fi
        
        # 출력 설정
        echo "blacklist_changed=$BLACKLIST_CHANGED" >> $GITHUB_OUTPUT
        echo "postgresql_changed=$POSTGRESQL_CHANGED" >> $GITHUB_OUTPUT
        echo "redis_changed=$REDIS_CHANGED" >> $GITHUB_OUTPUT
        echo "any_changed=$ANY_CHANGED" >> $GITHUB_OUTPUT
        
        # 요약
        echo ""
        echo "📊 Docker Change Detection Summary:"
        echo "  Blacklist: $BLACKLIST_CHANGED"
        echo "  PostgreSQL: $POSTGRESQL_CHANGED" 
        echo "  Redis: $REDIS_CHANGED"
        echo "  Any Changed: $ANY_CHANGED"

  # ============================================
  # Blacklist 앱 빌드 및 푸시
  # ============================================
  build-blacklist:
    name: "🛡️ Build Blacklist App"
    needs: detect-docker-changes
    if: needs.detect-docker-changes.outputs.blacklist_changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: "🐳 Login to Registry"
      run: |
        echo "${{ env.REGISTRY_PASS }}" | docker login ${{ env.REGISTRY }} -u ${{ env.REGISTRY_USER }} --password-stdin
    
    - name: "🏗️ Build & Push Blacklist"
      run: |
        VERSION="${{ needs.detect-docker-changes.outputs.version }}"
        TIMESTAMP="${{ needs.detect-docker-changes.outputs.timestamp }}"
        
        echo "🛡️ Building Blacklist v$VERSION..."
        
        # 멀티 태그 빌드
        docker build -t ${{ env.REGISTRY }}/blacklist:latest \
          -t ${{ env.REGISTRY }}/blacklist:$VERSION \
          -t ${{ env.REGISTRY }}/blacklist:$TIMESTAMP \
          --build-arg BUILD_VERSION=$VERSION \
          --build-arg BUILD_NUMBER=${{ github.run_number }} \
          --build-arg COMMIT_SHA=${{ github.sha }} \
          --label "com.centurylinklabs.watchtower.enable=true" \
          .
        
        echo "📤 Pushing Blacklist images..."
        docker push ${{ env.REGISTRY }}/blacklist:latest
        docker push ${{ env.REGISTRY }}/blacklist:$VERSION
        docker push ${{ env.REGISTRY }}/blacklist:$TIMESTAMP
        
        echo "✅ Blacklist build & push completed"

  # ============================================
  # PostgreSQL 빌드 및 푸시
  # ============================================
  build-postgresql:
    name: "🐘 Build PostgreSQL"
    needs: detect-docker-changes
    if: needs.detect-docker-changes.outputs.postgresql_changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: "🐳 Login to Registry"
      run: |
        echo "${{ env.REGISTRY_PASS }}" | docker login ${{ env.REGISTRY }} -u ${{ env.REGISTRY_USER }} --password-stdin
    
    - name: "🏗️ Build & Push PostgreSQL"
      run: |
        VERSION="${{ needs.detect-docker-changes.outputs.version }}"
        TIMESTAMP="${{ needs.detect-docker-changes.outputs.timestamp }}"
        
        echo "🐘 Building Custom PostgreSQL v$VERSION..."
        
        # PostgreSQL 빌드 (docker/postgresql 디렉토리에서)
        docker build -t ${{ env.REGISTRY }}/blacklist-postgresql:latest \
          -t ${{ env.REGISTRY }}/blacklist-postgresql:$VERSION \
          -t ${{ env.REGISTRY }}/blacklist-postgresql:$TIMESTAMP \
          --label "com.centurylinklabs.watchtower.enable=true" \
          ./docker/postgresql/
        
        echo "📤 Pushing PostgreSQL images..."
        docker push ${{ env.REGISTRY }}/blacklist-postgresql:latest
        docker push ${{ env.REGISTRY }}/blacklist-postgresql:$VERSION
        docker push ${{ env.REGISTRY }}/blacklist-postgresql:$TIMESTAMP
        
        echo "✅ PostgreSQL build & push completed"

  # ============================================
  # Redis 빌드 및 푸시
  # ============================================
  build-redis:
    name: "🟥 Build Redis"
    needs: detect-docker-changes
    if: needs.detect-docker-changes.outputs.redis_changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: "🐳 Login to Registry"
      run: |
        echo "${{ env.REGISTRY_PASS }}" | docker login ${{ env.REGISTRY }} -u ${{ env.REGISTRY_USER }} --password-stdin
    
    - name: "🏗️ Build & Push Redis"
      run: |
        VERSION="${{ needs.detect-docker-changes.outputs.version }}"
        TIMESTAMP="${{ needs.detect-docker-changes.outputs.timestamp }}"
        
        echo "🟥 Building Custom Redis v$VERSION..."
        
        # Redis 빌드 (docker/redis 디렉토리에서)
        docker build -t ${{ env.REGISTRY }}/blacklist-redis:latest \
          -t ${{ env.REGISTRY }}/blacklist-redis:$VERSION \
          -t ${{ env.REGISTRY }}/blacklist-redis:$TIMESTAMP \
          --label "com.centurylinklabs.watchtower.enable=true" \
          ./docker/redis/
        
        echo "📤 Pushing Redis images..."
        docker push ${{ env.REGISTRY }}/blacklist-redis:latest
        docker push ${{ env.REGISTRY }}/blacklist-redis:$VERSION
        docker push ${{ env.REGISTRY }}/blacklist-redis:$TIMESTAMP
        
        echo "✅ Redis build & push completed"

  # ============================================
  # Watchtower 알림 (자동 배포 트리거)
  # ============================================
  notify-watchtower:
    name: "🤖 Notify Watchtower for Auto-Deploy"
    needs: [detect-docker-changes, build-blacklist, build-postgresql, build-redis]
    if: always() && needs.detect-docker-changes.outputs.any_changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: "📢 Watchtower Update Notification"
      run: |
        echo "🤖 Docker 이미지 업데이트 완료 - Watchtower 자동 배포 대기 중..."
        
        # 업데이트된 이미지 목록
        UPDATED_IMAGES=""
        
        if [ "${{ needs.detect-docker-changes.outputs.blacklist_changed }}" = "true" ] && [ "${{ needs.build-blacklist.result }}" = "success" ]; then
          UPDATED_IMAGES="$UPDATED_IMAGES\n  ✅ blacklist:latest"
        fi
        
        if [ "${{ needs.detect-docker-changes.outputs.postgresql_changed }}" = "true" ] && [ "${{ needs.build-postgresql.result }}" = "success" ]; then
          UPDATED_IMAGES="$UPDATED_IMAGES\n  ✅ blacklist-postgresql:latest"
        fi
        
        if [ "${{ needs.detect-docker-changes.outputs.redis_changed }}" = "true" ] && [ "${{ needs.build-redis.result }}" = "success" ]; then
          UPDATED_IMAGES="$UPDATED_IMAGES\n  ✅ blacklist-redis:latest"
        fi
        
        echo "📦 Updated Images:"
        echo -e "$UPDATED_IMAGES"
        echo ""
        echo "🤖 Watchtower will automatically detect and deploy these updated images"
        echo "🕐 Expected deployment time: 1-3 minutes"
        echo "🌐 Monitor at: https://blacklist.jclee.me/health"

  # ============================================
  # 요약 리포트
  # ============================================
  summary:
    name: "📊 Multi-Docker Deploy Summary"
    needs: [detect-docker-changes, build-blacklist, build-postgresql, build-redis, notify-watchtower]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: "📊 Generate Multi-Docker Summary"
      run: |
        echo "# 🐳 Multi-Docker Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📦 Docker Images Status" >> $GITHUB_STEP_SUMMARY
        echo "| Image | Changed | Build Status | Version |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|---------|--------------|---------|" >> $GITHUB_STEP_SUMMARY
        
        # Blacklist 상태
        if [ "${{ needs.detect-docker-changes.outputs.blacklist_changed }}" = "true" ]; then
          if [ "${{ needs.build-blacklist.result }}" = "success" ]; then
            echo "| 🛡️ Blacklist | ✅ Changed | ✅ Built & Pushed | ${{ needs.detect-docker-changes.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🛡️ Blacklist | ✅ Changed | ❌ Build Failed | - |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "| 🛡️ Blacklist | ⏭️ No Changes | - | - |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # PostgreSQL 상태
        if [ "${{ needs.detect-docker-changes.outputs.postgresql_changed }}" = "true" ]; then
          if [ "${{ needs.build-postgresql.result }}" = "success" ]; then
            echo "| 🐘 PostgreSQL | ✅ Changed | ✅ Built & Pushed | ${{ needs.detect-docker-changes.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🐘 PostgreSQL | ✅ Changed | ❌ Build Failed | - |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "| 🐘 PostgreSQL | ⏭️ No Changes | - | - |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Redis 상태  
        if [ "${{ needs.detect-docker-changes.outputs.redis_changed }}" = "true" ]; then
          if [ "${{ needs.build-redis.result }}" = "success" ]; then
            echo "| 🟥 Redis | ✅ Changed | ✅ Built & Pushed | ${{ needs.detect-docker-changes.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🟥 Redis | ✅ Changed | ❌ Build Failed | - |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "| 🟥 Redis | ⏭️ No Changes | - | - |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📌 Deployment Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ needs.detect-docker-changes.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Auto Deploy:** Watchtower 🤖" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 🌐 Access & Monitoring" >> $GITHUB_STEP_SUMMARY
        echo "- **Production:** https://blacklist.jclee.me/" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check:** https://blacklist.jclee.me/health" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry:** https://registry.jclee.me/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 성공 여부
        SUCCESS_COUNT=0
        TOTAL_BUILDS=0
        
        if [ "${{ needs.detect-docker-changes.outputs.blacklist_changed }}" = "true" ]; then
          TOTAL_BUILDS=$((TOTAL_BUILDS + 1))
          if [ "${{ needs.build-blacklist.result }}" = "success" ]; then
            SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          fi
        fi
        
        if [ "${{ needs.detect-docker-changes.outputs.postgresql_changed }}" = "true" ]; then
          TOTAL_BUILDS=$((TOTAL_BUILDS + 1))
          if [ "${{ needs.build-postgresql.result }}" = "success" ]; then
            SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          fi
        fi
        
        if [ "${{ needs.detect-docker-changes.outputs.redis_changed }}" = "true" ]; then
          TOTAL_BUILDS=$((TOTAL_BUILDS + 1))
          if [ "${{ needs.build-redis.result }}" = "success" ]; then
            SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          fi
        fi
        
        if [ "$TOTAL_BUILDS" -eq 0 ]; then
          echo "## ℹ️ No builds required - No changes detected" >> $GITHUB_STEP_SUMMARY
        elif [ "$SUCCESS_COUNT" -eq "$TOTAL_BUILDS" ]; then
          echo "## 🎉 All Docker Builds: SUCCESS ($SUCCESS_COUNT/$TOTAL_BUILDS)" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ Docker Builds: PARTIAL SUCCESS ($SUCCESS_COUNT/$TOTAL_BUILDS)" >> $GITHUB_STEP_SUMMARY
        fi