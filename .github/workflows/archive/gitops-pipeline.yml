name: GitOps CNCF-Compliant Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - development
        - staging
        - production
      force_deploy:
        description: 'Force deployment (skip tests)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: jclee94/blacklist
  NAMESPACE: blacklist-system
  ARGOCD_SERVER: argo.jclee.me
  K8S_CLUSTER: https://k8s.jclee.me

jobs:
  # 🔍 Security and Quality Gates
  security-quality:
    name: 🛡️ Security & Quality Gates
    runs-on: self-hosted
    if: github.event_name != 'workflow_dispatch' || !inputs.force_deploy
    outputs:
      security-passed: ${{ steps.security.outputs.passed }}
      quality-passed: ${{ steps.quality.outputs.passed }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐍 Setup Python Environment  
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install bandit safety black flake8 pytest-cov

    - name: 🔒 Security Scan (Bandit)
      id: security
      run: |
        echo "🔍 Running Bandit security analysis..."
        bandit -r src/ -ll -f json -o bandit-report.json
        BANDIT_EXIT=$?
        
        # Check for high/medium severity issues
        HIGH_ISSUES=$(jq '.results | map(select(.issue_severity == "HIGH")) | length' bandit-report.json 2>/dev/null || echo "0")
        MEDIUM_ISSUES=$(jq '.results | map(select(.issue_severity == "MEDIUM")) | length' bandit-report.json 2>/dev/null || echo "0")
        
        echo "high-issues=$HIGH_ISSUES" >> $GITHUB_OUTPUT
        echo "medium-issues=$MEDIUM_ISSUES" >> $GITHUB_OUTPUT
        
        if [ "$HIGH_ISSUES" -gt 0 ]; then
          echo "❌ High severity security issues found: $HIGH_ISSUES"
          echo "passed=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "✅ Security scan passed"
          echo "passed=true" >> $GITHUB_OUTPUT
        fi

    - name: 🧪 Code Quality Check
      id: quality
      run: |
        echo "🔍 Checking code quality..."
        
        # File size check (500-line rule)
        echo "📏 Enforcing 500-line rule..."
        LARGE_FILES=$(find src/ -name "*.py" -exec wc -l {} + | awk '$1 > 500 {print $2 " (" $1 " lines)"}' | wc -l)
        
        if [ "$LARGE_FILES" -gt 0 ]; then
          echo "❌ Files exceeding 500-line limit found:"
          find src/ -name "*.py" -exec wc -l {} + | awk '$1 > 500 {print "  " $2 " (" $1 " lines)"}'
          echo "passed=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Code formatting check
        echo "🎨 Checking code formatting..."
        black --check src/ tests/ --diff
        FORMAT_EXIT=$?
        
        # Linting check
        echo "🔍 Running flake8 linting..."
        flake8 src/ --max-line-length=88 --extend-ignore=E203,W503 --statistics
        LINT_EXIT=$?
        
        if [ $FORMAT_EXIT -eq 0 ] && [ $LINT_EXIT -eq 0 ] && [ "$LARGE_FILES" -eq 0 ]; then
          echo "✅ Code quality checks passed"
          echo "passed=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Code quality checks failed"
          echo "passed=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: 📊 Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-quality-reports
        path: |
          bandit-report.json
          .coverage
        retention-days: 7

  # 🧪 Comprehensive Test Suite
  test-suite:
    name: 🧪 Test Suite
    runs-on: self-hosted
    needs: security-quality
    if: always() && (needs.security-quality.result == 'success' || needs.security-quality.result == 'skipped')
    strategy:
      matrix:
        test-type: [unit, integration, api]
        
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐍 Setup Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: 🔧 Setup Test Environment
      run: |
        cp .env.example .env
        # Secure test defaults
        cat >> .env << EOF
        FORCE_DISABLE_COLLECTION=true
        COLLECTION_ENABLED=false
        RESTART_PROTECTION=true
        TEST_MODE=true
        FLASK_ENV=testing
        LOG_LEVEL=INFO
        EOF
        
        # Initialize test database
        PYTHONPATH=$PWD python init_database.py

    - name: 🧪 Run Unit Tests
      if: matrix.test-type == 'unit'
      run: |
        echo "🔬 Running unit tests..."
        PYTHONPATH=$PWD pytest tests/unit/ -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --junitxml=unit-test-results.xml \
          --tb=short

    - name: 🔗 Run Integration Tests
      if: matrix.test-type == 'integration'
      run: |
        echo "🔗 Running integration tests..."
        PYTHONPATH=$PWD pytest tests/integration/ -v \
          --junitxml=integration-test-results.xml \
          -m "not slow" \
          --tb=short

    - name: 📡 Run API Tests
      if: matrix.test-type == 'api'
      run: |
        echo "📡 Running API tests..."
        PYTHONPATH=$PWD pytest tests/test_apis.py -v \
          --junitxml=api-test-results.xml \
          -m api \
          --tb=short

    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          *-test-results.xml
          htmlcov/
          coverage.xml
        retention-days: 7

  # 🏗️ Container Build & Security Scan
  build-container:
    name: 🏗️ Build & Scan Container
    runs-on: self-hosted
    needs: [security-quality, test-suite]
    if: always() && needs.security-quality.result == 'success' && needs.test-suite.result == 'success'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      image-version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 📋 Generate Version Info
      id: version
      run: |
        # Generate semantic version
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(cat VERSION | tr -d '\\n')
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            VERSION="${VERSION}-${GITHUB_SHA::8}"
          fi
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build-date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
        echo "📦 Building version: $VERSION"

    - name: 🐳 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        config-inline: |
          [registry."${{ env.REGISTRY }}"]
            http = true
            insecure = true

    - name: 🔐 Registry Authentication
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_REGISTRY_USER }}
        password: ${{ secrets.DOCKER_REGISTRY_PASS }}

    - name: 🏷️ Extract Container Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.version.outputs.version }}

    - name: 🏗️ Build & Push Container
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          BUILD_DATE=${{ steps.version.outputs.build-date }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ steps.version.outputs.version }}

    - name: 🛡️ Container Security Scan (Trivy)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Security Scan Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 🚀 GitOps Deployment via ArgoCD
  gitops-deploy:
    name: 🚀 GitOps Deployment
    runs-on: self-hosted
    needs: build-container
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN }}
        fetch-depth: 0

    - name: 🔄 Update Kubernetes Manifests
      id: update-manifests
      run: |
        IMAGE_TAG="${{ needs.build-container.outputs.image-version }}"
        echo "🔄 Updating K8s manifests with image tag: $IMAGE_TAG"
        
        # Update production overlay
        sed -i "s|newTag: .*|newTag: $IMAGE_TAG|" k8s/overlays/production/kustomization.yaml
        
        # Update base configuration
        sed -i "s|version: .*|version: $IMAGE_TAG|" k8s/base/kustomization.yaml
        
        # Update ArgoCD application version
        sed -i "s|value: '.*'|value: '$IMAGE_TAG'|" argocd/application.yaml
        
        echo "manifest-updated=true" >> $GITHUB_OUTPUT

    - name: 📤 Commit Manifest Changes
      if: steps.update-manifests.outputs.manifest-updated == 'true'
      run: |
        git config --local user.email "gitops@jclee.me"
        git config --local user.name "GitOps Bot"
        
        git add k8s/ argocd/
        git commit -m "feat: update container image to ${{ needs.build-container.outputs.image-version }}

        🤖 Generated with [Claude Code](https://claude.ai/code)

        Co-Authored-By: Claude <noreply@anthropic.com>"
        
        git push origin main

    - name: ⏳ Trigger ArgoCD Sync
      run: |
        echo "🔄 Triggering ArgoCD synchronization..."
        
        # Check ArgoCD application status
        curl -s -k -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
          "https://${{ env.ARGOCD_SERVER }}/api/v1/applications/blacklist-app" | jq .
        
        # Trigger manual sync
        curl -X POST -k \
          -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
          -H "Content-Type: application/json" \
          "https://${{ env.ARGOCD_SERVER }}/api/v1/applications/blacklist-app/sync" \
          -d '{
            "revision": "${{ github.sha }}",
            "prune": true,
            "dryRun": false,
            "strategy": {
              "apply": {
                "force": false
              }
            }
          }'

    - name: ⏱️ Wait for Deployment
      timeout-minutes: 10
      run: |
        echo "⏱️ Waiting for deployment to complete..."
        
        for i in {1..20}; do
          echo "🔍 Check attempt $i/20..."
          
          # Check ArgoCD app sync status
          SYNC_STATUS=$(curl -s -k -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
            "https://${{ env.ARGOCD_SERVER }}/api/v1/applications/blacklist-app" | jq -r '.status.sync.status')
          
          HEALTH_STATUS=$(curl -s -k -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
            "https://${{ env.ARGOCD_SERVER }}/api/v1/applications/blacklist-app" | jq -r '.status.health.status')
          
          echo "📊 Sync Status: $SYNC_STATUS, Health Status: $HEALTH_STATUS"
          
          if [ "$SYNC_STATUS" = "Synced" ] && [ "$HEALTH_STATUS" = "Healthy" ]; then
            echo "✅ Deployment successful!"
            break
          fi
          
          if [ "$i" -eq 20 ]; then
            echo "❌ Deployment timeout!"
            exit 1
          fi
          
          sleep 30
        done

  # 🔍 Health Check & Validation
  validate-deployment:
    name: 🔍 Deployment Validation
    runs-on: self-hosted
    needs: gitops-deploy
    if: always() && needs.gitops-deploy.result == 'success'
    
    steps:
    - name: 🏥 Health Check
      run: |
        echo "🏥 Performing health checks..."
        sleep 60  # Allow services to fully start
        
        # Primary health check
        curl -f -m 10 "https://blacklist.jclee.me/health" || {
          echo "❌ Primary health check failed"
          exit 1
        }
        
        # API functionality check
        curl -f -m 10 "https://blacklist.jclee.me/api/blacklist/active" || {
          echo "❌ API functionality check failed"
          exit 1
        }
        
        # Kubernetes readiness check
        kubectl get pods -n ${{ env.NAMESPACE }} -l app=blacklist
        kubectl describe deployment blacklist-deployment -n ${{ env.NAMESPACE }}
        
        echo "✅ All health checks passed!"

    - name: 📊 Generate Deployment Report
      run: |
        echo "📊 Deployment Report" >> deployment-report.md
        echo "===================" >> deployment-report.md
        echo "🕒 Deployment Time: $(date)" >> deployment-report.md
        echo "📦 Version: ${{ needs.build-container.outputs.image-version }}" >> deployment-report.md
        echo "🔄 Commit: ${{ github.sha }}" >> deployment-report.md
        echo "🌐 URL: https://blacklist.jclee.me" >> deployment-report.md
        echo "🎯 Environment: Production" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "### Health Status" >> deployment-report.md
        echo "- ✅ Application Health: OK" >> deployment-report.md
        echo "- ✅ API Endpoints: OK" >> deployment-report.md
        echo "- ✅ K8s Deployment: OK" >> deployment-report.md
        echo "- ✅ ArgoCD Sync: OK" >> deployment-report.md

    - name: 📤 Upload Deployment Report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report
        path: deployment-report.md
        retention-days: 30

  # 📢 Notification & Summary
  notification:
    name: 📢 Pipeline Summary
    runs-on: self-hosted
    needs: [security-quality, test-suite, build-container, gitops-deploy, validate-deployment]
    if: always()
    
    steps:
    - name: 📋 Generate Pipeline Summary
      run: |
        echo "🔄 CNCF GitOps Pipeline Summary"
        echo "======================================"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "📦 Version: ${{ needs.build-container.outputs.image-version || 'N/A' }}"
        echo "🔄 Commit: ${{ github.sha }}"
        echo "🕒 Triggered: $(date)"
        echo ""
        echo "### Stage Results:"
        echo "🛡️  Security & Quality: ${{ needs.security-quality.result }}"
        echo "🧪 Test Suite: ${{ needs.test-suite.result }}"
        echo "🏗️  Container Build: ${{ needs.build-container.result }}"
        echo "🚀 GitOps Deploy: ${{ needs.gitops-deploy.result }}"
        echo "🔍 Validation: ${{ needs.validate-deployment.result }}"
        echo ""
        
        if [[ "${{ needs.gitops-deploy.result }}" == "success" && "${{ needs.validate-deployment.result }}" == "success" ]]; then
          echo "🎉 Production Deployment Successful!"
          echo "🌐 Application URL: https://blacklist.jclee.me"
          echo "📊 ArgoCD Dashboard: https://argo.jclee.me"
        else
          echo "❌ Pipeline completed with issues"
        fi