name: Infrastructure Status

on:
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes
  workflow_dispatch:

jobs:
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Check application endpoints
      run: |
        echo "üè• Checking application health..."
        
        # Main application
        if curl -f -s https://blacklist.jclee.me/health > /dev/null; then
          echo "‚úÖ Main application is healthy"
        else
          echo "‚ùå Main application is down"
        fi
        
        # API endpoints
        if curl -f -s https://blacklist.jclee.me/api/health > /dev/null; then
          echo "‚úÖ API is responsive"
        else
          echo "‚ö†Ô∏è API may have issues"
        fi
        
        # FortiGate feed
        if curl -f -s https://blacklist.jclee.me/api/fortigate > /dev/null; then
          echo "‚úÖ FortiGate feed is available"
        else
          echo "‚ö†Ô∏è FortiGate feed may have issues"
        fi

    - name: Check infrastructure services
      run: |
        echo "üèóÔ∏è Checking infrastructure services..."
        
        # Docker registry
        if curl -f -s https://registry.jclee.me > /dev/null; then
          echo "‚úÖ Docker registry is accessible"
        else
          echo "‚ö†Ô∏è Docker registry connection issue"
        fi
        
        # ArgoCD
        if curl -f -s -k https://argo.jclee.me > /dev/null; then
          echo "‚úÖ ArgoCD is accessible"
        else
          echo "‚ö†Ô∏è ArgoCD connection issue"
        fi

    - name: Performance metrics
      run: |
        echo "üìä Performance check..."
        
        # Response time check
        RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' https://blacklist.jclee.me/health)
        echo "‚è±Ô∏è Health endpoint response time: ${RESPONSE_TIME}s"
        
        # Convert to milliseconds and check threshold
        RESPONSE_MS=$(echo "$RESPONSE_TIME * 1000" | bc -l | cut -d. -f1)
        
        if [ "$RESPONSE_MS" -lt 50 ]; then
          echo "üöÄ Excellent performance (<50ms)"
        elif [ "$RESPONSE_MS" -lt 200 ]; then
          echo "‚úÖ Good performance (<200ms)"
        elif [ "$RESPONSE_MS" -lt 1000 ]; then
          echo "‚ö†Ô∏è Acceptable performance (<1s)"
        else
          echo "‚ùå Poor performance (>1s) - investigation needed"
        fi

  deployment-status:
    name: Check Deployment Status
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
    - name: ArgoCD application status
      run: |
        echo "üîÑ Checking ArgoCD deployment status..."
        
        # Try to get ArgoCD status (may fail if token is not available)
        if [ -n "${{ secrets.ARGOCD_TOKEN }}" ]; then
          STATUS=$(curl -k -s -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
            https://argo.jclee.me/api/v1/applications/blacklist | \
            jq -r '.status.sync.status // "Unknown"' 2>/dev/null || echo "Unknown")
          
          HEALTH=$(curl -k -s -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
            https://argo.jclee.me/api/v1/applications/blacklist | \
            jq -r '.status.health.status // "Unknown"' 2>/dev/null || echo "Unknown")
          
          echo "üì± ArgoCD Status:"
          echo "- Sync: $STATUS"
          echo "- Health: $HEALTH"
          
          if [ "$STATUS" = "Synced" ] && [ "$HEALTH" = "Healthy" ]; then
            echo "‚úÖ ArgoCD deployment is healthy"
          else
            echo "‚ö†Ô∏è ArgoCD deployment needs attention"
          fi
        else
          echo "‚ö†Ô∏è ArgoCD token not available - skipping status check"
        fi

    - name: GitHub Actions status
      run: |
        echo "‚öôÔ∏è GitHub Actions Status:"
        echo "- Current workflow: ‚úÖ Running"
        echo "- Branch: ${{ github.ref_name }}"
        echo "- Trigger: ${{ github.event_name }}"
        echo "- Runner: ${{ runner.os }}"

  summary:
    name: Status Summary  
    runs-on: ubuntu-latest
    needs: [health-check, deployment-status]
    if: always()

    steps:
    - name: Generate status report
      run: |
        echo "üìã Infrastructure Status Report"
        echo "=============================="
        echo "üïê Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        echo "üè• Health Check: ${{ needs.health-check.result }}"
        echo "üöÄ Deployment Status: ${{ needs.deployment-status.result }}"
        echo ""
        
        OVERALL="‚úÖ All systems operational"
        if [ "${{ needs.health-check.result }}" != "success" ] || [ "${{ needs.deployment-status.result }}" != "success" ]; then
          OVERALL="‚ö†Ô∏è Some systems need attention"
        fi
        
        echo "üéØ Overall Status: $OVERALL"
        echo ""
        echo "üîó Quick Links:"
        echo "- Application: https://blacklist.jclee.me"
        echo "- API Health: https://blacklist.jclee.me/api/health"
        echo "- ArgoCD: https://argo.jclee.me/applications/blacklist"
        echo "- Docker Registry: https://registry.jclee.me"