name: ArgoCD CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'

# Prevent multiple workflows from running simultaneously
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: write
  actions: read

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist
  ARGOCD_SERVER: argo.jclee.me
  ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}

jobs:
  # Skip workflow for documentation-only changes
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-skip: ${{ steps.skip-check.outputs.should_skip }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Check for code changes
      id: skip-check
      run: |
        # Check if only docs/markdown files changed
        if git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -E '\.(py|yaml|yml|dockerfile|txt|sh)$'; then
          echo "should_skip=false" >> $GITHUB_OUTPUT
        else
          echo "should_skip=true" >> $GITHUB_OUTPUT
        fi

  test:
    needs: check-changes
    if: needs.check-changes.outputs.should-skip != 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Run tests and lint in parallel
      run: |
        # Run tests
        pytest -v --cov=src tests/ --tb=short &
        TEST_PID=$!
        
        # Run linting
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics &
        LINT_PID=$!
        
        # Wait for both to complete
        wait $TEST_PID && wait $LINT_PID

  build-and-push:
    needs: [check-changes, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.check-changes.outputs.should-skip != 'true'
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Private Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{date 'YYYYMMDD-HHmmss'}}
          type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDD-HHmmss'}},format=short
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./deployment/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        
    - name: Show built image tags
      run: |
        echo "🏗️ Built and pushed images:"
        echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | sed 's/^/  - /'
    
    - name: Trigger ArgoCD Sync
      if: success()
      timeout-minutes: 10
      run: |
        # Install ArgoCD CLI if not present
        if ! command -v argocd &> /dev/null; then
          echo "Installing ArgoCD CLI..."
          curl -sSL -o /tmp/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /tmp/argocd
          sudo mv /tmp/argocd /usr/local/bin/argocd
        fi
        
        echo "🔄 Triggering ArgoCD sync..."
        # Sync ArgoCD application (non-blocking)
        argocd app sync blacklist \
          --server ${{ env.ARGOCD_SERVER }} \
          --auth-token ${{ env.ARGOCD_AUTH_TOKEN }} \
          --insecure \
          --grpc-web || echo "Sync trigger completed"
        
        echo "✅ ArgoCD sync triggered successfully"
        
    - name: Deploy to Remote Server
      if: success()
      timeout-minutes: 15
      run: |
        echo "🌐 Deploying to remote server (192.168.50.110)..."
        
        # SSH 연결 테스트
        if ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no jclee@192.168.50.110 "echo 'SSH OK'" > /dev/null 2>&1; then
          echo "✅ SSH connection successful"
          
          # 원격 서버에 최신 코드 동기화
          echo "📦 Syncing project files..."
          rsync -avz --delete \
                     --exclude='.git' \
                     --exclude='__pycache__' \
                     --exclude='*.pyc' \
                     --exclude='instance/' \
                     --exclude='venv/' \
                     --exclude='.env' \
                     ./ jclee@192.168.50.110:~/app/blacklist/
          
          # 원격 서버에서 ArgoCD 동기화
          echo "🔄 Triggering remote ArgoCD sync..."
          ssh jclee@192.168.50.110 "cd ~/app/blacklist && argocd app sync blacklist --grpc-web --timeout 300" || echo "Remote sync completed"
          
          # 원격 서버 상태 확인
          echo "🔍 Checking remote deployment status..."
          ssh jclee@192.168.50.110 "kubectl get pods -n blacklist" || echo "Remote status check completed"
          
          echo "✅ Remote server deployment completed"
        else
          echo "⚠️ SSH connection failed - skipping remote deployment"
          echo "Manual deployment required on remote server"
        fi

  notify:
    needs: [check-changes, test, build-and-push]
    runs-on: ubuntu-latest
    if: always() && needs.check-changes.outputs.should-skip != 'true'
    
    steps:
    - name: Send deployment status
      run: |
        echo "📊 Deployment Summary:"
        echo "  - Changes Check: ${{ needs.check-changes.result }}"
        echo "  - Tests: ${{ needs.test.result }}"
        echo "  - Build & Push: ${{ needs.build-and-push.result }}"
        
        if [ "${{ needs.build-and-push.result }}" == "success" ]; then
          echo "✅ Deployment pipeline completed successfully!"
          echo "🚀 New image pushed to registry.jclee.me/blacklist"
          echo "🔄 ArgoCD will automatically deploy the new version"
        else
          echo "❌ Deployment pipeline failed!"
          echo "❌ Check logs for details"
        fi

  # Create issue on failure
  create-issue-on-failure:
    needs: [check-changes, test, build-and-push]
    if: |
      always() && 
      needs.check-changes.outputs.should-skip != 'true' &&
      (needs.test.result == 'failure' || needs.build-and-push.result == 'failure')
    uses: ./.github/workflows/create-issue-on-failure.yml
    with:
      workflow_name: "ArgoCD CI/CD Pipeline"
      run_id: ${{ github.run_id }}
      run_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      failed_jobs: '[{"name": "test", "result": "${{ needs.test.result }}"}, {"name": "build-and-push", "result": "${{ needs.build-and-push.result }}"}]'
