name: ArgoCD CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist
  ARGOCD_SERVER: argo.jclee.me
  ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}

jobs:
  test:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        pytest -v --cov=src tests/
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build-and-push:
    needs: test
    runs-on: self-hosted
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Private Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{date 'YYYYMMDD-HHmmss'}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./deployment/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
    
    - name: Trigger ArgoCD Sync
      if: success()
      run: |
        # Install ArgoCD CLI if not present
        if ! command -v argocd &> /dev/null; then
          curl -sSL -o /tmp/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /tmp/argocd
          sudo mv /tmp/argocd /usr/local/bin/argocd
        fi
        
        # Sync ArgoCD application
        argocd app sync blacklist \
          --server ${{ env.ARGOCD_SERVER }} \
          --auth-token ${{ env.ARGOCD_AUTH_TOKEN }} \
          --insecure
        
        # Wait for sync to complete
        argocd app wait blacklist \
          --server ${{ env.ARGOCD_SERVER }} \
          --auth-token ${{ env.ARGOCD_AUTH_TOKEN }} \
          --insecure \
          --sync \
          --health \
          --timeout 300

  notify:
    needs: [test, build-and-push]
    runs-on: self-hosted
    if: always()
    
    steps:
    - name: Send deployment status
      run: |
        if [ "${{ needs.build-and-push.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
          # Add webhook notification here if needed
        else
          echo "❌ Deployment failed!"
          # Add webhook notification here if needed
        fi