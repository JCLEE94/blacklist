name: Build and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist
  DEPLOY_HOST: registry.jclee.me
  DEPLOY_PORT: 1112
  DEPLOY_USER: docker
  APP_PORT: 2541

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests
        env:
          FLASK_ENV: testing
          REGTECH_USERNAME: test_user
          REGTECH_PASSWORD: test_pass
          SECUDIUM_USERNAME: test_user
          SECUDIUM_PASSWORD: test_pass
        run: |
          echo "üß™ Testing configuration validation..."
          python -c "
          from src.config.factory import get_config
          try:
              config = get_config('production')
              print('‚úÖ Production config validation passed')
          except Exception as e:
              print(f'‚ùå Config validation failed: {e}')
              exit(1)
          "
          
          echo "üöÄ Testing application startup..."
          python -c "
          from src.core.app_compact import create_compact_app
          try:
              app = create_compact_app()
              print('‚úÖ App creation test passed')
          except Exception as e:
              print(f'‚ùå App creation failed: {e}')
              exit(1)
          "
          
          echo "‚úÖ All tests passed"

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Login to Private Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          
      - name: Build and Push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            BUILD_TIME=${{ steps.time.outputs.time }}
            
      - name: Build and Push to Private Registry
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            BUILD_TIME=${{ steps.time.outputs.time }}
      
      - name: Get build time
        id: time
        run: echo "time=$(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S KST')" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        
      - name: Deploy to Production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ env.DEPLOY_PORT }}
          script: |
            cd ~/app/blacklist
            
            echo "üõë Stopping existing containers..."
            docker-compose down -v --remove-orphans || true
            
            echo "üì• Pulling latest images..."
            docker-compose pull
            
            echo "üöÄ Starting new deployment..."
            docker-compose up -d
            
            echo "‚è≥ Waiting for application to start..."
            sleep 30
            
            echo "üè• Health check..."
            curl -f http://localhost:${{ env.APP_PORT }}/health || exit 1
            
            echo "‚úÖ Deployment completed successfully!"

  verify:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Verify Deployment
        run: |
          echo "üîç Verifying deployment..."
          
          for i in {1..5}; do
            echo "Attempt $i/5..."
            if curl -f http://${{ env.DEPLOY_HOST }}:${{ env.APP_PORT }}/health; then
              echo "‚úÖ Deployment verified!"
              exit 0
            fi
            sleep 10
          done
          
          echo "‚ùå Deployment verification failed!"
          exit 1

  notify:
    needs: [build, deploy, verify]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Status
        run: |
          if [ "${{ needs.verify.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üåê Application URL: http://${{ env.DEPLOY_HOST }}:${{ env.APP_PORT }}"
          else
            echo "‚ùå Deployment failed!"
          fi