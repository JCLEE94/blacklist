name: Build and Deploy

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist

jobs:
  # 빠른 체크들을 병렬로 실행
  quality-checks:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      
      - name: Python Syntax Check
        run: |
          echo "🔍 Running Python syntax checks..."
          python3 -m py_compile src/core/har_based_regtech_collector.py || echo "⚠️ Syntax issues in REGTECH collector"
          python3 -m py_compile src/core/har_based_secudium_collector.py || echo "⚠️ Syntax issues in SECUDIUM collector"
          python3 -m py_compile src/core/collection_manager.py || echo "⚠️ Syntax issues in collection manager"
          echo "✅ Syntax checks completed"

      - name: Basic Security Check
        run: |
          echo "🔒 Running basic security checks..."
          # Check for hardcoded secrets
          if grep -r -E "(password|secret|key|token)\s*=\s*['\"][^'\"]*['\"]" --include="*.py" src/ 2>/dev/null; then
            echo "⚠️ Potential hardcoded secrets found!"
          else
            echo "✅ No hardcoded secrets detected"
          fi
          echo "✅ Security checks completed"

  # Docker 빌드 및 레지스트리 푸시
  build-and-push:
    needs: quality-checks
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Login to Docker Registry
        run: |
          echo "🔐 Logging into registry..."
          # Docker Hub 자격증명을 registry.jclee.me에도 사용
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login registry.jclee.me -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          echo "✅ Registry login completed"
          
      - name: Build and Push Docker Image
        run: |
          echo "🔨 Building Docker image..."
          
          # 빌드 시간과 커밋 정보
          BUILD_TIME=$(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S KST')
          
          # Docker 이미지 빌드
          docker build \
            -f deployment/Dockerfile \
            --target production \
            --build-arg BUILD_TIME="$BUILD_TIME" \
            --build-arg GIT_COMMIT="${{ github.sha }}" \
            --build-arg GIT_BRANCH="${{ github.ref_name }}" \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            .
          
          echo "📤 Pushing to registry..."
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          echo "✅ Build and push completed successfully!"

  # Watchtower 자동 배포 대기 및 검증
  verify-deployment:
    needs: build-and-push
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Trigger Watchtower Deployment
        run: |
          echo "🔔 Triggering Watchtower deployment via webhook..."
          echo "📥 New image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          
          # Watchtower 웹훅 호출
          WEBHOOK_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            https://watchtower.jclee.me/v1/update \
            -H "Authorization: Bearer MySuperSecretToken12345" \
            --connect-timeout 10 --max-time 30 2>&1 || echo "Failed")
          
          HTTP_CODE=$(echo "$WEBHOOK_RESPONSE" | tail -n1)
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Watchtower webhook successful! Deployment triggered."
            # 웹훅 성공시 짧게 대기
            sleep 30
          else
            echo "⚠️ Watchtower webhook failed (HTTP: $HTTP_CODE)"
            echo "Response: $WEBHOOK_RESPONSE"
            echo "🔄 Falling back to polling deployment..."
            # 웹훅 실패시 더 길게 대기 (폴링 방식)
            sleep 90
          fi
          
          echo "✅ Watchtower deployment initiated"

      - name: Verify Deployment
        run: |
          echo "🔍 Verifying deployment..."
          
          # 최대 10번 시도 (5분)
          MAX_ATTEMPTS=30
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "🔍 Attempt $ATTEMPT/$MAX_ATTEMPTS: Testing application health..."
            
            # Health 체크
            if curl -f -s --connect-timeout 5 --max-time 10 "https://blacklist.jclee.me/health" > /dev/null 2>&1; then
              echo "✅ Application is healthy!"
              break
            else
              echo "⏳ Application not ready yet, waiting 10 seconds..."
              sleep 10
            fi
            
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "❌ Application failed to become healthy"
              curl -v "https://blacklist.jclee.me/health" || true
              exit 1
            fi
          done

      - name: Smoke Tests
        run: |
          echo "🧪 Running smoke tests..."
          
          # 핵심 엔드포인트 테스트
          endpoints=(
            "https://blacklist.jclee.me/health"
            "https://blacklist.jclee.me/api/stats"
            "https://blacklist.jclee.me/api/collection/status"
            "https://blacklist.jclee.me/test"
          )
          
          for endpoint in "${endpoints[@]}"; do
            echo "Testing $endpoint..."
            if curl -f -s --max-time 10 "$endpoint" > /dev/null; then
              echo "✅ $endpoint: OK"
            else
              echo "❌ $endpoint: FAILED"
              # 실패해도 계속 진행 (일부 엔드포인트는 아직 문제가 있을 수 있음)
            fi
          done
          
          echo "✅ Smoke tests completed!"

  # 배포 완료 알림
  notify:
    needs: [build-and-push, verify-deployment]
    runs-on: self-hosted
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Deployment Summary
        run: |
          echo "## 배포 완료 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| 상태 | ${{ needs.verify-deployment.result == 'success' && '✅ 성공' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 이미지 | ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 커밋 | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 브랜치 | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| URL | https://blacklist.jclee.me |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.verify-deployment.result }}" != "success" ]; then
            echo "⚠️ **주의**: 배포 검증에 실패했습니다. 로그를 확인해주세요." >> $GITHUB_STEP_SUMMARY
          else
            echo "🎉 **성공**: 배포가 완료되었습니다!" >> $GITHUB_STEP_SUMMARY
          fi