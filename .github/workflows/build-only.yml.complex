name: Build Only

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist

jobs:
  build:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
          config-inline: |
            [registry."registry.jclee.me"]
              http = true
              insecure = true
        
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: qws941
          password: bingogo1l7!
        
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Deploy to production
        id: deploy
        run: |
          echo "🚀 Deploying to production..."
          ssh -o StrictHostKeyChecking=no -p 1111 docker@registry.jclee.me "
            docker pull registry.jclee.me/blacklist:latest
            docker stop blacklist-app || true
            docker rm blacklist-app || true
            docker run -d --name blacklist-app -p 2541:2541 \
              -e REGTECH_USERNAME=nextrade \
              -e REGTECH_PASSWORD=Sprtmxm1@3 \
              -e SECUDIUM_USERNAME=nextrade \
              -e SECUDIUM_PASSWORD=Sprtmxm1@3 \
              registry.jclee.me/blacklist:latest
          "
          echo "✅ Deploy completed"

      - name: Health Check
        id: health
        run: |
          echo "🔍 Checking application health..."
          sleep 10  # 애플리케이션 시작 대기
          
          # 헬스체크 시도 (최대 5번)
          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            if curl -f http://registry.jclee.me:2541/health > /tmp/health_check.log 2>&1; then
              echo "✅ Application is healthy"
              echo "healthy=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "❌ Health check failed, retrying in 10s..."
            sleep 10
          done
          
          echo "❌ Application is unhealthy after 5 attempts"
          echo "healthy=false" >> $GITHUB_OUTPUT
          
          # 컨테이너 로그 수집
          ssh -p 1111 docker@registry.jclee.me "docker logs blacklist-app --tail 100" > /tmp/container_logs.txt 2>&1 || true
          exit 1

      - name: Create Issue on Failure
        if: failure() && steps.health.outputs.healthy == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // 로그 파일 읽기
            let healthLog = '';
            let containerLog = '';
            
            try {
              healthLog = fs.readFileSync('/tmp/health_check.log', 'utf8');
            } catch (e) {
              healthLog = 'Health check log not available';
            }
            
            try {
              containerLog = fs.readFileSync('/tmp/container_logs.txt', 'utf8');
            } catch (e) {
              containerLog = 'Container logs not available';
            }
            
            const issueBody = `
            ## 🚨 Deployment Health Check Failed
            
            **Deployment Time:** ${new Date().toISOString()}
            **Commit:** ${{ github.sha }}
            **Branch:** ${{ github.ref_name }}
            **Workflow:** ${{ github.workflow }}
            
            ### Health Check Log
            \`\`\`
            ${healthLog}
            \`\`\`
            
            ### Container Logs (Last 100 lines)
            \`\`\`
            ${containerLog}
            \`\`\`
            
            ### Actions
            - [ ] Check application configuration
            - [ ] Verify database connectivity
            - [ ] Check resource usage
            - [ ] Review recent changes
            
            **Auto-generated by CI/CD**
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Deployment Failed - Health Check Error (${new Date().toISOString().split('T')[0]})`,
              body: issueBody,
              labels: ['bug', 'deployment', 'urgent']
            });

      - name: Comment on Success
        if: success() && steps.health.outputs.healthy == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 최근 실패 이슈가 있으면 해결됨 코멘트 추가
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'deployment',
              state: 'open',
              per_page: 1
            });
            
            if (issues.data.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: `✅ **Deployment Success**\n\nHealth check passed at ${new Date().toISOString()}\nCommit: ${{ github.sha }}\n\nApplication is now healthy and running normally.`
              });
              
              // 이슈 닫기
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                state: 'closed'
              });
            }

