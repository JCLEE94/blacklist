name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8

    - name: Code formatting check
      run: |
        black --check src/ tests/
        flake8 src/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Run tests
      run: |
        pytest -v --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: github.event_name == 'push'
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      run: |
        echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login registry.jclee.me -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Kubernetes manifests
      run: |
        # Update image tag in kustomization.yaml
        sed -i "s|newTag:.*|newTag: sha-${GITHUB_SHA::7}|" k8s/overlays/production/kustomization.yaml
        
        # Update image in deployment if needed
        if [ -f k8s/base/deployment.yaml ]; then
          sed -i "s|image: .*blacklist.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${GITHUB_SHA::7}|" k8s/base/deployment.yaml
        fi

    - name: Commit and push changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        if git diff --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        git add k8s/
        git commit -m "chore: update image to sha-${GITHUB_SHA::7} [skip ci]"
        git push

    - name: Trigger ArgoCD sync
      run: |
        curl -X POST "http://192.168.50.110:31017/api/v1/applications/blacklist/sync" \
          -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "revision": "main",
            "prune": true,
            "dryRun": false,
            "strategy": {
              "hook": {
                "force": true
              }
            }
          }' || echo "ArgoCD sync trigger failed, but deployment will happen automatically"

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Deployment notification
      run: |
        STATUS="${{ needs.deploy.result }}"
        if [ "$STATUS" = "success" ]; then
          echo "‚úÖ Deployment completed successfully"
          echo "üåê Application: http://blacklist.jclee.me"
          echo "üìä ArgoCD: http://argo.jclee.me"
        else
          echo "‚ùå Deployment failed with status: $STATUS"
        fi