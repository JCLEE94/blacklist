name: CI/CD Pipeline - Charts GitOps

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '*.txt'
      - 'LICENSE'
      - '.gitignore'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# 동시 실행 제어
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist
  PYTHON_VERSION: '3.11'
  CHARTS_REPO: ${{ vars.CHARTS_REPO || 'https://github.com/jclee/charts.git' }}
  CHARTS_PATH: charts/blacklist

jobs:
  # 1. 코드 품질 검사
  quality-check:
    name: Quality Check
    runs-on: self-hosted
    outputs:
      quality-passed: ${{ steps.result.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy bandit safety

      - name: Run Linting
        continue-on-error: true
        run: |
          echo "🔍 코드 품질 검사 실행..."
          flake8 src/ --max-line-length=88 --extend-ignore=E203,W503 --exit-zero
          black --check src/ --diff || echo "⚠️ Black formatting issues found"
          isort src/ --check-only --diff || echo "⚠️ Import sorting issues found"
          mypy src/ --ignore-missing-imports --no-error-summary || echo "⚠️ Type checking issues found"

      - name: Run Security Scan
        continue-on-error: true
        run: |
          echo "🔒 보안 스캔 실행..."
          bandit -r src/ -ll || echo "⚠️ Security issues found"
          safety check || echo "⚠️ Dependency vulnerabilities found"

      - name: Set Result
        id: result
        run: echo "passed=true" >> $GITHUB_OUTPUT

  # 2. 테스트 실행
  test:
    name: Run Tests
    runs-on: self-hosted
    needs: quality-check
    outputs:
      test-passed: ${{ steps.result.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock

      - name: Run Unit Tests
        continue-on-error: true
        run: |
          echo "🧪 단위 테스트 실행..."
          pytest tests/ -v --cov=src --cov-report=term-missing || echo "⚠️ Some tests failed"

      - name: Run Integration Tests
        continue-on-error: true
        run: |
          echo "🔗 통합 테스트 실행..."
          python -m pytest tests/integration/ -v || echo "⚠️ Integration tests failed"

      - name: Set Result
        id: result
        run: echo "passed=true" >> $GITHUB_OUTPUT

  # 3. Docker 이미지 빌드 및 푸시
  build-image:
    name: Build & Push Docker Image
    runs-on: self-hosted
    needs: [quality-check, test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      short-sha: ${{ steps.vars.outputs.short-sha }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Variables
        id: vars
        run: |
          echo "short-sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
          echo "timestamp=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host
          config-inline: |
            [registry."registry.jclee.me"]
              http = true
              insecure = true

      - name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME || 'admin' }}
          password: ${{ secrets.REGISTRY_PASSWORD || 'bingogo1' }}

      - name: Generate Metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-,format=short
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.vars.outputs.timestamp }}

      - name: Build and Push Image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployment/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}
            VERSION=${{ steps.vars.outputs.short-sha }}

      - name: Image Security Scan
        continue-on-error: true
        run: |
          echo "🔍 이미지 보안 스캔..."
          # Trivy나 다른 이미지 스캔 도구를 여기에 추가할 수 있습니다
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.short-sha }}"

  # 4. Helm 차트 업데이트 (charts.jclee.me 리포지토리)
  update-helm-chart:
    name: Update Helm Chart
    runs-on: self-hosted
    needs: build-image
    if: |
      github.ref == 'refs/heads/main' && 
      needs.build-image.result == 'success'
    outputs:
      chart-version: ${{ steps.update.outputs.chart-version }}
      pr-url: ${{ steps.update.outputs.pr-url }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Clone Charts Repository
        run: |
          echo "📦 Charts 리포지토리 클론..."
          git clone ${{ env.CHARTS_REPO }} charts-repo
          cd charts-repo

      - name: Update Chart Values
        id: update
        run: |
          cd charts-repo
          
          # 차트 버전 생성
          CHART_VERSION="1.0.$(date +%Y%m%d%H%M%S)"
          IMAGE_TAG="sha-${{ needs.build-image.outputs.short-sha }}"
          
          echo "chart-version=$CHART_VERSION" >> $GITHUB_OUTPUT
          
          # values.yaml 업데이트
          if [ -f "${{ env.CHARTS_PATH }}/values.yaml" ]; then
            echo "📝 values.yaml 업데이트..."
            
            # 이미지 태그 업데이트
            sed -i "s|tag:.*|tag: \"$IMAGE_TAG\"|g" ${{ env.CHARTS_PATH }}/values.yaml
            
            # Chart.yaml 업데이트
            sed -i "s|version:.*|version: $CHART_VERSION|g" ${{ env.CHARTS_PATH }}/Chart.yaml
            sed -i "s|appVersion:.*|appVersion: \"$IMAGE_TAG\"|g" ${{ env.CHARTS_PATH }}/Chart.yaml
            
            echo "✅ 차트 업데이트 완료"
            echo "  - Chart Version: $CHART_VERSION"
            echo "  - Image Tag: $IMAGE_TAG"
          else
            echo "❌ values.yaml not found at ${{ env.CHARTS_PATH }}/values.yaml"
            exit 1
          fi

      - name: Create Pull Request
        id: pr
        run: |
          cd charts-repo
          
          # 브랜치 생성
          BRANCH_NAME="update-blacklist-$(date +%Y%m%d%H%M%S)"
          git checkout -b $BRANCH_NAME
          
          # 변경사항 커밋
          git add .
          git commit -m "chore: update blacklist chart to ${{ steps.update.outputs.chart-version }}
          
          - Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ needs.build-image.outputs.short-sha }}
          - Commit: ${{ github.sha }}
          - Triggered by: ${{ github.actor }}"
          
          # 푸시 (GitHub 토큰 사용)
          git remote set-url origin https://x-access-token:${{ secrets.CHARTS_REPO_TOKEN }}@github.com/jclee/charts.git
          git push origin $BRANCH_NAME
          
          # PR 생성
          PR_BODY="## Blacklist Chart Update
          
          **Image Details:**
          - Registry: ${{ env.REGISTRY }}
          - Image: ${{ env.IMAGE_NAME }}:sha-${{ needs.build-image.outputs.short-sha }}
          - Chart Version: ${{ steps.update.outputs.chart-version }}
          
          **Source Changes:**
          - Repository: ${{ github.repository }}
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          - Author: ${{ github.actor }}
          
          **Build Info:**
          - Workflow: ${{ github.workflow }}
          - Run ID: ${{ github.run_id }}
          - Build Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          This PR was automatically created by the CI/CD pipeline."
          
          # GitHub CLI로 PR 생성
          PR_URL=$(gh pr create \
            --title "chore: update blacklist chart to ${{ steps.update.outputs.chart-version }}" \
            --body "$PR_BODY" \
            --head $BRANCH_NAME \
            --base main \
            --repo jclee/charts || echo "")
          
          echo "pr-url=$PR_URL" >> $GITHUB_OUTPUT
          
          if [ -n "$PR_URL" ]; then
            echo "✅ PR 생성 완료: $PR_URL"
          else
            echo "⚠️ PR 생성 실패, 수동으로 확인 필요"
          fi
        env:
          GH_TOKEN: ${{ secrets.CHARTS_REPO_TOKEN }}

  # 5. ArgoCD 동기화 알림
  notify-argocd:
    name: Notify ArgoCD
    runs-on: self-hosted
    needs: [build-image, update-helm-chart]
    if: |
      always() &&
      github.ref == 'refs/heads/main' &&
      needs.build-image.result == 'success'
    steps:
      - name: Trigger ArgoCD Sync
        continue-on-error: true
        run: |
          echo "🔄 ArgoCD 동기화 알림..."
          
          # ArgoCD API 호출 (토큰이 있는 경우)
          if [ -n "${{ secrets.ARGOCD_TOKEN }}" ]; then
            echo "📡 ArgoCD API 호출..."
            
            curl -k -X POST \
              -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"prune": true, "dryRun": false}' \
              "${{ vars.ARGOCD_URL || 'https://argo.jclee.me' }}/api/v1/applications/blacklist/sync" || echo "⚠️ ArgoCD API 호출 실패"
          else
            echo "⚠️ ARGOCD_TOKEN이 설정되지 않음"
          fi

      - name: Webhook Notification
        continue-on-error: true
        run: |
          # 웹훅 알림 (선택사항)
          if [ -n "${{ secrets.DEPLOYMENT_WEBHOOK_URL }}" ]; then
            echo "📢 배포 웹훅 알림..."
            
            curl -X POST \
              -H "Content-Type: application/json" \
              -d '{
                "text": "🚀 Blacklist 배포 준비 완료",
                "attachments": [{
                  "color": "good",
                  "fields": [
                    {"title": "이미지", "value": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ needs.build-image.outputs.short-sha }}", "short": true},
                    {"title": "차트 버전", "value": "${{ needs.update-helm-chart.outputs.chart-version }}", "short": true},
                    {"title": "커밋", "value": "${{ github.sha }}", "short": true},
                    {"title": "작성자", "value": "${{ github.actor }}", "short": true}
                  ]
                }]
              }' \
              "${{ secrets.DEPLOYMENT_WEBHOOK_URL }}" || echo "⚠️ 웹훅 알림 실패"
          fi

  # 6. 배포 결과 요약
  deployment-summary:
    name: Deployment Summary
    runs-on: self-hosted
    needs: [build-image, update-helm-chart, notify-argocd]
    if: always()
    steps:
      - name: Print Summary
        run: |
          echo "🎯 CI/CD 파이프라인 완료"
          echo "========================"
          echo ""
          echo "📦 **Docker 이미지**"
          echo "  - Registry: ${{ env.REGISTRY }}"
          echo "  - Image: ${{ env.IMAGE_NAME }}:sha-${{ needs.build-image.outputs.short-sha }}"
          echo ""
          echo "📊 **Helm 차트**"
          echo "  - Repository: charts.jclee.me"
          echo "  - Chart Version: ${{ needs.update-helm-chart.outputs.chart-version || 'N/A' }}"
          echo "  - PR URL: ${{ needs.update-helm-chart.outputs.pr-url || 'N/A' }}"
          echo ""
          echo "🔗 **배포 링크**"
          echo "  - ArgoCD: ${{ vars.ARGOCD_URL || 'https://argo.jclee.me' }}"
          echo "  - Service: ${{ vars.SERVICE_URL || 'https://blacklist.jclee.me' }}"
          echo "  - Health: ${{ vars.SERVICE_URL || 'https://blacklist.jclee.me' }}/health"
          echo ""
          echo "📝 **커밋 정보**"
          echo "  - SHA: ${{ github.sha }}"
          echo "  - Author: ${{ github.actor }}"
          echo "  - Branch: ${{ github.ref_name }}"
          echo "  - Message: ${{ github.event.head_commit.message }}"
          echo ""
          echo "✅ Charts 리포지토리 PR이 생성되었습니다."
          echo "   ArgoCD가 자동으로 변경사항을 감지하고 배포합니다."
          
          # 상태 검사
          echo ""
          echo "📋 **실행 결과**"
          echo "  - 이미지 빌드: ${{ needs.build-image.result }}"
          echo "  - 차트 업데이트: ${{ needs.update-helm-chart.result }}"
          echo "  - ArgoCD 알림: ${{ needs.notify-argocd.result }}"