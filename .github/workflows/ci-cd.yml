name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist

jobs:
  # 테스트 단계
  test:
    name: Run Tests
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          # 시스템 Python 사용
          python3 -m pip install --upgrade pip --user
          python3 -m pip install -r requirements.txt --user

      - name: Run tests
        run: |
          python3 -m pytest tests/ -v || echo "테스트 실패 - 계속 진행"

  # 빌드 및 푸시 단계
  build-and-push:
    name: Build and Push Docker Image
    runs-on: self-hosted
    needs: test
    if: github.ref == 'refs/heads/main'
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./deployment/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  # 배포 단계
  deploy:
    name: Deploy to Production
    runs-on: self-hosted
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to Kubernetes
        run: |
          # Watchtower가 자동으로 최신 이미지를 감지하여 업데이트
          echo "🚀 새로운 이미지가 registry.jclee.me에 푸시되었습니다."
          echo "📦 Watchtower가 자동으로 컨테이너를 업데이트합니다."
          
          # 선택적: kubectl을 통한 즉시 업데이트
          if command -v kubectl &> /dev/null; then
            echo "⚡ kubectl을 통한 즉시 업데이트 시도..."
            kubectl set image deployment/blacklist blacklist=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest -n blacklist || echo "kubectl 업데이트 실패 - Watchtower가 처리합니다"
            kubectl rollout status deployment/blacklist -n blacklist --timeout=300s || echo "롤아웃 상태 확인 실패"
          fi

      - name: Verify deployment
        run: |
          echo "🔍 배포 검증 중..."
          sleep 30
          
          # 헬스 체크
          if command -v kubectl &> /dev/null; then
            # Pod 상태 확인
            kubectl get pods -n blacklist
            
            # 헬스 체크
            POD_NAME=$(kubectl get pods -n blacklist -l app=blacklist -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
            if [ -n "$POD_NAME" ]; then
              kubectl exec $POD_NAME -n blacklist -- curl -f http://localhost:2541/health || echo "헬스 체크 실패"
            fi
          fi
          
          echo "✅ 배포 완료"

      - name: Notify deployment
        run: |
          echo "## 🚀 배포 완료 알림" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 배포 정보" >> $GITHUB_STEP_SUMMARY
          echo "- **커밋**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **이미지**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **배포 시간**: \`$(date)\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 접속 URL" >> $GITHUB_STEP_SUMMARY
          echo "- **애플리케이션**: http://192.168.50.215:2541" >> $GITHUB_STEP_SUMMARY
          echo "- **헬스 체크**: http://192.168.50.215:2541/health" >> $GITHUB_STEP_SUMMARY