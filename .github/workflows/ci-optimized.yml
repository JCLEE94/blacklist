name: Optimized CI/CD Pipeline

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/ci-optimized.yml'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist
  PYTHON_VERSION: '3.10'

# Prevent multiple runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Parallel quality checks
  quality-checks:
    name: Quality Check - ${{ matrix.check }}
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        check: [lint, test, security, type-check]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'requirements*.txt'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt || true
    
    - name: Run ${{ matrix.check }}
      run: |
        case "${{ matrix.check }}" in
          lint)
            # Python linting
            pip install flake8 black isort
            # Check if commands are available
            if command -v flake8 &> /dev/null; then
              flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
            else
              echo "flake8 not found, skipping"
            fi
            if command -v black &> /dev/null; then
              black --check src/
            else
              echo "black not found, skipping"
            fi
            if command -v isort &> /dev/null; then
              isort --check-only src/
            else
              echo "isort not found, skipping"
            fi
            ;;
          test)
            # Run tests with coverage
            pip install pytest pytest-cov
            pytest tests/ -v --cov=src --cov-report=xml --cov-report=term
            ;;
          security)
            # Security scanning
            pip install bandit safety
            bandit -r src/ -f json -o bandit-report.json || true
            safety check --json > safety-report.json || true
            
            # Check for hardcoded secrets
            if grep -r -E "(password|secret|token|api_key)\s*=\s*['\"][^'\"]+['\"]" src/ --include="*.py" | grep -v "example" | grep -v "your_"; then
              echo "::error::Found hardcoded secrets in source code"
              exit 1
            fi
            ;;
          type-check)
            # Type checking
            pip install mypy types-flask types-requests
            mypy src/ --ignore-missing-imports || true
            ;;
        esac
    
    - name: Upload results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.check }}-results
        path: |
          *-report.json
          *-report.xml
          .coverage
        retention-days: 7

  # Security scanning with Trivy
  security-scan:
    name: Security Scan - Trivy
    runs-on: self-hosted
    needs: quality-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-results
        path: trivy-results.sarif

  # Build and push Docker image
  build-and-push:
    name: Build and Push Docker Image
    runs-on: self-hosted
    needs: [quality-checks, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: |
          network=host
          image=moby/buildkit:latest
    
    - name: Log in to Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{date 'YYYYMMDD-HHmmss'}}
          type=raw,value=v${{ github.run_number }}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./deployment/Dockerfile.optimized
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ github.run_number }}
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json

  # Deploy via ArgoCD
  deploy:
    name: Deploy to Kubernetes
    runs-on: self-hosted
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Trigger ArgoCD Sync
      run: |
        # ArgoCD will automatically detect new images via Image Updater
        echo "New image pushed with digest: ${{ needs.build-and-push.outputs.image-digest }}"
        echo "Image tags: ${{ needs.build-and-push.outputs.image-tags }}"
        
        # Optional: Force sync if needed
        if [[ -n "${{ secrets.ARGOCD_AUTH_TOKEN }}" ]]; then
          curl -X POST https://argo.jclee.me/api/v1/applications/blacklist/sync \
            -H "Authorization: Bearer ${{ secrets.ARGOCD_AUTH_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"revision": "main", "prune": true}' || true
        fi
    
    - name: Wait for deployment
      timeout-minutes: 10
      run: |
        if command -v argocd &> /dev/null && [[ -n "${{ secrets.ARGOCD_AUTH_TOKEN }}" ]]; then
          export ARGOCD_AUTH_TOKEN="${{ secrets.ARGOCD_AUTH_TOKEN }}"
          timeout 600 bash -c '
            until argocd app wait blacklist --health --grpc-web; do
              echo "Waiting for deployment to be healthy..."
              sleep 10
            done
          '
        else
          echo "ArgoCD CLI not available, skipping wait"
        fi
    
    - name: Smoke test
      run: |
        # Wait a bit for service to be ready
        sleep 30
        
        # Test health endpoint
        max_attempts=5
        attempt=1
        
        while [[ $attempt -le $max_attempts ]]; do
          if curl -f https://blacklist.jclee.me/health; then
            echo "Health check passed"
            break
          else
            echo "Health check failed (attempt $attempt/$max_attempts)"
            sleep 10
            ((attempt++))
          fi
        done
        
        if [[ $attempt -gt $max_attempts ]]; then
          echo "::error::Health check failed after $max_attempts attempts"
          exit 1
        fi

  # Notification
  notify:
    name: Send Notification
    runs-on: self-hosted
    needs: [quality-checks, security-scan, build-and-push, deploy]
    if: always()
    
    steps:
    - name: Check job statuses
      id: status
      run: |
        # Determine overall status
        if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
          echo "status=failure" >> $GITHUB_OUTPUT
        elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
          echo "status=cancelled" >> $GITHUB_OUTPUT
        else
          echo "status=success" >> $GITHUB_OUTPUT
        fi
    
    - name: Send Slack notification
      if: env.SLACK_WEBHOOK != ''
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        STATUS="${{ steps.status.outputs.status }}"
        COLOR="good"
        EMOJI="✅"
        
        if [[ "$STATUS" == "failure" ]]; then
          COLOR="danger"
          EMOJI="❌"
        elif [[ "$STATUS" == "cancelled" ]]; then
          COLOR="warning"
          EMOJI="⚠️"
        fi
        
        curl -X POST $SLACK_WEBHOOK \
          -H 'Content-type: application/json' \
          -d "{
            \"attachments\": [{
              \"color\": \"$COLOR\",
              \"title\": \"$EMOJI Blacklist CI/CD Pipeline - $STATUS\",
              \"fields\": [
                {
                  \"title\": \"Repository\",
                  \"value\": \"${{ github.repository }}\",
                  \"short\": true
                },
                {
                  \"title\": \"Branch\",
                  \"value\": \"${{ github.ref_name }}\",
                  \"short\": true
                },
                {
                  \"title\": \"Commit\",
                  \"value\": \"${{ github.sha }}\",
                  \"short\": true
                },
                {
                  \"title\": \"Author\",
                  \"value\": \"${{ github.actor }}\",
                  \"short\": true
                },
                {
                  \"title\": \"Workflow\",
                  \"value\": \"${{ github.workflow }}\",
                  \"short\": true
                },
                {
                  \"title\": \"Run Number\",
                  \"value\": \"${{ github.run_number }}\",
                  \"short\": true
                }
              ],
              \"footer\": \"GitHub Actions\",
              \"footer_icon\": \"https://github.githubassets.com/favicon.ico\",
              \"ts\": $(date +%s)
            }]
          }"