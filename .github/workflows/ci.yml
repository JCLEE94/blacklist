name: 🧪 CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: registry.jclee.me

jobs:
  # 코드 품질 검사
  quality:
    name: 🎨 Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 isort bandit safety
      
      - name: 🎨 Format check with Black
        run: black --check --diff .
        
      - name: 📐 Lint with flake8
        run: flake8 . --count --max-line-length=88 --statistics
        
      - name: 🔤 Sort imports with isort
        run: isort --check-only --diff .
        
      - name: 🔒 Security check with Bandit
        run: bandit -r src/ -ll
        
      - name: 🛡️ Dependency security check
        run: safety check --json

  # 테스트 실행
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: quality
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: blacklist_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist
          
      - name: 🗄️ Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/blacklist_test
        run: |
          python scripts/init_database.py --force
          
      - name: 🧪 Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/blacklist_test
          REDIS_URL: redis://localhost:6379/0
          FLASK_ENV: testing
          FORCE_DISABLE_COLLECTION: true
        run: |
          pytest -v --cov=src --cov-report=xml --cov-report=html --cov-report=term
          
      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true
          
      - name: 📝 Coverage comment
        if: github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MINIMUM_GREEN: 80
          MINIMUM_ORANGE: 60

  # Docker 빌드 테스트
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - uses: actions/checkout@v4
      
      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🏷️ Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/blacklist
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            
      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: 🔍 Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/blacklist:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📤 Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 성능 벤치마크
  performance:
    name: ⚡ Performance Check
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust pytest-benchmark
          
      - name: ⚡ Run performance tests
        run: |
          python tests/integration/performance_benchmark.py
          
      - name: 📊 Comment results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('performance-results.json', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## ⚡ Performance Results\n' + results
            })

  # 모든 체크 통과 확인
  check-gate:
    name: ✅ CI Gate
    runs-on: ubuntu-latest
    needs: [quality, test, docker]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.quality.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.docker.result }}" != "success" ]]; then
            echo "❌ CI checks failed"
            exit 1
          fi
          echo "✅ All CI checks passed"