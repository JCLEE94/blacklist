name: Stable CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

# 동일한 그룹의 이전 실행 취소
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 기본 설정
defaults:
  run:
    shell: bash

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist
  PYTHON_VERSION: '3.11'

jobs:
  # 빠른 실패를 위한 사전 검사
  pre-check:
    runs-on: self-hosted
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      
      - name: Check for skip conditions
        id: skip_check
        run: |
          # Skip if only docs changed
          if git diff --name-only HEAD^ HEAD | grep -vE '\.(md|txt|rst)$' | grep -q .; then
            echo "should_skip=false" >> $GITHUB_OUTPUT
          else
            echo "should_skip=true" >> $GITHUB_OUTPUT
            echo "📝 Only documentation changed, skipping builds"
          fi

  # 병렬 코드 품질 검사
  code-quality:
    needs: pre-check
    if: needs.pre-check.outputs.should_skip != 'true' && github.event.inputs.skip_tests != 'true'
    runs-on: self-hosted
    strategy:
      matrix:
        task: [lint, security]
      max-parallel: 2
      fail-fast: false  # 하나 실패해도 다른 작업 계속
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ matrix.task }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip wheel setuptools
          pip install -r requirements.txt
          
          # Task-specific dependencies
          case "${{ matrix.task }}" in
            lint)
              pip install flake8 black mypy
              ;;
            security)
              pip install bandit safety
              ;;
          esac
      
      - name: Run ${{ matrix.task }}
        id: run_task
        continue-on-error: true
        run: |
          echo "🚀 Running ${{ matrix.task }} in parallel..."
          case "${{ matrix.task }}" in
            lint)
              echo "📝 Running linting checks..."
              flake8 src/ --config=.flake8 --exit-zero
              black --check src/ --diff
              mypy src/ --ignore-missing-imports || true
              ;;
            security)
              echo "🔒 Running security scan..."
              bandit -r src/ -f json -o bandit-report.json || true
              safety check --json || true
              ;;
          esac
          echo "✅ ${{ matrix.task }} completed"
      
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.task }}-report
          path: |
            *-report.json
            *.log
          retention-days: 7

  # 병렬 테스트
  test:
    needs: [pre-check, code-quality]
    if: |
      always() && 
      needs.pre-check.outputs.should_skip != 'true' && 
      github.event.inputs.skip_tests != 'true' &&
      !contains(needs.*.result, 'failure')
    runs-on: self-hosted
    strategy:
      matrix:
        test-type: [unit, integration]
      max-parallel: 2
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Cache test dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            .pytest_cache
          key: ${{ runner.os }}-test-${{ hashFiles('**/requirements.txt') }}-${{ matrix.test-type }}
          restore-keys: |
            ${{ runner.os }}-test-
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip wheel setuptools
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist pytest-timeout
      
      - name: Run ${{ matrix.test-type }} tests
        id: run_tests
        timeout-minutes: 10
        run: |
          echo "🧪 Running ${{ matrix.test-type }} tests in parallel..."
          case "${{ matrix.test-type }}" in
            unit)
              pytest tests/ -m "not integration and not slow" \
                --ignore=tests/integration/ \
                -x --tb=short \
                --cov=src --cov-report=xml \
                -n auto --timeout=30 || echo "Unit tests completed with issues"
              ;;
            integration)
              pytest tests/integration/ \
                -x --tb=short --maxfail=3 \
                -n auto --timeout=60 || echo "Integration tests completed with issues"
              ;;
          esac
          echo "✅ ${{ matrix.test-type }} tests completed"
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.test-type }}-test-results
          path: |
            coverage.xml
            .coverage
            test-results/
          retention-days: 7

  # Docker 빌드
  build:
    needs: [pre-check, test]
    if: |
      always() && 
      needs.pre-check.outputs.should_skip != 'true' &&
      !contains(needs.*.result, 'failure')
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.version }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Free disk space
        run: |
          # Clean up Docker
          docker system prune -af --volumes || true
          
          # Remove old images
          docker images | grep -E "(weeks|months) ago" | awk '{print $3}' | xargs -r docker rmi || true
      
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:latest
          config-inline: |
            [registry."registry.jclee.me"]
              http = true
              insecure = true
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDDHHmmss' tz='Asia/Seoul'}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v4
        timeout-minutes: 20
        with:
          context: .
          file: deployment/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}
          provenance: false
          sbom: false
          builder: ${{ steps.buildx.outputs.name }}
          network: host

  # Kubernetes 배포
  deploy:
    needs: build
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' &&
      needs.build.result == 'success'
    runs-on: self-hosted
    continue-on-error: true  # 배포 실패 시에도 워크플로우 완료
    environment:
      name: production
      url: https://blacklist.jclee.me
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
      
      - name: Install required tools
        run: |
          # Skip if already installed
          command -v kubectl >/dev/null || {
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          }
          
          command -v argocd >/dev/null || {
            curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
            rm argocd-linux-amd64
          }
      
      - name: Configure kubectl
        run: |
          # GitHub Actions에서 실행 중인 경우
          if [ -n "${{ secrets.KUBE_CONFIG }}" ]; then
            mkdir -p $HOME/.kube
            echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
            chmod 600 $HOME/.kube/config
          else
            # Self-hosted runner에서 기존 kubeconfig 사용
            echo "Using existing kubeconfig on self-hosted runner"
            # 기본 kubeconfig가 없으면 로컬 k3s 설정
            if [ ! -s "$HOME/.kube/config" ]; then
              if [ -f "/etc/rancher/k3s/k3s.yaml" ]; then
                mkdir -p $HOME/.kube
                sudo cp /etc/rancher/k3s/k3s.yaml $HOME/.kube/config
                sudo chown $(id -u):$(id -g) $HOME/.kube/config
                chmod 600 $HOME/.kube/config
                sed -i 's/127.0.0.1/localhost/g' $HOME/.kube/config
              fi
            fi
          fi
          
          # Test connection
          kubectl cluster-info || echo "Warning: kubectl connection failed, deployment may fail"
      
      - name: Deploy with ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER || 'argo.jclee.me' }}
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |
          # ArgoCD 설정 확인
          if [ -z "$ARGOCD_AUTH_TOKEN" ]; then
            echo "⚠️ ARGOCD_AUTH_TOKEN not set, trying local auth..."
            # Self-hosted runner에서 로컬 인증 시도
            if command -v argocd &> /dev/null; then
              argocd login $ARGOCD_SERVER --grpc-web --skip-test || echo "ArgoCD login failed"
            fi
          fi
          
          # ArgoCD sync with retry
          for i in {1..3}; do
            if [ -n "$ARGOCD_AUTH_TOKEN" ]; then
              argocd app sync blacklist \
                --server $ARGOCD_SERVER \
                --auth-token $ARGOCD_AUTH_TOKEN \
                --grpc-web \
                --async && break
            else
              argocd app sync blacklist \
                --grpc-web \
                --async && break
            fi || {
              echo "Retry $i/3 failed, waiting..."
              sleep 10
            }
          done
          
          # Wait for sync with timeout
          if [ -n "$ARGOCD_AUTH_TOKEN" ]; then
            argocd app wait blacklist \
              --server $ARGOCD_SERVER \
              --auth-token $ARGOCD_AUTH_TOKEN \
              --grpc-web \
              --timeout 300 \
              --health || echo "ArgoCD sync completed with warnings"
          else
            argocd app wait blacklist \
              --grpc-web \
              --timeout 300 \
              --health || echo "ArgoCD sync completed with warnings"
          fi
      
      - name: Verify deployment
        run: |
          # Wait for rollout
          kubectl rollout status deployment/blacklist -n blacklist --timeout=10m || {
            echo "⚠️ Rollout timeout, checking pod status..."
            kubectl get pods -n blacklist -l app=blacklist
            kubectl describe pods -n blacklist -l app=blacklist | tail -50
          }
          
          # Health check
          for i in {1..5}; do
            kubectl run health-check-$i --rm -i --restart=Never \
              --image=curlimages/curl:latest -n blacklist -- \
              curl -f http://blacklist:2541/health && {
              echo "✅ Health check passed"
              break
            } || {
              echo "Health check attempt $i/5 failed"
              sleep 10
            }
          done
      
      - name: Deployment summary
        if: always()
        run: |
          echo "📊 Deployment Summary"
          echo "===================="
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-tag }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Time: $(date)"
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed or incomplete"
          fi