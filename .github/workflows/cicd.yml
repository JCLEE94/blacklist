name: Unified CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# 동일한 그룹의 이전 실행 취소
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 병렬 실행을 위한 설정
defaults:
  run:
    shell: bash

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist

jobs:
  # 병렬 코드 품질 검사
  code-quality:
    runs-on: self-hosted
    strategy:
      matrix:
        task: [lint, security]
      max-parallel: 2  # 병렬 실행 수 제한
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black mypy bandit safety
      
      - name: Run ${{ matrix.task }}
        run: |
          echo "🚀 Running ${{ matrix.task }} in parallel..."
          case "${{ matrix.task }}" in
            lint)
              echo "📝 Running linting checks..."
              flake8 src/ --config=.flake8 || true
              black --check src/ || true
              ;;
            security)
              echo "🔒 Running security scan..."
              bandit -r src/ -f json -o bandit-report.json || true
              safety check --json || true
              ;;
          esac
          echo "✅ ${{ matrix.task }} completed"

  # 병렬 테스트
  test:
    runs-on: self-hosted
    needs: code-quality
    strategy:
      matrix:
        test-type: [unit, integration]
      max-parallel: 2  # 병렬 실행
    continue-on-error: ${{ matrix.test-type == 'integration' }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist pytest-timeout
      
      - name: Run ${{ matrix.test-type }} tests
        run: |
          echo "🧪 Running ${{ matrix.test-type }} tests in parallel..."
          case "${{ matrix.test-type }}" in
            unit)
              pytest tests/ -m "not integration and not slow" --ignore=tests/integration/ -x --tb=short --cov=src --cov-report=xml -n auto --timeout=30
              ;;
            integration)
              pytest tests/integration/ -x --tb=short --maxfail=1 -n auto --timeout=60 || true
              ;;
          esac
          echo "✅ ${{ matrix.test-type }} tests completed"
      
      - name: Upload coverage reports
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false

  # Docker 빌드
  build:
    needs: test
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.version }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:latest
          config-inline: |
            [registry."registry.jclee.me"]
              http = true
              insecure = true
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDDHHmmss' tz='Asia/Seoul'}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v4
        continue-on-error: true
        with:
          context: .
          file: deployment/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}
          provenance: false
          sbom: false
          builder: ${{ steps.buildx.outputs.name }}
          network: host

  # Kubernetes 배포
  deploy:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: self-hosted
    environment:
      name: production
      url: https://blacklist.jclee.me
    steps:
      - uses: actions/checkout@v3
      
      - name: Install tools
        run: |
          # Install kubectl
          if ! command -v kubectl &> /dev/null; then
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          fi
          
          # Install kustomize
          if ! command -v kustomize &> /dev/null; then
            curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
            sudo mv kustomize /usr/local/bin/
          fi
          
          # Install ArgoCD CLI
          if ! command -v argocd &> /dev/null; then
            curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
            rm argocd-linux-amd64
          fi
      
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      
      - name: Deploy with ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER || 'argo.jclee.me' }}
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |
          # ArgoCD sync
          argocd app sync blacklist \
            --server $ARGOCD_SERVER \
            --auth-token $ARGOCD_AUTH_TOKEN \
            --grpc-web \
            --async || echo "ArgoCD sync initiated"
          
          # Wait for sync to complete
          argocd app wait blacklist \
            --server $ARGOCD_SERVER \
            --auth-token $ARGOCD_AUTH_TOKEN \
            --grpc-web \
            --timeout 300 \
            --health || echo "ArgoCD wait completed"
      
      - name: Verify deployment
        run: |
          # Wait for deployment
          kubectl rollout status deployment/blacklist -n blacklist --timeout=10m || true
          
          # Check pod status
          kubectl get pods -n blacklist -l app=blacklist
      
      - name: Send notification
        if: always()
        continue-on-error: true
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful"
          else
            echo "❌ Deployment failed"
          fi

  # 성능 테스트 (선택적)
  performance-test:
    needs: deploy
    if: github.ref == 'refs/heads/main' && needs.deploy.result == 'success'
    runs-on: self-hosted
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
      
      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Run performance tests
        run: |
          # Create basic k6 test if not exists
          if [ ! -f "k6-tests/performance-test.js" ]; then
            mkdir -p k6-tests
            cat > k6-tests/performance-test.js << 'EOF'
          import http from 'k6/http';
          import { check } from 'k6';
          
          export let options = {
            stages: [
              { duration: '30s', target: 10 },
              { duration: '1m', target: 10 },
              { duration: '30s', target: 0 },
            ],
          };
          
          export default function() {
            let res = http.get('https://blacklist.jclee.me/health');
            check(res, {
              'status is 200': (r) => r.status === 200,
              'response time < 500ms': (r) => r.timings.duration < 500,
            });
          }
          EOF
          fi
          
          k6 run k6-tests/performance-test.js || echo "Performance test completed"