name: Claude PR Assistant

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

permissions:
  contents: read
  pull-requests: write
  issues: write
  id-token: write

jobs:
  claude-code-action:
    # @claude 멘션이 있을 때만 실행
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && contains(github.event.issue.body, '@claude'))
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Action
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          timeout_minutes: "60"
          
          # MCP 서버 설정 (Model Context Protocol)
          mcp_servers: |
            filesystem:
              command: npx
              args: ["@modelcontextprotocol/server-filesystem", "/tmp"]
            
            memory:
              command: npx  
              args: ["@modelcontextprotocol/server-memory"]
            
            github:
              command: npx
              args: ["@modelcontextprotocol/server-github"]
              env:
                GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            
            brave-search:
              command: npx
              args: ["@modelcontextprotocol/server-brave-search"]
              env:
                BRAVE_API_KEY: ${{ secrets.BRAVE_API_KEY }}
          
          # 허용된 도구 설정
          allowed_tools:
            - read_file
            - write_file
            - edit_file
            - list_directory
            - create_repository
            - create_or_update_file
            - get_file_contents
            - create_issue
            - create_pull_request
            - search_repositories
            - web_search
          
          # 프로젝트별 컨텍스트 설정
          system_message: |
            당신은 Blacklist 위협 인텔리전스 플랫폼의 전문 개발자입니다.
            
            ## 프로젝트 개요
            - **시스템**: Enterprise threat intelligence platform 
            - **아키텍처**: GitOps 기반 배포, 멀티소스 데이터 수집, FortiGate 연동
            - **기술스택**: Flask 2.3.3 + Gunicorn, SQLite, Redis, Docker/K8s, ArgoCD
            
            ## 핵심 컴포넌트
            - **의존성 주입**: `src/core/container.py` 중앙 서비스 관리
            - **데이터 수집**: REGTECH, SECUDIUM 멀티소스 수집기
            - **GitOps 배포**: ArgoCD + GitHub Actions CI/CD
            - **캐싱**: Redis primary + memory fallback
            
            ## 개발 지침
            1. **보안 우선**: 하드코딩 금지, 환경변수 사용
            2. **성능 최적화**: orjson, 연결 풀링, 압축 활용
            3. **에러 처리**: 구조화된 예외 처리 및 로깅
            4. **테스트**: 모든 변경사항에 대한 테스트 필수
            5. **GitOps**: Git 커밋 기반 배포 자동화
            
            ## 주요 엔드포인트
            - `/api/blacklist/active`: 활성 IP 목록
            - `/api/fortigate`: FortiGate External Connector 형식
            - `/api/collection/*`: 데이터 수집 관리
            
            **항상 프로덕션 준비된 보안 코드를 제공하고, 한국어로 명확하게 설명해주세요.**
          
          # 추가 설정
          include_file_tree: true
          max_file_size: 100000
          exclude_patterns: |
            .git/
            __pycache__/
            *.pyc
            .env
            instance/
            venv/
            node_modules/
            .pytest_cache/
            *.log