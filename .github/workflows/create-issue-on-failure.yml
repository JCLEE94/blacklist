name: Create Issue on CI/CD Failure

on:
  workflow_call:
    inputs:
      workflow_name:
        required: true
        type: string
        description: 'Name of the failed workflow'
      run_id:
        required: true
        type: string
        description: 'GitHub Actions run ID'
      run_url:
        required: true
        type: string
        description: 'URL to the failed workflow run'
      failed_jobs:
        required: false
        type: string
        description: 'JSON string of failed jobs'
        default: '[]'
    # secrets는 workflow_call에서 자동으로 상속됨

jobs:
  create-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      actions: read
    steps:
    - name: Debug information
      run: |
        echo "Workflow: ${{ inputs.workflow_name }}"
        echo "Run ID: ${{ inputs.run_id }}"
        echo "Run URL: ${{ inputs.run_url }}"
        echo "Failed Jobs: ${{ inputs.failed_jobs }}"
        echo "GitHub Token available: ${{ github.token != '' }}"
    
    - name: Check for existing issues
      id: check-issues
      uses: actions/github-script@v6
      with:
        github-token: ${{ github.token }}
        script: |
          // 최근 24시간 이내에 생성된 동일한 워크플로우 관련 이슈 확인
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'ci-failure,automated',
            state: 'open',
            since: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
          });
          
          const workflowName = '${{ inputs.workflow_name }}';
          const duplicateIssue = existingIssues.data.find(issue => 
            issue.title.includes(workflowName) && 
            issue.title.includes('CI/CD Failure')
          );
          
          if (duplicateIssue) {
            console.log(`Found existing issue: #${duplicateIssue.number}`);
            core.setOutput('duplicate_found', 'true');
            core.setOutput('issue_number', duplicateIssue.number);
          } else {
            core.setOutput('duplicate_found', 'false');
          }
    
    - name: Get failed job logs
      if: steps.check-issues.outputs.duplicate_found == 'false'
      id: get-logs
      uses: actions/github-script@v6
      with:
        github-token: ${{ github.token }}
        script: |
          const runId = ${{ inputs.run_id }};
          let errorLogs = '';
          
          try {
            // Get workflow run details
            const run = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });
            
            // Get jobs for this run
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId,
              filter: 'latest'
            });
            
            // Filter failed jobs
            const failedJobs = jobs.data.jobs.filter(job => 
              job.status === 'completed' && job.conclusion === 'failure'
            );
            
            // Get logs for failed jobs
            for (const job of failedJobs) {
              errorLogs += `\n### Job: ${job.name}\n\n`;
              errorLogs += `Status: ${job.status} - ${job.conclusion}\n`;
              errorLogs += `Started: ${job.started_at}\n`;
              errorLogs += `Completed: ${job.completed_at}\n\n`;
              
              // Get failed steps
              const failedSteps = job.steps.filter(step => 
                step.conclusion === 'failure'
              );
              
              if (failedSteps.length > 0) {
                errorLogs += `#### Failed Steps:\n`;
                failedSteps.forEach(step => {
                  errorLogs += `- **${step.name}**: ${step.conclusion}\n`;
                });
              }
            }
          } catch (error) {
            console.error('Error fetching logs:', error);
            errorLogs = 'Failed to retrieve detailed logs. Please check the workflow run directly.';
          }
          
          core.setOutput('error_logs', errorLogs);
    
    - name: Create issue
      if: steps.check-issues.outputs.duplicate_found == 'false'
      uses: actions/github-script@v6
      with:
        github-token: ${{ github.token }}
        script: |
          const issueTitle = `🚨 CI/CD Failure: ${{ inputs.workflow_name }}`;
          const runUrl = '${{ inputs.run_url }}';
          const errorLogs = `${{ steps.get-logs.outputs.error_logs }}`;
          const timestamp = new Date().toISOString();
          
          const issueBody = `## CI/CD Pipeline Failure Report
          
          **Workflow:** ${{ inputs.workflow_name }}
          **Run ID:** ${{ inputs.run_id }}
          **Timestamp:** ${timestamp}
          **Status:** ❌ Failed
          
          ### 🔗 Links
          - [View Workflow Run](${runUrl})
          - [View All Runs](https://github.com/${{ github.repository }}/actions)
          
          ### 📋 Failure Summary
          ${errorLogs || 'No detailed logs available'}
          
          ### 🔍 Common Issues and Solutions
          
          1. **Lint Errors**
             - Check for undefined variables
             - Ensure all imports are correct
             - Run \`flake8\` locally to verify
          
          2. **Test Failures**
             - Review test output for specific failures
             - Check if dependencies are up to date
             - Verify test data and fixtures
          
          3. **Build Errors**
             - Check Docker build logs
             - Verify Dockerfile syntax
             - Ensure all required files are present
          
          4. **Deployment Errors**
             - Check credentials and secrets
             - Verify network connectivity
             - Review deployment configuration
          
          ### 🛠️ Action Items
          - [ ] Review the failed workflow logs
          - [ ] Identify the root cause
          - [ ] Fix the issue
          - [ ] Re-run the workflow
          - [ ] Close this issue once resolved
          
          ---
          *This issue was automatically created by the CI/CD failure detection system.*
          `;
          
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: issueBody,
            labels: ['ci-failure', 'automated', 'bug', 'high-priority'],
            assignees: []
          });
          
          console.log(`Created issue #${issue.data.number}`);
          core.setOutput('issue_number', issue.data.number);
          core.setOutput('issue_url', issue.data.html_url);
    
    - name: Update existing issue
      if: steps.check-issues.outputs.duplicate_found == 'true'
      uses: actions/github-script@v6
      with:
        github-token: ${{ github.token }}
        script: |
          const issueNumber = ${{ steps.check-issues.outputs.issue_number }};
          const runUrl = '${{ inputs.run_url }}';
          const timestamp = new Date().toISOString();
          
          const comment = `## 🔄 Additional Failure Detected
          
          **Workflow:** ${{ inputs.workflow_name }}
          **Run ID:** ${{ inputs.run_id }}
          **Timestamp:** ${timestamp}
          
          [View this workflow run](${runUrl})
          
          ---
          *This failure appears to be related to the existing issue. Please check if it's the same root cause.*`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            body: comment
          });
          
          console.log(`Updated existing issue #${issueNumber}`);
    
    - name: Send notification
      if: always()
      run: |
        if [ "${{ steps.check-issues.outputs.duplicate_found }}" == "false" ]; then
          echo "📧 New issue created: #${{ steps.create-issue.outputs.issue_number }}"
          echo "🔗 Issue URL: ${{ steps.create-issue.outputs.issue_url }}"
        else
          echo "📧 Updated existing issue: #${{ steps.check-issues.outputs.issue_number }}"
        fi