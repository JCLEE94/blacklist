name: 🔄 Automated Dependency Updates & Security Scanning

on:
  schedule:
    # Run daily at 2 AM KST (17:00 UTC)
    - cron: '0 17 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to perform'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - security-only
          - updates-only

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ================================
  # VULNERABILITY SCANNING
  # ================================
  vulnerability-scan:
    name: 🛡️ Vulnerability Scanning
    runs-on: ubuntu-latest
    outputs:
      vulnerabilities-found: ${{ steps.scan-results.outputs.vulnerabilities-found }}
      critical-count: ${{ steps.scan-results.outputs.critical-count }}
      high-count: ${{ steps.scan-results.outputs.high-count }}
      
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install Security Tools
      run: |
        pip install --upgrade pip
        pip install safety bandit semgrep pip-audit
        
    - name: 🔍 Python Dependency Security Scan (Safety)
      run: |
        echo "::group::Python 의존성 보안 스캔 (Safety)"
        safety check --json --output safety-report.json || true
        safety check --short-report || echo "취약점 발견됨"
        echo "::endgroup::"
        
    - name: 🔍 Python Dependency Audit (pip-audit)  
      run: |
        echo "::group::Python 의존성 감사 (pip-audit)"
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --format=cyclonedx-json --output=sbom.json || true
        echo "::endgroup::"
        
    - name: 🔍 Code Security Analysis (Bandit)
      run: |
        echo "::group::Python 코드 보안 분석 (Bandit)"
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ --severity-level medium || echo "보안 이슈 발견됨"
        echo "::endgroup::"
        
    - name: 🔍 Advanced Security Scan (Semgrep)
      run: |
        echo "::group::고급 보안 스캔 (Semgrep)"
        semgrep --config=auto --json --output=semgrep-report.json src/ || true
        semgrep --config=auto src/ || echo "Semgrep 이슈 발견됨"
        echo "::endgroup::"
        
    - name: 📊 Analyze Scan Results
      id: scan-results
      run: |
        echo "🔍 보안 스캔 결과 분석 중..."
        
        # Safety report analysis
        if [ -f "safety-report.json" ]; then
          safety_vulns=$(jq '.vulnerabilities | length' safety-report.json 2>/dev/null || echo "0")
          echo "Safety 취약점: $safety_vulns개"
        else
          safety_vulns=0
        fi
        
        # pip-audit report analysis  
        if [ -f "pip-audit-report.json" ]; then
          audit_vulns=$(jq '.vulnerabilities | length' pip-audit-report.json 2>/dev/null || echo "0")
          echo "pip-audit 취약점: $audit_vulns개"
        else
          audit_vulns=0
        fi
        
        # Bandit report analysis
        if [ -f "bandit-report.json" ]; then
          bandit_high=$(jq '.results[] | select(.issue_severity == "HIGH")' bandit-report.json | jq -s 'length' || echo "0")
          bandit_medium=$(jq '.results[] | select(.issue_severity == "MEDIUM")' bandit-report.json | jq -s 'length' || echo "0") 
          echo "Bandit 고위험: $bandit_high개, 중위험: $bandit_medium개"
        else
          bandit_high=0
          bandit_medium=0
        fi
        
        # Calculate totals
        total_critical=$((safety_vulns + audit_vulns + bandit_high))
        total_high=$bandit_medium
        total_vulns=$((total_critical + total_high))
        
        echo "vulnerabilities-found=$total_vulns" >> $GITHUB_OUTPUT
        echo "critical-count=$total_critical" >> $GITHUB_OUTPUT  
        echo "high-count=$total_high" >> $GITHUB_OUTPUT
        
        # Korean summary
        echo "📊 보안 스캔 완료 결과:"
        echo "  - 총 취약점: ${total_vulns}개"
        echo "  - 심각/높음: ${total_critical}개"
        echo "  - 보통: ${total_high}개"
        
    - name: 📋 Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          pip-audit-report.json
          bandit-report.json
          semgrep-report.json
          sbom.json
        retention-days: 30

  # ================================
  # DEPENDENCY UPDATE ANALYSIS
  # ================================
  dependency-analysis:
    name: 📦 Dependency Analysis & Updates
    runs-on: ubuntu-latest
    needs: vulnerability-scan
    outputs:
      updates-available: ${{ steps.check-updates.outputs.updates-available }}
      security-updates: ${{ steps.check-updates.outputs.security-updates }}
      
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install Update Tools
      run: |
        pip install --upgrade pip
        pip install pip-tools pip-check-reqs pur
        
    - name: 🔍 Check for Outdated Packages
      id: check-updates
      run: |
        echo "::group::의존성 업데이트 확인"
        
        # Create requirements analysis
        echo "📋 현재 설치된 패키지 분석..."
        pip list --format=json > current-packages.json
        
        # Check for outdated packages
        echo "🔍 업데이트 가능한 패키지 확인..."
        pip list --outdated --format=json > outdated-packages.json
        
        # Analyze outdated packages
        outdated_count=$(jq '. | length' outdated-packages.json)
        
        # Check for security updates
        security_updates=0
        if [ -f "../vulnerability-scan/safety-report.json" ]; then
          security_updates=$(jq '.vulnerabilities | length' ../vulnerability-scan/safety-report.json 2>/dev/null || echo "0")
        fi
        
        echo "updates-available=$outdated_count" >> $GITHUB_OUTPUT
        echo "security-updates=$security_updates" >> $GITHUB_OUTPUT
        
        echo "📊 의존성 분석 결과:"
        echo "  - 업데이트 가능: ${outdated_count}개"
        echo "  - 보안 업데이트 필요: ${security_updates}개"
        
        # Generate update recommendations
        if [ $outdated_count -gt 0 ]; then
          echo "📋 업데이트 권장사항:"
          jq -r '.[] | "  - \(.name): \(.version) → \(.latest_version)"' outdated-packages.json | head -10
        fi
        
        echo "::endgroup::"
        
    - name: 🔄 Generate Updated Requirements
      if: steps.check-updates.outputs.updates-available > 0
      run: |
        echo "::group::업데이트된 requirements.txt 생성"
        
        # Backup original requirements
        cp requirements.txt requirements.txt.backup
        
        # Generate updated requirements (conservative approach)
        echo "🔧 보수적 업데이트 생성 (패치 버전만)..."
        pur -r requirements.txt --patch --dry-run > requirements-patch-updates.txt
        
        echo "🔧 마이너 업데이트 생성 (마이너 버전 포함)..."
        pur -r requirements.txt --minor --dry-run > requirements-minor-updates.txt
        
        echo "🔧 메이저 업데이트 생성 (모든 업데이트)..."
        pur -r requirements.txt --dry-run > requirements-major-updates.txt
        
        # Check compatibility
        echo "🧪 업데이트된 의존성 호환성 테스트..."
        pur -r requirements.txt --patch --force
        pip install -r requirements.txt --dry-run || echo "❌ 패치 업데이트 호환성 문제"
        
        # Restore original
        cp requirements.txt.backup requirements.txt
        
        echo "::endgroup::"
        
    - name: 📋 Upload Dependency Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-reports
        path: |
          current-packages.json
          outdated-packages.json
          requirements-*-updates.txt
          requirements.txt.backup
        retention-days: 30

  # ================================
  # AUTOMATED SECURITY FIXES
  # ================================
  security-fixes:
    name: 🔧 Automated Security Fixes
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, dependency-analysis]
    if: needs.vulnerability-scan.outputs.critical-count > 0
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install Fix Tools
      run: |
        pip install --upgrade pip
        pip install safety pur pip-audit
        
    - name: 🔧 Apply Critical Security Fixes
      id: apply-fixes
      run: |
        echo "🚨 심각한 보안 취약점 자동 수정 시작..."
        
        fixes_applied=0
        
        # Download security reports
        if [ ! -f "safety-report.json" ]; then
          echo "⚠️ 보안 리포트 없음"
          exit 0
        fi
        
        # Parse vulnerabilities and apply fixes
        echo "🔍 취약점 분석 및 수정 적용..."
        
        # Apply only patch-level security fixes (conservative)
        if safety check --full-report | grep -q "vulnerability"; then
          echo "🔧 보안 패치 적용 중..."
          pur -r requirements.txt --patch --force
          fixes_applied=$((fixes_applied + 1))
          echo "✅ 보안 패치 적용 완료"
        fi
        
        echo "fixes-applied=$fixes_applied" >> $GITHUB_OUTPUT
        
        # Verify fixes
        echo "✅ 수정 사항 검증 중..."
        pip install -r requirements.txt --dry-run
        safety check --short-report || echo "⚠️ 일부 취약점이 여전히 존재합니다"
        
    - name: 📝 Create Security Fix PR
      if: steps.apply-fixes.outputs.fixes-applied > 0
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          🔒 자동 보안 수정: 심각한 취약점 패치
          
          - ${{ needs.vulnerability-scan.outputs.critical-count }}개 심각한 취약점 수정
          - 보수적 패치 레벨 업데이트만 적용
          - 자동 안전성 검증 완료
          
          🤖 AI 자동화 플랫폼 v8.3.0에 의해 생성됨
        title: "🔒 긴급 보안 수정: ${{ needs.vulnerability-scan.outputs.critical-count }}개 심각한 취약점 패치"
        body: |
          ## 🚨 자동 보안 수정 PR
          
          ### 📊 수정된 취약점 현황
          - **심각한 취약점**: ${{ needs.vulnerability-scan.outputs.critical-count }}개
          - **높은 위험도**: ${{ needs.vulnerability-scan.outputs.high-count }}개
          - **적용된 수정사항**: ${{ steps.apply-fixes.outputs.fixes-applied }}개
          
          ### 🔧 적용된 수정사항
          - 보수적 패치 레벨 업데이트 (마이너/메이저 버전 변경 없음)
          - 자동 호환성 검증 완료
          - 보안 스캔 도구를 통한 검증 완료
          
          ### ⚠️ 주의사항
          - 이 PR은 보안상 심각한 취약점만 수정합니다
          - 프로덕션 배포 전 전체 테스트 실행을 권장합니다
          - 추가 수동 검토가 필요할 수 있습니다
          
          ### 🤖 자동화 정보
          - 생성자: AI 자동화 플랫폼 v8.3.0
          - 스캔 일시: ${{ github.run_started_at }}
          - 워크플로우: 자동 의존성 및 보안 관리
          
          ---
          **🔍 상세 보안 리포트는 Actions 아티팩트에서 확인하세요.**
        branch: security-fixes/auto-${{ github.run_number }}
        delete-branch: true
        draft: false
        labels: |
          security
          automated
          critical

  # ================================
  # DEPENDENCY UPDATE PR
  # ================================
  dependency-updates-pr:
    name: 📦 Dependency Updates PR
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, dependency-analysis]
    if: needs.dependency-analysis.outputs.updates-available > 0
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🐍 Set up Python  
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install Update Tools
      run: |
        pip install --upgrade pip
        pip install pur pip-tools
        
    - name: 🔄 Apply Dependency Updates
      run: |
        echo "📦 의존성 업데이트 적용 중..."
        
        # Conservative minor version updates only
        echo "🔧 마이너 버전 업데이트 적용 (안전한 업데이트)..."
        pur -r requirements.txt --minor --force
        
        # Generate updated lockfile
        echo "🔒 업데이트된 lockfile 생성..."
        pip-compile requirements.txt --generate-hashes --output-file requirements.lock
        
        # Verify compatibility
        echo "✅ 호환성 검증 중..."
        pip install -r requirements.txt --dry-run
        
    - name: 🧪 Run Basic Tests
      run: |
        echo "🧪 기본 테스트 실행..."
        
        # Install updated dependencies
        pip install -r requirements.txt
        
        # Run basic import tests
        python -c "
        import sys
        import importlib
        
        # Test critical imports
        critical_modules = ['flask', 'sqlalchemy', 'redis', 'psutil', 'requests']
        
        for module in critical_modules:
            try:
                importlib.import_module(module)
                print(f'✅ {module} 임포트 성공')
            except ImportError as e:
                print(f'❌ {module} 임포트 실패: {e}')
                sys.exit(1)
        
        print('🎉 모든 핵심 모듈 임포트 성공!')
        "
        
    - name: 📝 Create Dependency Update PR
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          📦 의존성 자동 업데이트
          
          - ${{ needs.dependency-analysis.outputs.updates-available }}개 패키지 업데이트
          - 마이너 버전 안전 업데이트만 적용
          - 호환성 검증 및 기본 테스트 통과
          
          🤖 AI 자동화 플랫폼 v8.3.0에 의해 생성됨
        title: "📦 의존성 자동 업데이트: ${{ needs.dependency-analysis.outputs.updates-available }}개 패키지"
        body: |
          ## 📦 자동 의존성 업데이트 PR
          
          ### 📊 업데이트 현황
          - **업데이트 가능한 패키지**: ${{ needs.dependency-analysis.outputs.updates-available }}개
          - **보안 관련 업데이트**: ${{ needs.dependency-analysis.outputs.security-updates }}개
          - **업데이트 타입**: 마이너 버전 (안전한 업데이트)
          
          ### ✅ 검증 완료 사항
          - 패키지 호환성 검증 완료
          - 핵심 모듈 임포트 테스트 통과
          - 의존성 충돌 확인 완료
          
          ### 🧪 추가 테스트 권장
          - [ ] 전체 테스트 스위트 실행
          - [ ] 기능 테스트 실행
          - [ ] 성능 벤치마크 확인
          - [ ] 통합 테스트 실행
          
          ### 📋 주요 업데이트 내용
          업데이트된 패키지 목록은 변경된 `requirements.txt` 파일에서 확인하세요.
          
          ### 🤖 자동화 정보
          - 생성자: AI 자동화 플랫폼 v8.3.0
          - 업데이트 일시: ${{ github.run_started_at }}
          - 업데이트 정책: 보수적 (마이너 버전만)
          - 자동 검증: 기본 호환성 테스트 통과
          
          ---
          **💡 이 PR을 머지하기 전에 전체 CI/CD 파이프라인을 실행하는 것을 권장합니다.**
        branch: dependencies/auto-update-${{ github.run_number }}
        delete-branch: true
        draft: true
        labels: |
          dependencies
          automated
          minor-update

  # ================================
  # SECURITY SUMMARY REPORT
  # ================================
  security-summary:
    name: 📊 Security Summary Report
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, dependency-analysis, security-fixes, dependency-updates-pr]
    if: always()
    
    steps:
    - name: 📊 Generate Korean Security Report
      run: |
        echo "## 🛡️ 보안 및 의존성 관리 일일 리포트" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📅 리포트 정보" >> $GITHUB_STEP_SUMMARY
        echo "- **실행 일시**: $(date '+%Y년 %m월 %d일 %H:%M KST')" >> $GITHUB_STEP_SUMMARY
        echo "- **워크플로우**: 자동 의존성 및 보안 관리 v8.3.0" >> $GITHUB_STEP_SUMMARY
        echo "- **실행 유형**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🔍 보안 스캔 결과" >> $GITHUB_STEP_SUMMARY
        echo "- **총 취약점 발견**: ${{ needs.vulnerability-scan.outputs.vulnerabilities-found }}개" >> $GITHUB_STEP_SUMMARY
        echo "- **심각/높음 위험**: ${{ needs.vulnerability-scan.outputs.critical-count }}개" >> $GITHUB_STEP_SUMMARY
        echo "- **보통 위험**: ${{ needs.vulnerability-scan.outputs.high-count }}개" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📦 의존성 업데이트 현황" >> $GITHUB_STEP_SUMMARY
        echo "- **업데이트 가능한 패키지**: ${{ needs.dependency-analysis.outputs.updates-available }}개" >> $GITHUB_STEP_SUMMARY
        echo "- **보안 관련 업데이트**: ${{ needs.dependency-analysis.outputs.security-updates }}개" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🔧 자동 수정 조치" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.security-fixes.result }}" == "success" ]; then
          echo "- ✅ **보안 수정 PR 생성됨**: 심각한 취약점 자동 패치" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.vulnerability-scan.outputs.critical-count }}" == "0" ]; then
          echo "- ✅ **보안 수정 불필요**: 심각한 취약점 없음" >> $GITHUB_STEP_SUMMARY  
        else
          echo "- ⚠️ **보안 수정 실패**: 수동 검토 필요" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.dependency-updates-pr.result }}" == "success" ]; then
          echo "- ✅ **의존성 업데이트 PR 생성됨**: 드래프트 상태" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.dependency-analysis.outputs.updates-available }}" == "0" ]; then
          echo "- ✅ **의존성 업데이트 불필요**: 모든 패키지 최신 상태" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⚠️ **의존성 업데이트 실패**: 수동 검토 필요" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📋 권장 조치사항" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.vulnerability-scan.outputs.critical-count }}" -gt "0" ]; then
          echo "- 🚨 **즉시 조치 필요**: 심각한 보안 취약점 ${{ needs.vulnerability-scan.outputs.critical-count }}개 발견" >> $GITHUB_STEP_SUMMARY
          echo "  - 자동 생성된 보안 수정 PR 검토 및 머지" >> $GITHUB_STEP_SUMMARY
          echo "  - 프로덕션 환경 긴급 업데이트 고려" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.dependency-analysis.outputs.updates-available }}" -gt "10" ]; then
          echo "- 📦 **정기 업데이트 권장**: 업데이트 가능한 패키지가 많음" >> $GITHUB_STEP_SUMMARY
          echo "  - 자동 생성된 의존성 업데이트 PR 검토" >> $GITHUB_STEP_SUMMARY
          echo "  - 스테이징 환경에서 충분한 테스트 수행" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.vulnerability-scan.outputs.vulnerabilities-found }}" -eq "0" ] && [ "${{ needs.dependency-analysis.outputs.updates-available }}" -eq "0" ]; then
          echo "- ✅ **우수한 보안 상태**: 추가 조치 불필요" >> $GITHUB_STEP_SUMMARY
          echo "  - 현재 보안 상태 유지" >> $GITHUB_STEP_SUMMARY
          echo "  - 정기 모니터링 지속" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 관련 리소스" >> $GITHUB_STEP_SUMMARY
        echo "- [보안 리포트 다운로드](../../actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "- [의존성 분석 보고서](../../actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "- [AI 자동화 플랫폼 문서](../../../docs/automation)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "**🤖 이 리포트는 AI 자동화 플랫폼 v8.3.0에 의해 자동 생성되었습니다.**" >> $GITHUB_STEP_SUMMARY
        
        echo "🎉 일일 보안 및 의존성 관리 완료!"
        echo "📊 총 취약점: ${{ needs.vulnerability-scan.outputs.vulnerabilities-found }}개"
        echo "📦 업데이트 가능: ${{ needs.dependency-analysis.outputs.updates-available }}개"
        
    - name: 📧 Send Notification (if critical)
      if: needs.vulnerability-scan.outputs.critical-count > 0
      run: |
        echo "🚨 심각한 보안 취약점 ${{ needs.vulnerability-scan.outputs.critical-count }}개 발견!"
        echo "📧 보안팀 알림 발송 중..."
        # 여기에 실제 알림 시스템 연동 (Slack, Teams, Email 등)
        echo "✅ 알림 발송 완료"