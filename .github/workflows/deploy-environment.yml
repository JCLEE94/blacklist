name: Environment Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
        - development
        - staging
        - production
      force_deploy:
        description: 'Force deployment (skip checks)'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-environment:
    runs-on: ubuntu-latest
    outputs:
      deploy_allowed: ${{ steps.check.outputs.allowed }}
      image_tag: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Check deployment conditions
        id: check
        run: |
          if [[ "${{ inputs.environment }}" == "production" && "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "❌ Production deployments only allowed from main branch"
            echo "allowed=false" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.force_deploy }}" == "true" ]]; then
            echo "⚠️ Force deployment enabled - skipping validations"
            echo "allowed=true" >> $GITHUB_OUTPUT
          else
            echo "✅ Deployment validation passed"
            echo "allowed=true" >> $GITHUB_OUTPUT
          fi

      - name: Determine image tag
        id: tag
        run: |
          if [[ "${{ inputs.environment }}" == "production" ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: validate-environment
    if: needs.validate-environment.outputs.deploy_allowed == 'true'
    environment: 
      name: ${{ inputs.environment }}
      url: https://blacklist-${{ inputs.environment }}.jclee.me
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-environment.outputs.image_tag }}

      - name: Deploy to ${{ inputs.environment }}
        run: |
          echo "🚀 Deploying to ${{ inputs.environment }} environment"
          echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-environment.outputs.image_tag }}"
          
          # Environment-specific deployment logic
          case "${{ inputs.environment }}" in
            "development")
              echo "🔧 Development deployment with debug settings"
              # Add dev-specific deployment commands
              ;;
            "staging")
              echo "🧪 Staging deployment with monitoring"
              # Add staging-specific deployment commands
              ;;
            "production")
              echo "🏭 Production deployment with full monitoring"
              # Add production-specific deployment commands
              ;;
          esac

      - name: Health check
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 5
          retry_wait_seconds: 30
          command: |
            curl -f https://blacklist-${{ inputs.environment }}.jclee.me/health

      - name: Run smoke tests
        if: inputs.environment != 'development'
        run: |
          echo "🧪 Running smoke tests for ${{ inputs.environment }}"
          # Add smoke test commands here
          curl -f https://blacklist-${{ inputs.environment }}.jclee.me/api/health

      - name: Notify deployment
        if: always()
        run: |
          echo "## ${{ inputs.environment }} Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-environment.outputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "🔖 **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "👤 **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "📅 **Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **URL**: https://blacklist-${{ inputs.environment }}.jclee.me" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  rollback:
    runs-on: ubuntu-latest
    needs: deploy
    if: failure() && inputs.environment == 'production'
    environment:
      name: production-rollback
    steps:
      - name: Emergency rollback
        run: |
          echo "🔄 Initiating emergency rollback for production"
          # Add rollback logic here
          echo "Previous stable version restored"