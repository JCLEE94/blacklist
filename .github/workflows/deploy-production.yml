name: üöÄ Production Deployment Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: false
        type: string

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist

jobs:
  build-and-push:
    name: üì¶ Build and Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Generate version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="v1.3.$(git rev-list --count HEAD)"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "üìå Version: ${VERSION}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Build and push PostgreSQL image
        uses: docker/build-push-action@v5
        with:
          context: ./docker/postgresql
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-postgres:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-postgres:${{ steps.version.outputs.version }}

      - name: Build and push Redis image
        uses: docker/build-push-action@v5
        with:
          context: ./docker/redis
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-redis:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-redis:${{ steps.version.outputs.version }}

  security-scan:
    name: üîí Security Scanning
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-production:
    name: üåê Deploy to Production
    needs: [build-and-push, security-scan]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /home/app/blacklist
            docker-compose pull
            docker-compose down
            docker-compose up -d
            sleep 10
            docker-compose ps
            curl -f http://localhost:32542/health || exit 1

  monitoring-setup:
    name: üìä Setup Monitoring
    needs: deploy-production
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure monitoring alerts
        run: |
          echo "üîî Setting up monitoring alerts..."
          # Configure health check monitoring
          # Setup performance metrics collection
          # Enable alert notifications

      - name: Verify deployment
        run: |
          echo "‚úÖ Verifying deployment..."
          for i in {1..5}; do
            if curl -f https://blacklist.jclee.me/health; then
              echo "‚úÖ Health check passed"
              break
            fi
            echo "‚è≥ Waiting for service to be ready..."
            sleep 10
          done

  notification:
    name: üì¢ Send Notification
    needs: [deploy-production, monitoring-setup]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Send deployment notification
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            # Send success notification
          else
            echo "‚ùå Deployment failed!"
            # Send failure notification
          fi