name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
      deployment_strategy:
        description: 'Deployment strategy'
        required: true
        default: 'rolling'
        type: choice
        options:
          - rolling
          - blue-green
          - canary

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist
  ENVIRONMENT: production

jobs:
  deploy:
    runs-on: self-hosted
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          kustomize version
      
      # No authentication needed - registry is open access
      
      - name: Validate image exists
        run: |
          # Pull image to verify it exists
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}
      
      - name: Deploy with selected strategy
        run: |
          IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          STRATEGY="${{ github.event.inputs.deployment_strategy }}"
          
          case $STRATEGY in
            rolling)
              echo "Performing rolling update..."
              kubectl set image deployment/blacklist \
                blacklist=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} \
                -n blacklist --record
              kubectl rollout status deployment/blacklist -n blacklist --timeout=10m
              ;;
              
            blue-green)
              echo "Performing blue-green deployment..."
              # Deploy to inactive color
              CURRENT_COLOR=$(kubectl get service blacklist -n blacklist \
                -o jsonpath='{.spec.selector.color}' 2>/dev/null || echo "blue")
              NEW_COLOR=$([[ "$CURRENT_COLOR" == "blue" ]] && echo "green" || echo "blue")
              
              # Update deployment
              kubectl set image deployment/blacklist-${NEW_COLOR} \
                blacklist=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} \
                -n blacklist --record
              kubectl rollout status deployment/blacklist-${NEW_COLOR} -n blacklist
              
              # Switch traffic
              kubectl patch service blacklist -n blacklist \
                -p '{"spec":{"selector":{"color":"'${NEW_COLOR}'"}}}'
              ;;
              
            canary)
              echo "Performing canary deployment..."
              # Simple canary with kubectl
              kubectl set image deployment/blacklist \
                blacklist=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} \
                -n blacklist --record
              
              # Monitor for 5 minutes
              echo "Monitoring canary for 5 minutes..."
              sleep 300
              
              # Check error rate (simplified)
              ERROR_COUNT=$(kubectl logs -l app=blacklist -n blacklist --since=5m | grep -c ERROR || true)
              if [ $ERROR_COUNT -gt 10 ]; then
                echo "High error rate detected, rolling back..."
                kubectl rollout undo deployment/blacklist -n blacklist
                exit 1
              fi
              ;;
          esac
      
      - name: Post-deployment verification
        run: |
          # Health check
          kubectl run verify-health --rm -i --restart=Never \
            --image=curlimages/curl:latest -n blacklist -- \
            curl -f http://blacklist:8541/health
          
          # Get deployment info
          kubectl get deployment blacklist -n blacklist
          kubectl get pods -l app=blacklist -n blacklist
          kubectl get hpa blacklist -n blacklist || true
      
      - name: Create rollback plan
        run: |
          # Save current revision for rollback
          REVISION=$(kubectl rollout history deployment/blacklist -n blacklist | tail -2 | head -1 | awk '{print $1}')
          echo "Current revision: $REVISION"
          echo "To rollback: kubectl rollout undo deployment/blacklist -n blacklist --to-revision=$((REVISION-1))"