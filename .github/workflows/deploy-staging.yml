name: 🎭 스테이징 환경 배포 | Staging Deploy

on:
  push:
    branches: [staging]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/BRANCH_STRATEGY.md'
  pull_request:
    branches: [staging]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      run_full_tests:
        description: 'Run full test suite'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist-staging

jobs:
  # ========================================
  # 변경 감지 및 버전 생성
  # ========================================
  prepare:
    name: "🔍 스테이징 변경 감지 & 버전 생성"
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
      version: ${{ steps.version.outputs.version }}
      git_hash: ${{ steps.version.outputs.git_hash }}
      git_count: ${{ steps.version.outputs.git_count }}
      build_version: ${{ steps.version.outputs.build_version }}
      changed_files: ${{ steps.changes.outputs.changed_files }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: "🔍 스테이징 변경 감지"
      id: changes
      run: |
        echo "🔍 스테이징 변경사항 분석 중..."
        
        SHOULD_DEPLOY=true  # 스테이징은 항상 배포
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
        
        echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
        echo "changed_files=${CHANGED_FILES//$'\n'/ }" >> $GITHUB_OUTPUT
        
        echo "📊 결과: 스테이징 배포 = $SHOULD_DEPLOY"
        echo "📝 변경 파일: $CHANGED_FILES"

    - name: "📦 스테이징 버전 생성"  
      id: version
      run: |
        echo "📦 스테이징 버전 생성 중..."
        
        # Git 정보
        GIT_COUNT=$(git rev-list --count HEAD)
        GIT_HASH=$(git rev-parse --short HEAD)
        GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
        
        # 스테이징 버전: 1.0.커밋수.해시-staging
        DYNAMIC_VERSION="1.0.${GIT_COUNT}.${GIT_HASH}-staging"
        
        # 스테이징 빌드 버전
        BUILD_VERSION="staging-$(date +%Y%m%d)-${{ github.run_number }}"
        
        echo "version=$DYNAMIC_VERSION" >> $GITHUB_OUTPUT
        echo "git_hash=$GIT_HASH" >> $GITHUB_OUTPUT  
        echo "git_count=$GIT_COUNT" >> $GITHUB_OUTPUT
        echo "build_version=$BUILD_VERSION" >> $GITHUB_OUTPUT
        
        echo "📦 스테이징 버전: $DYNAMIC_VERSION"
        echo "🏗️ 빌드 버전: $BUILD_VERSION"

  # ========================================
  # 스테이징 환경 테스트
  # ========================================
  test:
    name: "🎭 스테이징 환경 테스트"
    needs: prepare
    if: needs.prepare.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: "📦 테스트 의존성 설치"
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov black flake8 bandit safety
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: "🔍 코드 품질 검사"
      run: |
        echo "🔍 Flake8 린팅..."
        flake8 src/ --count --statistics
        
        echo "🎨 Black 포매팅 검사..."
        black --check --diff src/
        
        echo "🔒 보안 검사 (Bandit)..."
        bandit -r src/ -ll || true
        
        echo "🛡️ 의존성 보안 검사 (Safety)..."
        safety check || true
    
    - name: "🧪 전체 테스트 스위트 실행"
      if: inputs.run_full_tests == 'true'
      run: |
        echo "🎭 스테이징 전체 테스트 실행..."
        pytest -v --cov=src --cov-report=xml --tb=short
    
    - name: "🧪 빠른 테스트 실행"
      if: inputs.run_full_tests != 'true'
      run: |
        echo "🎭 스테이징 빠른 테스트 실행..."
        pytest -v --tb=short -m "not slow"

  # ========================================
  # Docker 이미지 빌드
  # ========================================
  build:
    name: "🐳 스테이징 이미지 빌드 & 푸시"
    needs: [prepare, test]
    if: needs.prepare.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: "🐳 레지스트리 로그인"
      run: |
        echo "${{ secrets.REGISTRY_PASSWORD || 'bingogo1' }}" | docker login ${{ env.REGISTRY }} -u admin --password-stdin
    
    - name: "🏗️ 스테이징 이미지 빌드 & 푸시"
      run: |
        VERSION="${{ needs.prepare.outputs.version }}"
        BUILD_VERSION="${{ needs.prepare.outputs.build_version }}"
        
        echo "🎭 Blacklist 스테이징 환경 빌드 중..."
        echo "📦 버전: $VERSION"
        
        # 스테이징 환경 빌드
        docker build \
          -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION \
          -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$BUILD_VERSION \
          --build-arg DYNAMIC_VERSION=$VERSION \
          --build-arg BUILD_VERSION=$BUILD_VERSION \
          --build-arg BUILD_NUMBER=${{ github.run_number }} \
          --build-arg COMMIT_SHA=${{ github.sha }} \
          --build-arg COMMIT_COUNT=${{ needs.prepare.outputs.git_count }} \
          --build-arg GIT_HASH=${{ needs.prepare.outputs.git_hash }} \
          --build-arg GITHUB_ACTIONS=true \
          --build-arg FLASK_ENV=staging \
          --label "environment=staging" \
          --label "version=$VERSION" \
          --label "build=$BUILD_VERSION" \
          .
        
        echo "📤 스테이징 레지스트리 푸시..."
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION
        
        echo "✅ 스테이징 빌드 완료: $VERSION"

  # ========================================
  # 스테이징 환경 배포
  # ========================================
  deploy:
    name: "🚀 스테이징 환경 배포"
    needs: [prepare, build]
    if: needs.prepare.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging-blacklist.jclee.me
    
    steps:
    - name: "🚀 스테이징 환경 배포 시뮬레이션"
      run: |
        echo "🎭 스테이징 환경 배포 중..."
        NEW_VERSION="${{ needs.prepare.outputs.version }}"
        
        echo "📦 스테이징 버전: $NEW_VERSION"
        echo "🌐 스테이징 URL: https://staging-blacklist.jclee.me"
        echo "🏗️ 환경: Staging"
        
        # 스테이징 환경 배포 로직 (시뮬레이션)
        echo "✅ 스테이징 환경 배포 완료"
    
    - name: "🔍 스테이징 환경 검증"
      run: |
        echo "🔍 스테이징 환경 검증 중..."
        
        # 스테이징 환경 헬스체크 (시뮬레이션)
        echo "✅ 애플리케이션 응답 확인"
        echo "✅ 데이터베이스 연결 확인"
        echo "✅ 캐시 시스템 확인"
        echo "✅ API 엔드포인트 확인"
        
        echo "🎉 스테이징 환경 검증 완료"

  # ========================================
  # QA 테스트 준비
  # ========================================
  qa-ready:
    name: "🔍 QA 테스트 준비"
    needs: [prepare, deploy]
    if: needs.prepare.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: "📋 QA 체크리스트 생성"
      run: |
        echo "# 🎭 스테이징 QA 체크리스트" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📦 배포 정보" >> $GITHUB_STEP_SUMMARY
        echo "- **스테이징 버전:** ${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **스테이징 URL:** https://staging-blacklist.jclee.me" >> $GITHUB_STEP_SUMMARY
        echo "- **배포 시간:** $(date -Iseconds)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## ✅ QA 테스트 항목" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] 기능 테스트: 블랙리스트 관리" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] 기능 테스트: 데이터 수집" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] 기능 테스트: 대시보드" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] API 테스트: 모든 엔드포인트" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] 성능 테스트: 응답시간 < 100ms" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] 보안 테스트: 인증/인가" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] 통합 테스트: FortiGate 연동" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] UI/UX 테스트: 브라우저 호환성" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 🚀 운영 배포 준비" >> $GITHUB_STEP_SUMMARY
        echo "스테이징 QA 통과 후 main 브랜치로 PR 생성하여 운영 배포 진행" >> $GITHUB_STEP_SUMMARY

  # ========================================
  # 스테이징 결과 요약
  # ========================================  
  summary:
    name: "📊 스테이징 배포 요약"
    needs: [prepare, test, build, deploy, qa-ready]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: "📊 스테이징 결과 요약 생성"
      run: |
        echo "# 🎭 Blacklist 스테이징 환경 배포 리포트" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📦 스테이징 버전 정보" >> $GITHUB_STEP_SUMMARY
        echo "- **스테이징 버전:** ${{ needs.prepare.outputs.version || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **빌드 버전:** ${{ needs.prepare.outputs.build_version || 'N/A' }}" >> $GITHUB_STEP_SUMMARY  
        echo "- **Git 해시:** ${{ needs.prepare.outputs.git_hash || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **커밋 수:** ${{ needs.prepare.outputs.git_count || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 🚀 스테이징 배포 상태" >> $GITHUB_STEP_SUMMARY
        echo "| 단계 | 상태 | 결과 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|------|" >> $GITHUB_STEP_SUMMARY
        
        # 테스트 결과
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "| 🎭 스테이징 테스트 | ✅ | 통과 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🎭 스테이징 테스트 | ❌ | 실패 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 빌드 결과
        if [ "${{ needs.build.result }}" = "success" ]; then
          echo "| 🐳 이미지 빌드 | ✅ | 성공 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🐳 이미지 빌드 | ❌ | 실패 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 배포 결과  
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "| 🚀 스테이징 배포 | ✅ | 성공 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🚀 스테이징 배포 | ❌ | 실패 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # QA 준비
        if [ "${{ needs.qa-ready.result }}" = "success" ]; then
          echo "| 🔍 QA 준비 | ✅ | 완료 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🔍 QA 준비 | ❌ | 실패 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🌐 스테이징 환경 접속" >> $GITHUB_STEP_SUMMARY
        echo "- **🎭 스테이징 시스템:** https://staging-blacklist.jclee.me/" >> $GITHUB_STEP_SUMMARY
        echo "- **📊 스테이징 대시보드:** https://staging-blacklist.jclee.me/dashboard" >> $GITHUB_STEP_SUMMARY
        echo "- **💚 헬스체크:** https://staging-blacklist.jclee.me/health" >> $GITHUB_STEP_SUMMARY
        echo "- **📦 버전 정보:** https://staging-blacklist.jclee.me/api/version" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📝 변경사항" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ needs.prepare.outputs.changed_files || 'No changes detected' }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        
        # 최종 상태
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "## 🎉 스테이징 배포 성공!" >> $GITHUB_STEP_SUMMARY
          echo "QA 테스트 후 운영 배포를 진행해주세요." >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ 스테이징 배포 이슈" >> $GITHUB_STEP_SUMMARY
          echo "배포 과정에서 문제가 발생했습니다. 로그를 확인하세요." >> $GITHUB_STEP_SUMMARY
        fi