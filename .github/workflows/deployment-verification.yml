name: üîç Deployment Verification

on:
  push:
    branches: [ main ]
  workflow_call:
    inputs:
      target_url:
        description: 'Target URL to verify'
        required: false
        default: 'https://blacklist.jclee.me'
        type: string
      timeout:
        description: 'Verification timeout in seconds'
        required: false
        default: 300
        type: number
      wait_for_deployment:
        description: 'Wait for deployment to complete'
        required: false
        default: true
        type: boolean
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL to verify'
        required: false
        default: 'https://blacklist.jclee.me'
      timeout:
        description: 'Verification timeout in seconds'
        required: false
        default: '300'
      wait_for_deployment:
        description: 'Wait for deployment to complete'
        required: false
        default: true
        type: boolean

jobs:
  verify-deployment:
    name: üéØ Verify Deployment
    runs-on: self-hosted
    timeout-minutes: 15
    
    env:
      TARGET_URL: ${{ inputs.target_url || 'https://blacklist.jclee.me' }}
      TIMEOUT: ${{ inputs.timeout || 300 }}
      WAIT_FOR_DEPLOYMENT: ${{ inputs.wait_for_deployment || true }}
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: üì¶ Install Dependencies
        run: |
          pip install requests urllib3
          
      - name: üìä Get Expected Version
        id: version
        run: |
          if [ -f "version.txt" ]; then
            VERSION=$(cat version.txt | tr -d '\n')
            echo "expected_version=$VERSION" >> $GITHUB_OUTPUT
            echo "Expected version: $VERSION"
          else
            echo "expected_version=unknown" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Warning: version.txt not found"
          fi
          
      - name: ‚è≥ Wait for Deployment (if enabled)
        if: env.WAIT_FOR_DEPLOYMENT == 'true'
        run: |
          echo "üïê Waiting for deployment to propagate..."
          python3 scripts/deployment-verification.py \
            --url "$TARGET_URL" \
            --timeout "$TIMEOUT" \
            --wait \
            --output "deployment-wait-report.md"
        continue-on-error: false
        
      - name: üîç Verify Version Deployment
        id: version-check
        run: |
          echo "üéØ Verifying version deployment..."
          python3 scripts/deployment-verification.py \
            --url "$TARGET_URL" \
            --version-only \
            --json \
            --output "version-verification.json"
            
          # Parse JSON result for GitHub Actions
          if [ -f "version-verification.json" ]; then
            VERSION_SUCCESS=$(python3 -c "
import json
with open('version-verification.json') as f:
    data = json.load(f)
    version_check = data.get('version_check', {})
    print('true' if version_check.get('deployment_status') == 'success' else 'false')
")
            echo "version_success=$VERSION_SUCCESS" >> $GITHUB_OUTPUT
            echo "Version verification: $VERSION_SUCCESS"
          else
            echo "version_success=false" >> $GITHUB_OUTPUT
            echo "‚ùå Version verification file not found"
          fi
          
      - name: üè• Health Check Verification  
        id: health-check
        run: |
          echo "üè• Running comprehensive health checks..."
          python3 scripts/deployment-verification.py \
            --url "$TARGET_URL" \
            --health-only \
            --json \
            --output "health-verification.json"
            
          # Parse health check results
          if [ -f "health-verification.json" ]; then
            HEALTH_SUCCESS=$(python3 -c "
import json
with open('health-verification.json') as f:
    data = json.load(f)
    health_check = data.get('health_check', {})
    print('true' if health_check.get('overall_health') else 'false')
")
            HEALTH_SCORE=$(python3 -c "
import json
with open('health-verification.json') as f:
    data = json.load(f)
    health_check = data.get('health_check', {})
    summary = health_check.get('summary', {})
    print(summary.get('health_score', 0))
")
            echo "health_success=$HEALTH_SUCCESS" >> $GITHUB_OUTPUT
            echo "health_score=$HEALTH_SCORE" >> $GITHUB_OUTPUT
            echo "Health check: $HEALTH_SUCCESS (Score: $HEALTH_SCORE%)"
          else
            echo "health_success=false" >> $GITHUB_OUTPUT
            echo "health_score=0" >> $GITHUB_OUTPUT
            echo "‚ùå Health verification file not found"
          fi
          
      - name: üìà Performance Baseline Check
        id: performance
        run: |
          echo "üìà Running performance baseline check..."
          
          # Test critical endpoints response time
          HEALTH_TIME=$(curl -w "%{time_total}" -s -o /dev/null "$TARGET_URL/health" || echo "999")
          API_TIME=$(curl -w "%{time_total}" -s -o /dev/null "$TARGET_URL/api/health" || echo "999")
          BLACKLIST_TIME=$(curl -w "%{time_total}" -s -o /dev/null "$TARGET_URL/api/blacklist/active" || echo "999")
          
          echo "Response times:"
          echo "  Health: ${HEALTH_TIME}s"
          echo "  API Health: ${API_TIME}s" 
          echo "  Blacklist: ${BLACKLIST_TIME}s"
          
          # Check if performance is acceptable (< 5s for all endpoints)
          PERFORMANCE_OK=$(python3 -c "
times = [$HEALTH_TIME, $API_TIME, $BLACKLIST_TIME]
acceptable = all(float(t) < 5.0 for t in times if t != '999')
print('true' if acceptable else 'false')
")
          
          echo "performance_ok=$PERFORMANCE_OK" >> $GITHUB_OUTPUT
          echo "health_time=$HEALTH_TIME" >> $GITHUB_OUTPUT
          echo "api_time=$API_TIME" >> $GITHUB_OUTPUT
          echo "blacklist_time=$BLACKLIST_TIME" >> $GITHUB_OUTPUT
          
      - name: üìä Generate Final Report
        run: |
          echo "üìä Generating comprehensive deployment report..."
          python3 scripts/deployment-verification.py \
            --url "$TARGET_URL" \
            --output "deployment-verification-report.md"
            
          # Add GitHub Actions context
          cat >> deployment-verification-report.md << EOF
          
## ü§ñ CI/CD Integration Results

### GitHub Actions Context
- **Workflow**: \${{ github.workflow }}
- **Run ID**: \${{ github.run_id }}
- **Commit SHA**: \${{ github.sha }}
- **Actor**: \${{ github.actor }}
- **Event**: \${{ github.event_name }}

### Verification Results
- **Version Check**: ${{ steps.version-check.outputs.version_success }}
- **Health Check**: ${{ steps.health-check.outputs.health_success }} (Score: ${{ steps.health-check.outputs.health_score }}%)
- **Performance Check**: ${{ steps.performance.outputs.performance_ok }}
- **Response Times**: Health: ${{ steps.performance.outputs.health_time }}s, API: ${{ steps.performance.outputs.api_time }}s, Blacklist: ${{ steps.performance.outputs.blacklist_time }}s

### Overall Status
${{ steps.version-check.outputs.version_success == 'true' && steps.health-check.outputs.health_success == 'true' && steps.performance.outputs.performance_ok == 'true' && '‚úÖ **DEPLOYMENT VERIFIED SUCCESSFULLY**' || '‚ùå **DEPLOYMENT VERIFICATION FAILED**' }}

EOF
          
      - name: üì§ Upload Verification Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deployment-verification-reports
          path: |
            deployment-verification-report.md
            version-verification.json
            health-verification.json
            deployment-wait-report.md
          retention-days: 30
          
      - name: üí¨ Comment on PR (if PR)
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'deployment-verification-report.md';
            
            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üîç Deployment Verification Report\n\n${report}`
              });
            }
            
      - name: ‚úÖ Final Verification Status
        run: |
          VERSION_OK="${{ steps.version-check.outputs.version_success }}"
          HEALTH_OK="${{ steps.health-check.outputs.health_success }}"
          PERFORMANCE_OK="${{ steps.performance.outputs.performance_ok }}"
          
          echo "üéØ Final Verification Results:"
          echo "  Version: $VERSION_OK"
          echo "  Health: $HEALTH_OK"
          echo "  Performance: $PERFORMANCE_OK"
          
          if [[ "$VERSION_OK" == "true" && "$HEALTH_OK" == "true" && "$PERFORMANCE_OK" == "true" ]]; then
            echo "üéâ All verifications passed! Deployment is successful."
            exit 0
          else
            echo "‚ùå Some verifications failed. Deployment needs attention."
            exit 1
          fi