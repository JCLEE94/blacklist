name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist

jobs:
  # 병렬 실행을 위한 코드 품질 검사
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: [lint, security, type-check]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black mypy bandit safety
      
      - name: Run ${{ matrix.task }}
        run: |
          case "${{ matrix.task }}" in
            lint)
              echo "Running linting..."
              flake8 src/ --config=.flake8 || true
              black --check src/ || true
              ;;
            security)
              echo "Running security scan..."
              bandit -r src/ -f json -o bandit-report.json || true
              safety check --json || true
              ;;
            type-check)
              echo "Running type checking..."
              mypy src/ --ignore-missing-imports || true
              ;;
          esac
      
      - name: Upload ${{ matrix.task }} results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.task }}-results
          path: |
            *-report.json
            *.log

  # 테스트 작업 (개선된 버전)
  test:
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        test-type: [unit, integration]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Cache test dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .pytest_cache
          key: ${{ runner.os }}-test-${{ hashFiles('**/requirements.txt') }}-${{ matrix.test-type }}
          restore-keys: |
            ${{ runner.os }}-test-
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist pytest-timeout
      
      - name: Run ${{ matrix.test-type }} tests
        run: |
          case "${{ matrix.test-type }}" in
            unit)
              pytest tests/ -m "not integration and not slow" --ignore=tests/integration/ -v --cov=src --cov-report=xml --cov-report=term -n auto --timeout=60
              ;;
            integration)
              pytest tests/integration/ -v --maxfail=3 -n auto --timeout=120 || true
              ;;
          esac
      
      - name: Upload coverage reports
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false

  # Docker 이미지 빌드 (개선된 버전)
  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      image-tag: ${{ steps.meta.outputs.version }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
          config-inline: |
            [worker.oci]
              max-parallelism = 4
      
      - name: Log in to Private Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.jclee.me
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss' tz='Asia/Seoul'}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}
          provenance: true
          sbom: true
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Kubernetes 배포 (개선된 버전)
  deploy:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://blacklist.jclee.me
    steps:
      - uses: actions/checkout@v4
      
      - name: Install tools
        run: |
          # Install kustomize
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          
          # Install ArgoCD CLI
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
      
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      
      - name: Update Kustomization
        run: |
          cd k8s/overlays/production
          kustomize edit set image blacklist=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build.outputs.image-digest }}
          
          # Commit the changes for GitOps
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "chore: update image to ${{ needs.build.outputs.image-tag }}" || echo "No changes to commit"
          git push origin main || echo "No changes to push"
      
      - name: Deploy with ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |
          # ArgoCD sync
          argocd app sync blacklist \
            --server $ARGOCD_SERVER \
            --auth-token $ARGOCD_AUTH_TOKEN \
            --grpc-web \
            --async
          
          # Wait for sync to complete
          argocd app wait blacklist \
            --server $ARGOCD_SERVER \
            --auth-token $ARGOCD_AUTH_TOKEN \
            --grpc-web \
            --timeout 300 \
            --health
      
      - name: Verify deployment
        run: |
          # Wait for deployment
          kubectl rollout status deployment/blacklist -n blacklist --timeout=10m
          
          # Check pod status
          kubectl get pods -n blacklist -l app=blacklist
          
          # Run smoke test
          kubectl run smoke-test --rm -i --restart=Never \
            --image=curlimages/curl:latest -n blacklist -- \
            curl -f http://blacklist:2541/health
      
      - name: Send deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment ${{ job.status }} for ${{ github.event.head_commit.message }}
            Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-tag }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 성능 테스트 (선택적)
  performance-test:
    needs: deploy
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run k6 performance tests
        uses: grafana/k6-action@v0.3.0
        with:
          filename: k6-tests/performance-test.js
          flags: --out cloud
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: k6-results/

  # 롤백 준비
  prepare-rollback:
    needs: [build, deploy]
    if: always() && needs.deploy.result == 'failure'
    runs-on: ubuntu-latest
    steps:
      - name: Create rollback issue
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Deployment failed for ${context.sha}`,
              body: `## Deployment Failure
              
              **Commit:** ${context.sha}
              **Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-tag }}
              **Time:** ${new Date().toISOString()}
              
              ### Next Steps
              1. Check the [deployment logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              2. Run manual rollback if needed: \`gh workflow run manual-rollback.yml\`
              3. Investigate the root cause
              
              /cc @${{ github.actor }}`,
              labels: ['deployment-failure', 'urgent']
            });
            console.log(`Created issue #${issue.data.number}`);