name: GitOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist

jobs:
  # 코드 품질 검사
  quality-check:
    name: Code Quality
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      
      - name: Python Setup
        run: |
          python3 --version
          pip3 install --upgrade pip
          pip3 install flake8 black isort bandit safety
      
      - name: Code Quality Checks
        run: |
          echo "🔍 Running code quality checks..."
          flake8 src/ --max-line-length=88 --extend-ignore=E203,W503
          black --check src/
          isort src/ --check-only
          bandit -r src/ -ll

  # 테스트
  test:
    name: Run Tests
    runs-on: self-hosted
    needs: quality-check
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Dependencies
        run: |
          pip3 install -r requirements.txt
          pip3 install pytest pytest-cov
      
      - name: Run Tests
        run: |
          export PYTHONPATH="${PYTHONPATH}:$(pwd)"
          python3 -m pytest tests/ -v --tb=short

  # Docker 빌드 및 푸시
  build-push:
    name: Build and Push Docker Image
    runs-on: self-hosted
    needs: test
    if: github.event_name != 'pull_request'
    outputs:
      version: ${{ steps.version.outputs.version }}
      image: ${{ steps.image.outputs.image }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Generate Version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(date +%Y%m%d%H%M%S)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📌 Version: $VERSION"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host
          config-inline: |
            [registry."${{ env.REGISTRY }}"]
              http = true
              insecure = true
      
      - name: Registry Setup
        run: |
          # Login to registry.jclee.me
          echo "${{ secrets.DOCKER_REGISTRY_PASS }}" | docker login ${{ env.REGISTRY }} \
            --username "${{ secrets.DOCKER_REGISTRY_USER }}" \
            --password-stdin
          echo "✓ Logged in to registry: ${{ env.REGISTRY }}"
      
      - name: Build and Push
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./deployment/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:date-$(date +%Y%m%d)
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            GIT_COMMIT=${{ github.sha }}
            VERSION=${{ steps.version.outputs.version }}
      
      - name: Output Image
        id: image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "📦 Image: $IMAGE"

  # Helm 차트 패키징 및 배포
  helm-chart:
    name: Package and Push Helm Chart
    runs-on: self-hosted
    needs: build-push
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Helm
        run: |
          if ! command -v helm &> /dev/null; then
            echo "Installing Helm..."
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          fi
          helm version
      
      - name: Update Chart Version
        run: |
          VERSION="${{ needs.build-push.outputs.version }}"
          
          # Update Chart.yaml versions
          sed -i "s/^version:.*/version: $VERSION/" helm/blacklist/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"$VERSION\"/" helm/blacklist/Chart.yaml
          
          echo "📊 Updated Helm chart version to $VERSION"
      
      - name: Lint Chart
        run: |
          helm lint helm/blacklist
      
      - name: Package Chart
        run: |
          helm package helm/blacklist --destination /tmp/
          ls -la /tmp/blacklist-*.tgz
      
      - name: Push to Chart Repository
        env:
          HELM_REPO_USERNAME: ${{ secrets.HELM_REPO_USERNAME }}
          HELM_REPO_PASSWORD: ${{ secrets.HELM_REPO_PASSWORD }}
        run: |
          VERSION="${{ needs.build-push.outputs.version }}"
          CHART_PACKAGE="/tmp/blacklist-${VERSION}.tgz"
          
          # Push to ChartMuseum
          curl --data-binary "@${CHART_PACKAGE}" \
               -u "${HELM_REPO_USERNAME}:${HELM_REPO_PASSWORD}" \
               https://charts.jclee.me/api/charts
          
          echo "📦 Helm chart pushed to charts.jclee.me"

  # K8s 매니페스트 업데이트 (단일 저장소)
  update-manifests:
    name: Update K8s Manifests
    runs-on: self-hosted
    needs: build-push
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN || github.token }}
      
      - name: Update Image Tag
        run: |
          VERSION="${{ needs.build-push.outputs.version }}"
          
          # Kustomize 설치 확인
          if ! command -v kustomize &> /dev/null; then
            echo "Installing kustomize..."
            curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
            sudo mv kustomize /usr/local/bin/
          fi
          
          # Production update for tags
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "📝 Updating production to $VERSION"
            cd k8s-gitops/overlays/prod
            kustomize edit set image blacklist=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION
          # Dev update for main branch
          else
            echo "📝 Updating development to $VERSION"
            cd k8s-gitops/overlays/dev
            kustomize edit set image blacklist=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION
          fi
      
      - name: Commit and Push
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          VERSION="${{ needs.build-push.outputs.version }}"
          ENV=$([[ $GITHUB_REF == refs/tags/v* ]] && echo "prod" || echo "dev")
          
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore($ENV): update blacklist image to $VERSION

            Triggered by: ${{ github.event_name }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}"
            
            git push origin main
          fi

  # 배포 상태 알림
  notify:
    name: Deployment Notification
    runs-on: self-hosted
    needs: [build-push, update-manifests]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "## 🚀 GitOps Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📊 Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Check | ${{ needs.quality-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Push | ${{ needs.build-push.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Update Manifests | ${{ needs.update-manifests.result }} |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏷️ Deployment Info" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.build-push.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ needs.build-push.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.update-manifests.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **GitOps deployment triggered successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "ArgoCD will automatically sync the changes." >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Manual intervention may be required.**" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Send Webhook
        if: env.WEBHOOK_URL != ''
        env:
          WEBHOOK_URL: ${{ secrets.DEPLOYMENT_WEBHOOK_URL }}
        run: |
          curl -X POST $WEBHOOK_URL \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ needs.build-push.outputs.version }}",
              "image": "${{ needs.build-push.outputs.image }}",
              "status": "${{ needs.update-manifests.result }}",
              "commit": "${{ github.sha }}",
              "actor": "${{ github.actor }}"
            }' || true