name: Kubernetes Build and Deploy

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist

jobs:
  # 빠른 체크들을 병렬로 실행
  quality-checks:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      
      - name: Python Syntax Check
        run: |
          echo "🔍 Running Python syntax checks..."
          python3 -m py_compile src/core/har_based_regtech_collector.py || echo "⚠️ Syntax issues in REGTECH collector"
          python3 -m py_compile src/core/har_based_secudium_collector.py || echo "⚠️ Syntax issues in SECUDIUM collector"
          python3 -m py_compile src/core/collection_manager.py || echo "⚠️ Syntax issues in collection manager"
          echo "✅ Syntax checks completed"

      - name: Basic Security Check
        run: |
          echo "🔒 Running basic security checks..."
          # Check for hardcoded secrets
          if grep -r -E "(password|secret|key|token)\s*=\s*['\"][^'\"]*['\"]" --include="*.py" src/ 2>/dev/null; then
            echo "⚠️ Potential hardcoded secrets found!"
          else
            echo "✅ No hardcoded secrets detected"
          fi
          echo "✅ Security checks completed"

  # Docker 빌드 및 레지스트리 푸시
  build-and-push:
    needs: quality-checks
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Login to Docker Registry
        run: |
          echo "🔐 Logging into registry..."
          # Docker Hub 자격증명을 registry.jclee.me에도 사용
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login registry.jclee.me -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          echo "✅ Registry login completed"
          
      - name: Build and Push Docker Image
        run: |
          echo "🔨 Building Docker image..."
          
          # 빌드 시간과 커밋 정보
          BUILD_TIME=$(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S KST')
          
          # Docker 이미지 빌드
          docker build \
            -f deployment/Dockerfile \
            --target production \
            --build-arg BUILD_TIME="$BUILD_TIME" \
            --build-arg GIT_COMMIT="${{ github.sha }}" \
            --build-arg GIT_BRANCH="${{ github.ref_name }}" \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            .
          
          echo "📤 Pushing to registry..."
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          echo "✅ Build and push completed successfully!"

  # Kubernetes 배포 및 검증
  deploy-to-k8s:
    needs: build-and-push
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Kubernetes Access
        run: |
          echo "🔑 Setting up Kubernetes access..."
          # kubeconfig 설정 (self-hosted runner에 이미 설정되어 있어야 함)
          export KUBECONFIG=${{ github.workspace }}/.kube/config
          
          # 또는 환경변수에서 kubeconfig 생성
          if [ -n "${{ secrets.KUBE_CONFIG }}" ]; then
            echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ${{ github.workspace }}/.kube/config
            chmod 600 ${{ github.workspace }}/.kube/config
          fi
          
          # 연결 테스트
          kubectl version --client
          kubectl get nodes
          echo "✅ Kubernetes access configured"
      
      - name: Deploy to Kubernetes
        run: |
          echo "🚀 Deploying to Kubernetes..."
          
          # Kustomize로 이미지 태그 업데이트
          cd k8s
          if command -v kustomize &> /dev/null; then
            kustomize edit set image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          else
            # kustomize가 없으면 kubectl 사용
            kubectl set image deployment/blacklist blacklist=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -n blacklist --dry-run=client -o yaml > temp-deployment.yaml
          fi
          
          # 배포 적용
          kubectl apply -k . || kubectl apply -f .
          
          # 롤아웃 대기
          kubectl rollout status deployment/blacklist -n blacklist --timeout=300s
          
          echo "✅ Kubernetes deployment completed"

      - name: Verify Kubernetes Deployment
        run: |
          echo "🔍 Verifying Kubernetes deployment..."
          
          # Pod 상태 확인
          echo "📊 Pod status:"
          kubectl get pods -n blacklist -l app=blacklist
          
          # Service 상태 확인
          echo "🌐 Service status:"
          kubectl get svc -n blacklist
          
          # 최신 이벤트 확인
          echo "📅 Recent events:"
          kubectl get events -n blacklist --sort-by='.lastTimestamp' | tail -10
          
          # NodePort를 통한 Health 체크
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
          NODE_PORT=$(kubectl get svc blacklist-nodeport -n blacklist -o jsonpath='{.spec.ports[0].nodePort}')
          
          echo "🔍 Testing via NodePort: http://$NODE_IP:$NODE_PORT/health"
          
          # 최대 30번 시도 (5분)
          MAX_ATTEMPTS=30
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "🔍 Attempt $ATTEMPT/$MAX_ATTEMPTS: Testing application health..."
            
            # Health 체크
            if curl -f -s --connect-timeout 5 --max-time 10 "http://$NODE_IP:$NODE_PORT/health" > /dev/null 2>&1; then
              echo "✅ Application is healthy!"
              break
            else
              echo "⏳ Application not ready yet, waiting 10 seconds..."
              sleep 10
            fi
            
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "❌ Application failed to become healthy"
              kubectl logs deployment/blacklist -n blacklist --tail=50
              exit 1
            fi
          done

      - name: Smoke Tests
        run: |
          echo "🧪 Running smoke tests..."
          
          # NodePort를 통한 테스트
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
          NODE_PORT=$(kubectl get svc blacklist-nodeport -n blacklist -o jsonpath='{.spec.ports[0].nodePort}')
          BASE_URL="http://$NODE_IP:$NODE_PORT"
          
          # 핵심 엔드포인트 테스트
          endpoints=(
            "$BASE_URL/health"
            "$BASE_URL/api/stats"
            "$BASE_URL/api/collection/status"
            "$BASE_URL/test"
          )
          
          for endpoint in "${endpoints[@]}"; do
            echo "Testing $endpoint..."
            if curl -f -s --max-time 10 "$endpoint" > /dev/null; then
              echo "✅ $endpoint: OK"
            else
              echo "❌ $endpoint: FAILED"
              # 실패해도 계속 진행 (일부 엔드포인트는 아직 문제가 있을 수 있음)
            fi
          done
          
          echo "✅ Smoke tests completed!"

  # 배포 완료 알림
  notify:
    needs: [build-and-push, deploy-to-k8s]
    runs-on: self-hosted
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Deployment Summary
        run: |
          echo "## 배포 완료 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| 상태 | ${{ needs.deploy-to-k8s.result == 'success' && '✅ 성공' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 이미지 | ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 커밋 | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 브랜치 | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| URL | https://blacklist.jclee.me |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-to-k8s.result }}" != "success" ]; then
            echo "⚠️ **주의**: Kubernetes 배포에 실패했습니다. 로그를 확인해주세요." >> $GITHUB_STEP_SUMMARY
          else
            echo "🎉 **성공**: Kubernetes 배포가 완료되었습니다!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Send Success Notification
        if: needs.deploy-to-k8s.result == 'success'
        run: |
          echo "📢 Kubernetes 배포 성공 알림..."
          
          # 배포 정보 수집
          DEPLOYMENT_INFO=$(kubectl get deployment blacklist -n blacklist -o json)
          READY_REPLICAS=$(echo "$DEPLOYMENT_INFO" | jq '.status.readyReplicas // 0')
          DESIRED_REPLICAS=$(echo "$DEPLOYMENT_INFO" | jq '.spec.replicas // 0')
          
          echo "✅ Kubernetes 배포 완료:"
          echo "   - Ready: $READY_REPLICAS/$DESIRED_REPLICAS replicas"
          echo "   - Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "   - Namespace: blacklist"
          
          # ArgoCD가 설치되어 있다면 동기화
          if command -v argocd &> /dev/null; then
            echo "🔄 Syncing ArgoCD application..."
            argocd app sync blacklist --async || echo "⚠️ ArgoCD sync failed (not critical)"
          fi
          
          echo "✅ 배포 성공 알림 전송 완료"