name: Kubernetes Build and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist
  KUBERNETES_NAMESPACE: blacklist

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml
    
    - name: Integration tests
      run: |
        # 시작
        python main.py &
        APP_PID=$!
        sleep 10
        
        # 테스트
        curl -f http://localhost:8541/health || exit 1
        curl -f http://localhost:8541/api/stats || exit 1
        
        # 수집 테스트
        curl -X POST http://localhost:8541/api/collection/enable
        curl -X POST http://localhost:8541/api/collection/regtech/trigger
        curl -X POST http://localhost:8541/api/collection/secudium/trigger
        
        # 정리
        kill $APP_PID

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./deployment/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v2
      with:
        kustomize-version: '4.5.7'
    
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
    
    - name: Update image tag
      run: |
        cd k8s
        kustomize edit set image registry.jclee.me/blacklist:${{ github.sha }}
    
    - name: Deploy to Kubernetes
      run: |
        cd k8s
        kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/blacklist -n blacklist --timeout=300s
    
    - name: Verify deployment
      run: |
        kubectl get pods -n blacklist
        kubectl get svc -n blacklist
        
        # Health check
        INGRESS_IP=$(kubectl get ingress blacklist -n blacklist -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ ! -z "$INGRESS_IP" ]; then
          sleep 30
          curl -f https://blacklist.jclee.me/health || exit 1
        fi
    
    - name: Run smoke tests
      run: |
        # API 테스트
        curl -f https://blacklist.jclee.me/api/stats
        curl -f https://blacklist.jclee.me/api/collection/status
        
        # 수집 기능 테스트
        curl -X POST https://blacklist.jclee.me/api/collection/enable \
          -H "Content-Type: application/json"

  rollback:
    needs: deploy
    runs-on: ubuntu-latest
    if: failure()
    steps:
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
    
    - name: Rollback deployment
      run: |
        kubectl rollout undo deployment/blacklist -n blacklist
        kubectl rollout status deployment/blacklist -n blacklist --timeout=300s