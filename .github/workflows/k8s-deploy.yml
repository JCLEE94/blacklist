name: Enhanced Kubernetes CI/CD Pipeline

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist
  NAMESPACE: blacklist

jobs:
  # Îπ†Î•∏ Ï≤¥ÌÅ¨Îì§ÏùÑ Î≥ëÎ†¨Î°ú Ïã§Ìñâ
  quality-checks:
    runs-on: self-hosted
    outputs:
      should_deploy: ${{ steps.check_changes.outputs.should_deploy }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      
      - name: Check for relevant changes
        id: check_changes
        run: |
          echo "üîç Checking for relevant changes..."
          
          # Î∞∞Ìè¨ Í¥ÄÎ†® ÌååÏùºÎì§ Ï≤¥ÌÅ¨
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(py|yml|yaml|dockerfile|sh|ps1)$|requirements\.txt|^k8s/|^scripts/|^deployment/' | wc -l)
          
          if [ "$CHANGED_FILES" -gt 0 ] || [ "${{ github.event.inputs.force_deploy }}" == "true" ] || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Deployment needed: $CHANGED_FILES relevant files changed"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "‚è© No deployment needed: No relevant files changed"
          fi
      
      - name: Python Syntax Check
        run: |
          echo "üîç Running Python syntax checks..."
          python3 -m py_compile src/core/har_based_regtech_collector.py || echo "‚ö†Ô∏è Syntax issues in REGTECH collector"
          python3 -m py_compile src/core/har_based_secudium_collector.py || echo "‚ö†Ô∏è Syntax issues in SECUDIUM collector"
          python3 -m py_compile src/core/collection_manager.py || echo "‚ö†Ô∏è Syntax issues in collection manager"
          python3 -m py_compile src/core/unified_service.py || echo "‚ö†Ô∏è Syntax issues in unified service"
          echo "‚úÖ Syntax checks completed"

      - name: Basic Security Check
        run: |
          echo "üîí Running basic security checks..."
          # Check for hardcoded secrets
          if grep -r -E "(password|secret|key|token)\s*=\s*['\"][^'\"]*['\"]" --include="*.py" src/ 2>/dev/null; then
            echo "‚ö†Ô∏è Potential hardcoded secrets found!"
          else
            echo "‚úÖ No hardcoded secrets detected"
          fi
          echo "‚úÖ Security checks completed"

  # Docker ÎπåÎìú Î∞è Î†àÏßÄÏä§Ìä∏Î¶¨ Ìë∏Ïãú
  build-and-push:
    needs: quality-checks
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && needs.quality-checks.outputs.should_deploy == 'true'
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
      build_time: ${{ steps.build.outputs.build_time }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Login to Docker Registry
        run: |
          echo "üîê Logging into registry..."
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login registry.jclee.me -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          echo "‚úÖ Registry login completed"
          
      - name: Build and Push Docker Image
        id: build
        run: |
          echo "üî® Building Docker image..."
          
          # ÎπåÎìú ÏãúÍ∞ÑÍ≥º Ïª§Î∞ã Ï†ïÎ≥¥
          BUILD_TIME=$(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S KST')
          SHORT_SHA_8=${GITHUB_SHA:0:8}
          SHORT_SHA_7=${GITHUB_SHA:0:7}
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          # Îã§ÏñëÌïú Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏Îì§ (ÏûêÎèô ÏóÖÎç∞Ïù¥ÌÑ∞ Ìò∏ÌôòÏÑ± Ìñ•ÏÉÅ)
          LATEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          SHA8_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SHORT_SHA_8}"
          SHA7_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SHORT_SHA_7}"
          BRANCH_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          TIMESTAMP_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TIMESTAMP}"
          
          # Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú (Îã§Ï§ë ÌÉúÍ∑∏)
          docker build \
            -f deployment/Dockerfile \
            --target production \
            --build-arg BUILD_TIME="$BUILD_TIME" \
            --build-arg GIT_COMMIT="${{ github.sha }}" \
            --build-arg GIT_BRANCH="${{ github.ref_name }}" \
            -t "$LATEST_TAG" \
            -t "$SHA8_TAG" \
            -t "$SHA7_TAG" \
            -t "$BRANCH_TAG" \
            -t "$TIMESTAMP_TAG" \
            .
          
          echo "üì§ Pushing to registry..."
          docker push "$LATEST_TAG"
          docker push "$SHA8_TAG"
          docker push "$SHA7_TAG"
          docker push "$BRANCH_TAG"
          docker push "$TIMESTAMP_TAG"
          
          # Ïù¥Ï†Ñ Ïù¥ÎØ∏ÏßÄ Ï†ïÎ¶¨
          docker image prune -f --filter "until=24h"
          
          # Ï∂úÎ†• ÏÑ§Ï†ï (ÏûêÎèô ÏóÖÎç∞Ïù¥ÌÑ∞Í∞Ä Í∞êÏßÄÌï† Ïàò ÏûàÎäî ÌÉúÍ∑∏ Ïö∞ÏÑ†)
          echo "image_tag=${SHORT_SHA_7}" >> $GITHUB_OUTPUT
          echo "image_tag_8=${SHORT_SHA_8}" >> $GITHUB_OUTPUT
          echo "timestamp_tag=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Build and push completed successfully!"
          echo "üì¶ Image tags:"
          echo "   - Latest: $LATEST_TAG"
          echo "   - SHA-7: $SHA7_TAG"
          echo "   - SHA-8: $SHA8_TAG"
          echo "   - Branch: $BRANCH_TAG"
          echo "   - Timestamp: $TIMESTAMP_TAG"

  # Kubernetes Î∞∞Ìè¨ Î∞è Í≤ÄÏ¶ù
  deploy-to-k8s:
    needs: [quality-checks, build-and-push]
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && needs.quality-checks.outputs.should_deploy == 'true'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Kubernetes Access
        run: |
          echo "üîë Setting up Kubernetes access..."
          
          # kubeconfig Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
          kubectl version --client
          kubectl get nodes --no-headers | head -3
          echo "‚úÖ Kubernetes access configured"
      
      - name: Deploy to Kubernetes using script
        run: |
          echo "üöÄ Deploying to Kubernetes using deployment script..."
          
          # ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
          export IMAGE_TAG="${{ needs.build-and-push.outputs.image_tag }}"
          export DEPLOYMENT_REASON="CI/CD Pipeline - Commit ${{ github.sha }}"
          
          echo "üìã Deployment info:"
          echo "   - Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
          echo "   - Namespace: ${{ env.NAMESPACE }}"
          echo "   - Reason: $DEPLOYMENT_REASON"
          
          # Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh
          
          echo "‚úÖ Deployment script completed"

      - name: Force Image Update
        run: |
          echo "üîÑ Forcing image update..."
          
          # Ïù¥ÎØ∏ÏßÄ Í∞ïÏ†ú ÏóÖÎç∞Ïù¥Ìä∏
          kubectl set image deployment/blacklist \
            blacklist="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }}" \
            -n ${{ env.NAMESPACE }}
          
          # Î°§ÏïÑÏõÉ Ïû¨ÏãúÏûë (Ïù¥ÎØ∏ÏßÄÍ∞Ä Í∞ôÏïÑÎèÑ Í∞ïÏ†ú Ïû¨Î∞∞Ìè¨)
          kubectl rollout restart deployment/blacklist -n ${{ env.NAMESPACE }}
          
          # Î°§ÏïÑÏõÉ ÏÉÅÌÉú ÎåÄÍ∏∞
          kubectl rollout status deployment/blacklist -n ${{ env.NAMESPACE }} --timeout=600s
          
          echo "‚úÖ Image update completed"

      - name: Verify Deployment
        run: |
          echo "üîç Verifying deployment..."
          
          # Pod ÏÉÅÌÉú ÌôïÏù∏
          echo "üìä Pod status:"
          kubectl get pods -n ${{ env.NAMESPACE }} -l app=blacklist -o wide
          
          # Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏ ÌôïÏù∏
          CURRENT_IMAGE=$(kubectl get deployment blacklist -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.template.spec.containers[0].image}')
          echo "üè∑Ô∏è  Current image: $CURRENT_IMAGE"
          
          # Service ÏÉÅÌÉú ÌôïÏù∏
          echo "üåê Service status:"
          kubectl get svc -n ${{ env.NAMESPACE }}
          
          # ConfigMapÍ≥º Secret ÌôïÏù∏
          echo "üìÑ Config resources:"
          kubectl get configmap,secret -n ${{ env.NAMESPACE }} --no-headers | grep blacklist || echo "No blacklist configs found"
          
          # ÏµúÏã† Ïù¥Î≤§Ìä∏ ÌôïÏù∏
          echo "üìÖ Recent events:"
          kubectl get events -n ${{ env.NAMESPACE }} --sort-by='.lastTimestamp' | tail -15
          
          echo "‚úÖ Verification completed"

      - name: Health Check
        run: |
          echo "üè• Running health checks..."
          
          # NodePortÎ°ú Ï†ëÏÜç Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
          NODE_PORT=$(kubectl get svc blacklist -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.ports[0].nodePort}' 2>/dev/null || echo "32541")
          
          BASE_URL="http://$NODE_IP:$NODE_PORT"
          echo "üîó Testing via: $BASE_URL"
          
          # ÏµúÎåÄ 60Î≤à ÏãúÎèÑ (10Î∂Ñ)
          MAX_ATTEMPTS=60
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "üîç Health check attempt $ATTEMPT/$MAX_ATTEMPTS..."
            
            # Health Ï≤¥ÌÅ¨
            if curl -f -s --connect-timeout 5 --max-time 10 "$BASE_URL/health" > /dev/null 2>&1; then
              echo "‚úÖ Application is healthy!"
              
              # Ï∂îÍ∞Ä ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌÖåÏä§Ìä∏
              echo "üß™ Testing additional endpoints..."
              curl -f -s --max-time 5 "$BASE_URL/api/stats" > /dev/null && echo "‚úÖ /api/stats: OK" || echo "‚ö†Ô∏è /api/stats: Failed"
              curl -f -s --max-time 5 "$BASE_URL/test" > /dev/null && echo "‚úÖ /test: OK" || echo "‚ö†Ô∏è /test: Failed"
              curl -f -s --max-time 5 "$BASE_URL/api/collection/status" > /dev/null && echo "‚úÖ /api/collection/status: OK" || echo "‚ö†Ô∏è /api/collection/status: Failed"
              
              break
            else
              echo "‚è≥ Application not ready yet, waiting 10 seconds..."
              sleep 10
            fi
            
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "‚ùå Application failed to become healthy after 10 minutes"
              echo "üìù Pod logs:"
              kubectl logs deployment/blacklist -n ${{ env.NAMESPACE }} --tail=50
              echo "üîç Pod description:"
              kubectl describe pods -n ${{ env.NAMESPACE }} -l app=blacklist
              exit 1
            fi
          done
          
          echo "‚úÖ Health checks passed!"

      - name: Performance Check
        run: |
          echo "‚ö° Running performance checks..."
          
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
          NODE_PORT=$(kubectl get svc blacklist -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.ports[0].nodePort}' 2>/dev/null || echo "32541")
          BASE_URL="http://$NODE_IP:$NODE_PORT"
          
          # ÏùëÎãµ ÏãúÍ∞Ñ Ï≤¥ÌÅ¨
          echo "üìä Checking response times..."
          for i in {1..5}; do
            RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}\n' "$BASE_URL/health")
            echo "   Response $i: ${RESPONSE_TIME}s"
            
            # 2Ï¥à Ïù¥ÏÉÅÏù¥Î©¥ Í≤ΩÍ≥†
            if [ "$(echo "$RESPONSE_TIME > 2.0" | bc -l)" -eq 1 ]; then
              echo "‚ö†Ô∏è Slow response detected: ${RESPONSE_TIME}s"
            fi
          done
          
          echo "‚úÖ Performance checks completed"

      - name: Post-Deployment Tasks
        run: |
          echo "üîß Running post-deployment tasks..."
          
          # ÏûêÎèô ÏàòÏßë ÌôïÏù∏
          echo "üîÑ Checking auto-collection status..."
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
          NODE_PORT=$(kubectl get svc blacklist -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.ports[0].nodePort}' 2>/dev/null || echo "32541")
          
          # 5Ï¥à ÎåÄÍ∏∞ ÌõÑ ÏàòÏßë ÏÉÅÌÉú ÌôïÏù∏
          sleep 5
          COLLECTION_STATUS=$(curl -s "http://$NODE_IP:$NODE_PORT/api/collection/status" 2>/dev/null || echo "Failed to get status")
          echo "üìä Collection status: $COLLECTION_STATUS"
          
          # Ïù¥Ï†Ñ ReplicaSet Ï†ïÎ¶¨ (ÏµúÏã† 3Í∞úÎßå Ïú†ÏßÄ)
          echo "üßπ Cleaning up old ReplicaSets..."
          kubectl delete rs -n ${{ env.NAMESPACE }} -l app=blacklist --field-selector='status.replicas=0' || echo "No old ReplicaSets to clean"
          
          echo "‚úÖ Post-deployment tasks completed"

  # Î∞∞Ìè¨ ÏôÑÎ£å ÏïåÎ¶º Î∞è Ï†ïÎ¶¨
  notify-and-cleanup:
    needs: [quality-checks, build-and-push, deploy-to-k8s]
    runs-on: self-hosted
    if: always() && github.ref == 'refs/heads/main' && needs.quality-checks.outputs.should_deploy == 'true'
    steps:
      - name: Deployment Summary
        run: |
          echo "## üöÄ Kubernetes Î∞∞Ìè¨ ÏôÑÎ£å Î¶¨Ìè¨Ìä∏" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Î∞∞Ìè¨ Ï†ïÎ≥¥" >> $GITHUB_STEP_SUMMARY
          echo "| Ìï≠Î™© | Í∞í |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| ÏÉÅÌÉú | ${{ needs.deploy-to-k8s.result == 'success' && '‚úÖ ÏÑ±Í≥µ' || '‚ùå Ïã§Ìå®' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏ | \`${{ needs.build-and-push.outputs.image_tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| ÎπåÎìú ÏãúÍ∞Ñ | ${{ needs.build-and-push.outputs.build_time }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Ïª§Î∞ã | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Î∏åÎûúÏπò | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ | \`${{ env.NAMESPACE }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Ï†ëÏÜç URL | https://blacklist.jclee.me |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-to-k8s.result }}" != "success" ]; then
            echo "### ‚ö†Ô∏è Î∞∞Ìè¨ Ïã§Ìå®" >> $GITHUB_STEP_SUMMARY
            echo "Kubernetes Î∞∞Ìè¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§ÏùåÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî:" >> $GITHUB_STEP_SUMMARY
            echo "- Ïù¥ÎØ∏ÏßÄ ÎπåÎìú ÏÉÅÌÉú" >> $GITHUB_STEP_SUMMARY
            echo "- Kubernetes ÌÅ¥Îü¨Ïä§ÌÑ∞ ÏÉÅÌÉú" >> $GITHUB_STEP_SUMMARY
            echo "- Pod Î°úÍ∑∏ Î∞è Ïù¥Î≤§Ìä∏" >> $GITHUB_STEP_SUMMARY
          else
            echo "### üéâ Î∞∞Ìè¨ ÏÑ±Í≥µ" >> $GITHUB_STEP_SUMMARY
            echo "ÏÉàÎ°úÏö¥ Î≤ÑÏ†ÑÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î∞∞Ìè¨ÎêòÏóàÏäµÎãàÎã§!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### üîó Ï†ëÏÜç Ï†ïÎ≥¥" >> $GITHUB_STEP_SUMMARY
            echo "- ÎåÄÏãúÎ≥¥Îìú: https://blacklist.jclee.me/" >> $GITHUB_STEP_SUMMARY
            echo "- API Î¨∏ÏÑú: https://blacklist.jclee.me/docs" >> $GITHUB_STEP_SUMMARY
            echo "- Health Check: https://blacklist.jclee.me/health" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Cleanup Docker Images
        if: needs.deploy-to-k8s.result == 'success'
        run: |
          echo "üßπ Cleaning up Docker images..."
          
          # 7Ïùº Ïù¥ÏÉÅ Îêú Ïù¥ÎØ∏ÏßÄ Ï†ïÎ¶¨
          docker image prune -a -f --filter "until=168h" || echo "Docker cleanup skipped"
          
          # ÎπåÎìú Ï∫êÏãú Ï†ïÎ¶¨
          docker builder prune -f --filter "until=48h" || echo "Builder cache cleanup skipped"
          
          echo "‚úÖ Docker cleanup completed"

      - name: Trigger Webhook (Optional)
        if: needs.deploy-to-k8s.result == 'success'
        run: |
          echo "üîî Triggering deployment webhook..."
          
          # ÏõπÌõÖÏù¥ ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÎã§Î©¥ Ìò∏Ï∂ú
          if [ -n "${{ secrets.DEPLOYMENT_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DEPLOYMENT_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{
                "event": "deployment_success",
                "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }}",
                "commit": "${{ github.sha }}",
                "branch": "${{ github.ref_name }}",
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
                "url": "https://blacklist.jclee.me"
              }' || echo "Webhook call failed (non-critical)"
          else
            echo "No webhook URL configured"
          fi
          
          echo "‚úÖ Notification tasks completed"