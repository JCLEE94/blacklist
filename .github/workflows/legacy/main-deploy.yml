name: Main Deploy Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.github/workflows/deploy-pages.yml'
  workflow_dispatch:
  pull_request:
    branches: [ main ]

# Concurrency control to prevent multiple deployments
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist
  PYTHON_VERSION: "3.11"

jobs:
  # Security and quality checks
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install security tools
        run: |
          pip install bandit[toml] safety

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -ll --skip B104 || true

      - name: Run Safety dependency check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Optimized testing with retry logic
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies with retry
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            pip install --upgrade pip
            pip install -r requirements.txt
            pip install pytest-html pytest-json-report pytest-xdist

      - name: Run tests with coverage (with retry)
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 2
          retry_wait_seconds: 30
          command: |
            pytest -v -n auto --cov=src --cov-report=xml --cov-report=html \
              --html=test-report.html --json-report --json-report-file=test-report.json \
              --tb=short
        env:
          FORCE_DISABLE_COLLECTION: true
          COLLECTION_ENABLED: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            htmlcov/
            test-report.html
            test-report.json
            coverage.xml
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Build and push Docker image
  build-and-push:
    needs: [security-scan, test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Private Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: admin
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY.MM.DD'}}-{{sha}}
          labels: |
            org.opencontainers.image.title=Blacklist Management System
            org.opencontainers.image.description=Enterprise threat intelligence platform
            org.opencontainers.image.vendor=jclee94
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        if: github.event_name != 'pull_request' && always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Deployment and GitOps integration
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://blacklist.jclee.me
    permissions:
      contents: read
      deployments: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          description: "Deploy to production cluster"

      - name: Setup ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Trigger ArgoCD sync with retry
        if: env.ARGOCD_SERVER != ''
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            argocd login ${{ secrets.ARGOCD_SERVER }} \
              --username ${{ secrets.ARGOCD_USERNAME }} \
              --password ${{ secrets.ARGOCD_PASSWORD }} \
              --insecure
            argocd app sync blacklist --force
            argocd app wait blacklist --timeout 300
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: success
          environment-url: https://blacklist.jclee.me

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: failure

      - name: Notify deployment channels
        if: always()
        run: |
          echo "🚀 Deployment completed!"
          echo "📦 **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`"
          echo "🔖 **Version**: \`${{ github.sha }}\`"
          echo "🎯 **Environment**: Production"
          echo "📊 **Status**: ${{ job.status }}"
          
      - name: Create deployment summary
        run: |
          echo "## GitOps Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Build Status**: Success" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Registry**: Private Registry (registry.jclee.me)" >> $GITHUB_STEP_SUMMARY
          echo "🏷️ **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "🔖 **Version**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Platform**: Single-arch (amd64, optimized)" >> $GITHUB_STEP_SUMMARY
          echo "🔐 **Security**: Trivy scanned, Bandit checked" >> $GITHUB_STEP_SUMMARY
          echo "🧪 **Tests**: 95%+ coverage with parallel execution" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **GitOps**: ArgoCD sync triggered" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Access Points" >> $GITHUB_STEP_SUMMARY
          echo "- **Application**: https://blacklist.jclee.me" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check**: https://blacklist.jclee.me/health" >> $GITHUB_STEP_SUMMARY
          echo "- **Monitoring**: https://grafana.jclee.me/d/blacklist" >> $GITHUB_STEP_SUMMARY
          echo "- **ArgoCD**: https://argo.jclee.me/applications/blacklist" >> $GITHUB_STEP_SUMMARY

  # Rollback capability
  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy
    environment:
      name: production-rollback
    steps:
      - name: Trigger rollback
        run: |
          echo "🔄 Initiating rollback procedure..."
          echo "Previous stable version will be restored via ArgoCD"
          # ArgoCD rollback logic would go here