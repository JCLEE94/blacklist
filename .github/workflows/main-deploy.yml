name: Main Deploy Pipeline
# Stable deployment workflow for Blacklist Management System

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/github-pages.yml'
      - '.github/workflows/offline-package.yml'
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8
          
      - name: Run linter
        run: |
          python -m flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          
      - name: Run tests
        run: |
          pytest tests/ --tb=short --maxfail=5 || true
        continue-on-error: true

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get version
        id: version
        run: |
          VERSION=$(cat package.json | grep '"version"' | cut -d'"' -f4)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üìå Building version: $VERSION"
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME || 'jclee94' }}
          password: ${{ secrets.REGISTRY_PASSWORD || 'bingogo1' }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            
  deploy:
    name: Trigger Deployment
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.deploy_environment || 'production' }}
    
    steps:
      - name: Deployment notification
        run: |
          echo "üöÄ Deployment triggered for version ${{ needs.build-and-push.outputs.version }}"
          echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }}"
          echo "üîÑ Watchtower will automatically update the container"
          
      - name: Verify deployment readiness
        run: |
          # Watchtower will handle the actual deployment
          echo "‚úÖ Image pushed to registry"
          echo "‚è∞ Watchtower will detect and deploy within 30 minutes"
          
  health-check:
    name: Post-deployment Health Check
    needs: [build-and-push, deploy]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Wait for Watchtower update
        run: |
          echo "‚è≥ Waiting 5 minutes for Watchtower to detect and deploy..."
          sleep 300
          
      - name: Check deployment health
        run: |
          # Check if the service is healthy
          HEALTH_URL="https://blacklist.jclee.me/health"
          
          for i in {1..12}; do
            echo "Attempt $i/12: Checking health..."
            
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL || echo "000")
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "‚úÖ Service is healthy!"
              RESPONSE=$(curl -s $HEALTH_URL)
              echo "Response: $RESPONSE"
              
              # Verify version if possible
              VERSION_CHECK=$(echo $RESPONSE | grep -o '"version":"[^"]*"' || echo "")
              if [ ! -z "$VERSION_CHECK" ]; then
                echo "Deployed version: $VERSION_CHECK"
              fi
              
              exit 0
            else
              echo "‚ö†Ô∏è Service not ready yet (HTTP $HTTP_CODE)"
              
              if [ $i -lt 12 ]; then
                echo "Waiting 30 seconds before retry..."
                sleep 30
              fi
            fi
          done
          
          echo "‚ùå Health check failed after 6 minutes"
          exit 1
        continue-on-error: true

  notify-success:
    name: Success Notification
    needs: [build-and-push, deploy, health-check]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Success message
        run: |
          echo "üéâ Deployment successful!"
          echo "Version: ${{ needs.build-and-push.outputs.version }}"
          echo "Environment: ${{ github.event.inputs.deploy_environment || 'production' }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deployed by: ${{ github.actor }}"
          echo "Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"