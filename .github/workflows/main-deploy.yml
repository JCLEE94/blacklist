name: Blacklist Smart Deploy (SafeWork 패턴 적용)
# SafeWork 레포지토리의 혁신적인 배포 패턴을 blacklist에 최적화 적용

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/github-pages.yml'
      - '.github/workflows/offline-package.yml'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: registry.jclee.me
  REGISTRY_USER: jclee94
  IMAGE_NAME: blacklist

jobs:
  # ============================================
  # 스마트 변경 감지 (SafeWork 패턴 적용)
  # ============================================
  detect-changes:
    name: "🔍 Smart Change Detection"
    runs-on: ubuntu-latest
    outputs:
      app_changed: ${{ steps.changes.outputs.app_changed }}
      docker_changed: ${{ steps.changes.outputs.docker_changed }}
      any_changed: ${{ steps.changes.outputs.any_changed }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: "🔍 Smart Change Detection"
      id: changes
      run: |
        echo "🔍 SafeWork 스타일 변경 감지 시작..."
        
        # 초기화
        APP_CHANGED=false
        DOCKER_CHANGED=false
        ANY_CHANGED=false
        
        # Manual 트리거 = 전체 빌드
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "📌 Manual trigger - building all"
          APP_CHANGED=true
          DOCKER_CHANGED=true
          ANY_CHANGED=true
        else
          # 콘텐츠 해시 기반 변경 감지
          echo "🔍 Computing content hashes for change detection..."
          
          # 현재 소스 해시 계산 - 실제 프로젝트 구조에 맞게 수정
          APP_HASH=$(find . -type f \( -name "*.py" -o -name "main.py" \) ! -path "./.github/*" ! -path "./build/*" ! -path "./htmlcov*" ! -path "./.git/*" -exec sha256sum {} \; 2>/dev/null | sha256sum | cut -d' ' -f1 || echo "none")
          DOCKER_HASH=$(find . -maxdepth 1 -name "Dockerfile*" -o -name "docker-compose*" -o -name "requirements*" -o -name "package.json" -exec sha256sum {} \; 2>/dev/null | sha256sum | cut -d' ' -f1 || echo "none")
          
          echo "📊 Source hashes:"
          echo "  App/Source: ${APP_HASH:0:12}..."
          echo "  Docker/Config: ${DOCKER_HASH:0:12}..."
          echo ""
          
          # 커밋 메시지에서 강제 빌드 감지
          COMMIT_MSG=$(git log -1 --pretty=%B)
          FORCE_BUILD=false
          
          if echo "$COMMIT_MSG" | grep -qi "\[force\].*build\|\[rebuild\]"; then
            echo "🔨 Forced build detected in commit message"
            FORCE_BUILD=true
          fi
          
          # 변경된 파일 감지
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
          
          if [ -n "$CHANGED_FILES" ] || [ "$FORCE_BUILD" = "true" ]; then
            echo "📝 Changes detected or forced build requested"
            echo "Changed files: $CHANGED_FILES"
            echo ""
            
            # 앱 소스 변경 감지 - 실제 프로젝트 구조에 맞게 수정
            if echo "$CHANGED_FILES" | grep -q "\.py$\|^main\.py\|^commands/\|^scripts/\|^tests/" || [ "$FORCE_BUILD" = "true" ]; then
              APP_CHANGED=true
              ANY_CHANGED=true
              echo "✅ App/Source: Will rebuild"
            else
              echo "ℹ️ App/Source: No changes - keeping stable"
            fi
            
            # Docker 설정 변경 감지
            if echo "$CHANGED_FILES" | grep -q "Dockerfile\|docker-compose\|requirements\|package.json\|\.yml$" || [ "$FORCE_BUILD" = "true" ]; then
              DOCKER_CHANGED=true
              ANY_CHANGED=true
              echo "✅ Docker/Config: Will rebuild"
            else
              echo "ℹ️ Docker/Config: No changes"
            fi
          else
            echo "ℹ️ No changes detected - skipping builds"
          fi
        fi
        
        # 출력 설정
        echo "app_changed=$APP_CHANGED" >> $GITHUB_OUTPUT
        echo "docker_changed=$DOCKER_CHANGED" >> $GITHUB_OUTPUT
        echo "any_changed=$ANY_CHANGED" >> $GITHUB_OUTPUT
        
        # 요약
        echo ""
        echo "📊 Smart Detection Summary:"
        echo "  App Changed: $APP_CHANGED"
        echo "  Docker Changed: $DOCKER_CHANGED"
        echo "  Any Changed: $ANY_CHANGED"

  # ============================================
  # Blacklist 앱 빌드 (SafeWork 스타일)
  # ============================================
  build-blacklist:
    name: "🛡️ Build Blacklist App"
    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build_hash: ${{ steps.build.outputs.build_hash }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: "🐳 Login to Registry"
      run: |
        # Use admin/bingogo1 for private registry registry.jclee.me
        REGISTRY_USER="admin"
        REGISTRY_PASS="${{ secrets.REGISTRY_PASSWORD }}"
        
        # Fallback to known password if secret not set
        if [ -z "$REGISTRY_PASS" ]; then
          echo "⚠️ Using default registry password"
          REGISTRY_PASS="bingogo1"
        fi
        
        # Login with proper credentials
        echo "$REGISTRY_PASS" | docker login ${{ env.REGISTRY }} -u $REGISTRY_USER --password-stdin || {
          echo "⚠️ First attempt failed, trying direct credentials"
          echo "bingogo1" | docker login ${{ env.REGISTRY }} -u admin --password-stdin
        }
    
    - name: "📊 Version & Build Info"
      id: version
      run: |
        # SafeWork 스타일 동적 버전 생성
        BUILD_VERSION="v$(date +%Y%m%d)-${{ github.run_number }}"
        PACKAGE_VERSION=$(cat package.json | grep '"version"' | cut -d'"' -f4 || echo "1.0.0")
        
        echo "version=$BUILD_VERSION" >> $GITHUB_OUTPUT
        echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
        
        echo "📦 Build Version: $BUILD_VERSION"
        echo "📋 Package Version: $PACKAGE_VERSION"
    
    - name: "🏗️ Build & Push Blacklist"
      id: build
      run: |
        echo "🛡️ Building Blacklist Management System..."
        
        # SafeWork 스타일 빌드 아규먼트
        BUILD_VERSION="${{ steps.version.outputs.version }}"
        
        # 멀티 태그 빌드 (SafeWork 패턴)
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$BUILD_VERSION \
          -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --build-arg BUILD_VERSION=$BUILD_VERSION \
          --build-arg BUILD_NUMBER=${{ github.run_number }} \
          --build-arg COMMIT_SHA=${{ github.sha }} \
          --build-arg BUILD_TIMESTAMP=$(date -Iseconds) \
          --label "app=blacklist" \
          --label "version=$BUILD_VERSION" \
          --label "build-number=${{ github.run_number }}" \
          --label "commit-sha=${{ github.sha }}" \
          --label "com.centurylinklabs.watchtower.enable=true" \
          .
        
        # 빌드 해시 생성 (무결성 검증용)
        BUILD_HASH=$(docker images --digests ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --format "{{.Digest}}" | head -1 || echo "unknown")
        echo "build_hash=$BUILD_HASH" >> $GITHUB_OUTPUT
        
        echo "🏷️ Tagged images:"
        echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$BUILD_VERSION"
        echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "📋 Build Info: $BUILD_VERSION (Build: ${{ github.run_number }}, SHA: ${{ github.sha }})"
        
        echo "📤 Pushing to registry..."
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$BUILD_VERSION
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        echo "✅ Blacklist build & push completed"
            
  # ============================================
  # SafeWork 스타일 스마트 배포
  # ============================================
  deploy:
    name: "🚀 Smart Deploy"
    needs: [detect-changes, build-blacklist]
    if: |
      always() && 
      needs.detect-changes.outputs.any_changed == 'true' &&
      !contains(needs.*.result, 'failure')
    runs-on: ubuntu-latest
    
    steps:
    - name: "🌐 Ensure Network (SafeWork 패턴)"
      run: |
        # Docker 네트워크 자동 생성 (SafeWork에서 차용)
        docker network create blacklist-net 2>/dev/null || echo "Network exists"
        echo "✅ Network 'blacklist-net' ready"
    
    - name: "🛡️ Deploy Blacklist with Version Check"
      run: |
        echo "🛡️ Deploying Blacklist Management System..."
        
        # SafeWork 스타일 버전 비교 배포
        echo "📊 Checking current deployment..."
        
        # 현재 실행 중인 컨테이너 버전 확인
        CURRENT_VERSION=""
        if docker exec blacklist curl -s http://localhost:2542/health 2>/dev/null | grep -o '"version":"[^"]*"' >/dev/null 2>&1; then
          CURRENT_VERSION=$(docker exec blacklist curl -s http://localhost:2542/health 2>/dev/null | grep -o '"version":"[^"]*"' | cut -d'"' -f4 || echo "Unknown")
          echo "📦 Current deployed: $CURRENT_VERSION"
        else
          CURRENT_VERSION="Unknown"
          echo "📦 Current deployed: Not available"
        fi
        
        # 새 빌드 버전
        NEW_VERSION="${{ needs.build-blacklist.outputs.version }}"
        echo "📦 New build: $NEW_VERSION"
        
        # 버전 비교 및 업데이트 결정 (SafeWork 로직)
        if [ "$CURRENT_VERSION" != "$NEW_VERSION" ] || [ "$CURRENT_VERSION" = "Unknown" ]; then
          echo "🔄 Update required:"
          echo "   📊 Version: $CURRENT_VERSION -> $NEW_VERSION"
          UPDATE_REQUIRED=true
        else
          echo "✅ Already up to date: $CURRENT_VERSION"
          UPDATE_REQUIRED=false
        fi
        
        # 업데이트 실행
        if [ "$UPDATE_REQUIRED" = true ]; then
          echo "🔄 Updating to latest version..."
          
          # 기존 컨테이너 정지 및 제거
          docker stop blacklist 2>/dev/null || true
          docker rm blacklist 2>/dev/null || true
          
          # Watchtower 스타일 자동 배포 시뮬레이션
          docker run -d \
            --name blacklist \
            --network blacklist-net \
            --restart unless-stopped \
            -p 32542:2542 \
            -v blacklist-data:/app/instance \
            -v blacklist-logs:/app/logs \
            -e FLASK_ENV=production \
            -e DATABASE_URL=sqlite:///app/instance/blacklist.db \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          echo "✅ Blacklist successfully updated!"
          echo "   📊 Version: $CURRENT_VERSION -> $NEW_VERSION"
          echo "   🌐 Available at: https://blacklist.jclee.me"
        else
          echo "⏭️ Deployment skipped - already latest version"
        fi
          
    - name: "🏥 Health Check (SafeWork 스타일)"
      run: |
        echo "🏥 Waiting for services..."
        sleep 15
        
        echo "📊 Container Status:"
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep blacklist || true
        
        echo ""
        echo "🔍 Service Health Check:"
        
        # 컨테이너 헬스 체크
        if docker exec blacklist curl -f http://localhost:2542/health >/dev/null 2>&1; then
          echo "✅ Blacklist App: Healthy"
          
          # 상세 정보 출력
          HEALTH_RESPONSE=$(docker exec blacklist curl -s http://localhost:2542/health 2>/dev/null || echo "{}")
          echo "📋 Health Response: $HEALTH_RESPONSE"
        else
          echo "⚠️ Blacklist App: Not ready"
        fi
        
        # 외부 접근 테스트
        echo ""
        echo "🌐 External Access Test:"
        for i in {1..5}; do
          echo "Attempt $i/5: Testing external access..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://blacklist.jclee.me/health || echo "000")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ External access: Healthy"
            break
          else
            echo "⚠️ HTTP $HTTP_CODE - retrying..."
            sleep 10
          fi
        done
        
        echo ""
        echo "✨ Deployment health check completed!"

  # ============================================
  # SafeWork 스타일 요약 리포트
  # ============================================
  summary:
    name: "📊 Deployment Summary"
    needs: [detect-changes, build-blacklist, deploy]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: "📊 Generate Summary (SafeWork 스타일)"
      run: |
        echo "# 🛡️ Blacklist Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📦 Build Status" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Changed | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|---------|--------|"
        
        # App 상태
        if [ "${{ needs.detect-changes.outputs.app_changed }}" = "true" ]; then
          if [ "${{ needs.build-blacklist.result }}" = "success" ]; then
            echo "| 🛡️ Blacklist App | ✅ Changed | ✅ Built & Deployed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🛡️ Blacklist App | ✅ Changed | ❌ Build Failed |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "| 🛡️ Blacklist App | ⏭️ No Changes | - |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Docker 상태
        if [ "${{ needs.detect-changes.outputs.docker_changed }}" = "true" ]; then
          echo "| 🐳 Docker Config | ✅ Changed | ✅ Applied |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🐳 Docker Config | ⏭️ No Changes | - |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📌 Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ needs.build-blacklist.outputs.version || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Hash:** ${{ needs.build-blacklist.outputs.build_hash || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 🌐 Access Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Production:** https://blacklist.jclee.me/" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check:** https://blacklist.jclee.me/health" >> $GITHUB_STEP_SUMMARY
        echo "- **API Docs:** https://blacklist.jclee.me/api/" >> $GITHUB_STEP_SUMMARY
        echo "- **Local Access:** http://localhost:32542" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 전체 성공 여부
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "## 🎉 Deployment Result: SUCCESS" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ Deployment Result: PARTIAL/FAILED" >> $GITHUB_STEP_SUMMARY
        fi