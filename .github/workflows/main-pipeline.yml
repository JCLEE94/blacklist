name: Main CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: self-hosted
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host
          config-inline: |
            [registry."registry.jclee.me"]
              http = true
              insecure = true

      - name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: admin
          password: bingogo1

      - name: Generate metadata
        id: meta
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=${GITHUB_SHA::8}
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          # Environment Í∏∞Î∞ò ÌÉúÍ∑∏ Í≤∞Ï†ï
          case "$BRANCH_NAME" in
            main)
              ENV_TAG="latest"
              ;;
            develop)
              ENV_TAG="development-latest"
              ;;
            staging)
              ENV_TAG="staging-latest"
              ;;
            *)
              ENV_TAG="feature-${BRANCH_NAME}-latest"
              ;;
          esac
          
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "env_tag=$ENV_TAG" >> $GITHUB_OUTPUT
          echo "image_tag=$TIMESTAMP" >> $GITHUB_OUTPUT

      - name: Build and Push
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployment/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.env_tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.timestamp }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ steps.meta.outputs.short_sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.branch }}-${{ steps.meta.outputs.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Push
        run: |
          echo "‚úÖ Successfully pushed:"
          echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.timestamp }}"

  gitops-deploy:
    name: GitOps Deployment via ArgoCD
    runs-on: self-hosted
    needs: build-and-push
    if: success()
    steps:
      - name: Update Charts Repository for GitOps
        run: |
          echo "üîÑ Updating charts.jclee.me repository for GitOps deployment"
          
          # charts.jclee.me Ï†ÄÏû•ÏÜåÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Helm Ï∞®Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
          if [ -d "/home/jclee/charts.jclee.me" ]; then
            cd /home/jclee/charts.jclee.me
            
            # Update blacklist chart
            if [ -d "charts/blacklist" ]; then
              # Update image tag in values.yaml
              sed -i "s|tag:.*|tag: \"${{ needs.build-and-push.outputs.image_tag }}\"|g" charts/blacklist/values.yaml
              
              # Update Chart version
              CHART_VERSION="1.0.$(date +%s)"
              sed -i "s|version:.*|version: $CHART_VERSION|g" charts/blacklist/Chart.yaml
              
              # Package and index
              helm package charts/blacklist -d .
              helm repo index . --url https://charts.jclee.me
              
              echo "‚úÖ Chart updated to version $CHART_VERSION with image tag ${{ needs.build-and-push.outputs.image_tag }}"
              
              # Commit and push changes for GitOps
              git add .
              git commit -m "feat: update blacklist chart to ${{ needs.build-and-push.outputs.image_tag }}"
              git push origin main
              
              echo "‚úÖ GitOps chart changes pushed to charts.jclee.me repository"
            else
              echo "‚ö†Ô∏è charts/blacklist directory not found"
            fi
          else
            echo "‚ö†Ô∏è charts.jclee.me directory not found, skipping chart update"
          fi

      - name: ArgoCD Sync and Deployment
        run: |
          echo "üöÄ ArgoCD GitOps Deployment:"
          echo "  - Cluster: k8s.jclee.me"
          echo "  - Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }}"
          echo "  - Namespace: blacklist"
          echo ""
          
          # Set production kubeconfig
          kubectl config use-context k8s-jclee
          
          # Trigger ArgoCD sync
          kubectl patch application blacklist -n argocd --type merge -p '{"operation":{"initiatedBy":{"username":"cicd-pipeline"},"sync":{"syncStrategy":{"hook":{"force":true}}}}}'
          
          # Wait for ArgoCD sync
          echo "‚è≥ Waiting for ArgoCD sync to complete..."
          kubectl wait --for=condition=Synced application/blacklist -n argocd --timeout=300s
          
          # Verify ArgoCD application status
          echo "‚úÖ ArgoCD Application Status:"
          kubectl get application blacklist -n argocd -o wide
          
          # Verify pods after GitOps deployment
          echo "‚úÖ Pod Status after GitOps deployment:"
          kubectl get pods -n blacklist -l app=blacklist
          
          echo "‚úÖ GitOps deployment completed successfully"