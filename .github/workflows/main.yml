name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist

jobs:
  test:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run tests
        run: |
          pytest tests/ -v --maxfail=3 || true

  build:
    needs: test
    runs-on: self-hosted
    outputs:
      image-tag: ${{ steps.meta.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Registry
        run: |
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login registry.jclee.me -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployment/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to Kubernetes
        run: |
          # Update image in kustomization
          cd k8s/overlays/production
          kustomize edit set image blacklist=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-tag }}
          
          # Apply with kubectl
          kustomize build . | kubectl apply -f -
          
          # Wait for rollout
          kubectl rollout status deployment/blacklist -n blacklist --timeout=5m
      
      - name: Verify deployment
        run: |
          # Check pod status
          kubectl get pods -n blacklist
          
          # Run health check
          kubectl run healthcheck --rm -i --restart=Never \
            --image=curlimages/curl:latest -n blacklist -- \
            curl -f http://blacklist:8541/health || echo "Health check failed"
      
      - name: ArgoCD Sync (Optional)
        continue-on-error: true
        run: |
          if command -v argocd &> /dev/null; then
            argocd app sync blacklist --grpc-web || true
          fi