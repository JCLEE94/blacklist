name: Create Offline Package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version'
        required: true
        default: 'latest'
      include_docker:
        description: 'Include Docker images'
        required: true
        type: boolean
        default: true

jobs:
  create-offline-package:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
        
    - name: Download Python packages
      run: |
        mkdir -p offline-package/python-packages
        pip download -r config/requirements.txt -d offline-package/python-packages/
        
    - name: Save Docker images
      if: ${{ inputs.include_docker }}
      run: |
        mkdir -p offline-package/docker-images
        
        # Build images
        docker build -f docker/postgresql/Dockerfile -t blacklist-postgres:${{ inputs.version }} .
        docker build -f docker/redis/Dockerfile -t blacklist-redis:${{ inputs.version }} .
        docker build -f docker/application/Dockerfile -t blacklist-app:${{ inputs.version }} .
        
        # Save images
        docker save blacklist-postgres:${{ inputs.version }} | gzip > offline-package/docker-images/postgres.tar.gz
        docker save blacklist-redis:${{ inputs.version }} | gzip > offline-package/docker-images/redis.tar.gz
        docker save blacklist-app:${{ inputs.version }} | gzip > offline-package/docker-images/app.tar.gz
        
    - name: Create installation scripts
      run: |
        cat > offline-package/install.sh << 'EOF'
        #!/bin/bash
        echo "🚀 Installing Blacklist System (Offline)"
        
        # Install Python packages
        echo "📦 Installing Python packages..."
        pip install --no-index --find-links python-packages/ -r ../config/requirements.txt
        
        # Load Docker images if present
        if [ -d "docker-images" ]; then
            echo "🐳 Loading Docker images..."
            docker load < docker-images/postgres.tar.gz
            docker load < docker-images/redis.tar.gz
            docker load < docker-images/app.tar.gz
        fi
        
        echo "✅ Installation complete!"
        EOF
        
        chmod +x offline-package/install.sh
        
    - name: Copy application files
      run: |
        cp -r src offline-package/
        cp -r config offline-package/
        cp -r docker offline-package/
        cp README.md offline-package/
        
    - name: Create package archive
      run: |
        tar -czf blacklist-offline-${{ inputs.version }}.tar.gz offline-package/
        
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: blacklist-offline-${{ inputs.version }}
        path: blacklist-offline-${{ inputs.version }}.tar.gz
        retention-days: 30
        
    - name: Create release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: offline-${{ inputs.version }}
        name: Offline Package ${{ inputs.version }}
        files: blacklist-offline-${{ inputs.version }}.tar.gz
        body: |
          ## 🎁 Offline Installation Package
          
          Version: ${{ inputs.version }}
          Docker Images: ${{ inputs.include_docker }}
          
          ### Installation
          ```bash
          tar -xzf blacklist-offline-${{ inputs.version }}.tar.gz
          cd offline-package
          ./install.sh
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}