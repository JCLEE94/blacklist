name: Offline Production CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the release'
        required: true
        default: 'v1.0.0'

# Prevent multiple workflows from running simultaneously
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  issues: write
  actions: read

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist
  ARGOCD_SERVER: argo.jclee.me
  ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}

jobs:
  # Step 1: Run tests and quality checks
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Run tests and lint in parallel
      run: |
        # Run tests
        pytest -v --cov=src tests/ --tb=short &
        TEST_PID=$!
        
        # Run linting
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics &
        LINT_PID=$!
        
        # Security scan for hardcoded credentials
        grep -r -E "(password|secret|key|token)\\s*=\\s*['\"][^'\"]*['\"]" --include="*.py" src/ || true &
        SCAN_PID=$!
        
        # Wait for all to complete
        wait $TEST_PID && wait $LINT_PID && wait $SCAN_PID

  # Step 2: Build and push to NAS registry
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 20
    outputs:
      image-tag: ${{ steps.tag.outputs.tag }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Generate version tag and timestamp
      id: tag
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.version }}"
        else
          TAG="v$(date +'%Y%m%d.%H%M%S')-${GITHUB_SHA::8}"
        fi
        TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Private Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./deployment/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
        labels: |
          org.opencontainers.image.version=${{ steps.tag.outputs.tag }}
          org.opencontainers.image.created=${{ steps.tag.outputs.timestamp }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
    
    - name: Export Docker image for offline use
      run: |
        echo "📦 Exporting Docker image for offline deployment..."
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
        docker save -o blacklist-${{ steps.tag.outputs.tag }}.tar \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
        gzip blacklist-${{ steps.tag.outputs.tag }}.tar
        echo "✅ Docker image exported: blacklist-${{ steps.tag.outputs.tag }}.tar.gz"
    
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-${{ steps.tag.outputs.tag }}
        path: blacklist-${{ steps.tag.outputs.tag }}.tar.gz
        retention-days: 30

  # Step 3: Create offline deployment package
  create-offline-package:
    needs: [build-and-push]
    if: always() && needs.build-and-push.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image-${{ needs.build-and-push.outputs.image-tag }}
        path: ./offline-package/images
    
    - name: Prepare Kubernetes manifests
      run: |
        mkdir -p offline-package/manifests
        cp -r k8s/* offline-package/manifests/
        
        # Update image tag in manifests
        find offline-package/manifests -name "*.yaml" -type f -exec \
          sed -i "s|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:.*|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image-tag }}|g" {} \;
    
    - name: Create simple README
      run: |
        cat > offline-package/README.md << EOF
        # Blacklist Offline Production Deployment Package
        
        Version: ${{ needs.build-and-push.outputs.image-tag }}
        Build Date: $(date +'%Y-%m-%d %H:%M:%S')
        Git Commit: ${{ github.sha }}
        
        ## Quick Deploy
        
        1. Load Docker image:
           \`\`\`
           gunzip -c images/blacklist-*.tar.gz | docker load
           \`\`\`
        
        2. Deploy to Kubernetes:
           \`\`\`
           kubectl apply -k manifests/
           \`\`\`
        EOF
    
    - name: Create offline deployment package
      run: |
        cd offline-package
        tar -czf ../blacklist-offline-${{ needs.build-and-push.outputs.image-tag }}.tar.gz .
        cd ..
        sha256sum blacklist-offline-*.tar.gz > checksums.txt
        echo "📦 Offline package created successfully"
        ls -lh blacklist-offline-*.tar.gz
    
    - name: Upload offline package as release
      uses: actions/upload-artifact@v4
      with:
        name: offline-deployment-package-${{ needs.build-and-push.outputs.image-tag }}
        path: |
          blacklist-offline-${{ needs.build-and-push.outputs.image-tag }}.tar.gz
          checksums.txt
        retention-days: 90

  # Step 4: Create GitHub Release
  create-release:
    needs: [build-and-push, create-offline-package]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download offline package
      uses: actions/download-artifact@v4
      with:
        name: offline-deployment-package-${{ needs.build-and-push.outputs.image-tag }}
        path: ./release-assets
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build-and-push.outputs.image-tag }}
        name: Release ${{ needs.build-and-push.outputs.image-tag }}
        body: |
          ## 🚀 Blacklist Application Release
          
          **Version**: ${{ needs.build-and-push.outputs.image-tag }}
          **Type**: Production Release (Offline Package Included)
          
          ### 📦 Deployment Options
          
          1. **Offline Production**: Download the offline package below
          2. **Online Staging**: Use ArgoCD for staging deployment
          
          ### 🔄 Changes
          - Docker image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image-tag }}`
          - Git commit: ${{ github.sha }}
          
          ---
          *Generated by CI/CD Pipeline*
        draft: false
        prerelease: false
        files: |
          ./release-assets/blacklist-offline-${{ needs.build-and-push.outputs.image-tag }}.tar.gz
          ./release-assets/checksums.txt

  # Step 5: Notify completion
  notify:
    needs: [test, build-and-push, create-offline-package, create-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Send deployment summary
      run: |
        echo "📊 Offline Production CI/CD Pipeline Summary"
        echo "=========================================="
        echo "  - Tests: ${{ needs.test.result }}"
        echo "  - Build & Push: ${{ needs.build-and-push.result }}"
        echo "  - Offline Package: ${{ needs.create-offline-package.result }}"
        echo "  - GitHub Release: ${{ needs.create-release.result }}"
        echo ""
        
        if [ "${{ needs.create-release.result }}" == "success" ]; then
          echo "✅ Pipeline completed successfully!"
          echo "📦 Offline deployment package is ready"
          echo "📥 Download package from GitHub Releases"
        else
          echo "❌ Pipeline failed!"
          echo "Check the logs for details"
        fi

  # Create issue on failure
  create-issue-on-failure:
    needs: [test, build-and-push, create-offline-package, create-release, notify]
    if: |
      always() && 
      (needs.test.result == 'failure' || 
       needs.build-and-push.result == 'failure' || 
       needs.create-offline-package.result == 'failure' ||
       needs.create-release.result == 'failure')
    uses: ./.github/workflows/create-issue-on-failure.yml
    with:
      workflow_name: "Offline Production CI/CD Pipeline"
      run_id: ${{ github.run_id }}
      run_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      failed_jobs: '[{"name": "test", "result": "${{ needs.test.result }}"}, {"name": "build-and-push", "result": "${{ needs.build-and-push.result }}"}, {"name": "create-offline-package", "result": "${{ needs.create-offline-package.result }}"}, {"name": "create-release", "result": "${{ needs.create-release.result }}"}]'