name: Scheduled Data Collection

on:
  schedule:
    # 매일 오전 2시 (KST 11시)에 실행
    - cron: '0 17 * * *'
  workflow_dispatch:
    inputs:
      sources:
        description: 'Collection sources (comma-separated: regtech,secudium)'
        required: false
        default: 'regtech,secudium'

env:
  DEPLOY_HOST: registry.jclee.me
  DEPLOY_PORT: 1112

jobs:
  collect-data:
    runs-on: ubuntu-latest
    
    steps:
      - name: Trigger collection on production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          script: |
            # 수집 스크립트 실행
            cd /home/docker/blacklist
            
            # 수집 소스 결정
            SOURCES="${{ github.event.inputs.sources || 'regtech,secudium' }}"
            
            # 수집 활성화 상태 확인
            COLLECTION_STATUS=$(docker exec blacklist-app-1 curl -s http://localhost:2541/api/collection/status | jq -r '.enabled')
            
            if [ "$COLLECTION_STATUS" != "true" ]; then
              echo "Collection is disabled. Enabling..."
              docker exec blacklist-app-1 curl -X POST http://localhost:2541/api/collection/enable
              sleep 5
            fi
            
            # 각 소스에 대해 수집 트리거
            IFS=',' read -ra SOURCE_ARRAY <<< "$SOURCES"
            for source in "${SOURCE_ARRAY[@]}"; do
              echo "Triggering $source collection..."
              docker exec blacklist-app-1 curl -X POST http://localhost:2541/api/collection/$source/trigger
              
              # 수집 완료 대기 (최대 10분)
              COUNTER=0
              while [ $COUNTER -lt 60 ]; do
                STATUS=$(docker exec blacklist-app-1 curl -s http://localhost:2541/api/collection/status | jq -r ".sources.$source.running")
                if [ "$STATUS" != "true" ]; then
                  echo "$source collection completed"
                  break
                fi
                sleep 10
                COUNTER=$((COUNTER+1))
              done
            done
            
            # 수집 결과 확인
            docker exec blacklist-app-1 curl -s http://localhost:2541/api/stats | jq '.'

      - name: Check collection results
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          script: |
            cd /home/docker/blacklist
            
            # 수집 로그 확인
            echo "=== Recent collection logs ==="
            docker logs blacklist-app-1 --since 30m 2>&1 | grep -E "(Collection|REGTECH|SECUDIUM)" | tail -50
            
            # 통계 정보
            echo "=== Collection statistics ==="
            docker exec blacklist-app-1 curl -s http://localhost:2541/api/v2/analytics/summary | jq '.'

      - name: Log collection status
        if: always()
        run: |
          echo "Scheduled collection ${{ job.status }}"
          echo "Sources: ${{ github.event.inputs.sources || 'regtech,secudium' }}"
          echo "Time: $(date)"

  backup-data:
    runs-on: ubuntu-latest
    needs: collect-data
    if: success()
    
    steps:
      - name: Backup collected data
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          script: |
            cd /home/docker/blacklist
            
            # 백업 디렉토리 생성
            BACKUP_DIR="/backup/blacklist/$(date +%Y%m%d_%H%M%S)"
            mkdir -p $BACKUP_DIR
            
            # 데이터베이스 백업
            docker exec blacklist-app-1 sqlite3 /app/instance/blacklist.db ".backup /tmp/blacklist_backup.db"
            docker cp blacklist-app-1:/tmp/blacklist_backup.db $BACKUP_DIR/
            
            # 수집 로그 백업
            docker logs blacklist-app-1 --since 24h > $BACKUP_DIR/collection_logs.txt
            
            # 통계 정보 저장
            docker exec blacklist-app-1 curl -s http://localhost:2541/api/v2/analytics/export > $BACKUP_DIR/statistics.csv
            
            # 백업 압축
            tar -czf $BACKUP_DIR.tar.gz -C $(dirname $BACKUP_DIR) $(basename $BACKUP_DIR)
            rm -rf $BACKUP_DIR
            
            # 오래된 백업 정리 (30일 이상)
            find /backup/blacklist -name "*.tar.gz" -mtime +30 -delete
            
            echo "Backup completed: $BACKUP_DIR.tar.gz"