name: Security Scan

on:
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM
  workflow_dispatch:
  pull_request:
    paths:
      - 'requirements.txt'
      - 'deployment/Dockerfile'
      - '**/*.py'

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit pip-audit
          
      - name: Run Safety Check
        run: |
          echo "🔒 Scanning Python dependencies for vulnerabilities..."
          pip install -r requirements.txt
          safety check --json --output safety-report.json || true
          
      - name: Run pip-audit
        run: |
          echo "🔍 Running pip-audit..."
          pip-audit --desc --format json --output pip-audit-report.json || true
          
      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            safety-report.json
            pip-audit-report.json
            
  # Static code analysis
  code-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Run Bandit Security Scan
        run: |
          pip install bandit
          echo "🔐 Running Bandit security scan..."
          bandit -r src/ -f json -o bandit-report.json -ll || true
          
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/owasp-top-ten
            
      - name: Upload Code Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: code-scan-reports
          path: |
            bandit-report.json
            
  # Container image scanning
  container-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Private Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          
      - name: Build Image for Scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/Dockerfile
          push: false
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:scan
          
      - name: Run Trivy Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:scan
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Run Grype Scanner
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:scan
          fail-build: false
          output-format: sarif
          
      - name: Upload Container Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
  # SAST with CodeQL
  codeql:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'python'
          queries: security-and-quality
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        
  # License compliance check
  license-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Check License Compliance
        run: |
          pip install pip-licenses
          pip install -r requirements.txt
          echo "📜 Checking license compliance..."
          pip-licenses --format=json --output-file=licenses.json
          
          # Check for restrictive licenses
          python3 << 'EOF'
          import json
          
          with open('licenses.json', 'r') as f:
              licenses = json.load(f)
              
          restrictive = ['GPL', 'AGPL', 'LGPL']
          found_restrictive = []
          
          for pkg in licenses:
              license_name = pkg.get('License', '')
              if any(r in license_name for r in restrictive):
                  found_restrictive.append(f"{pkg['Name']}: {license_name}")
                  
          if found_restrictive:
              print("⚠️ Found potentially restrictive licenses:")
              for lic in found_restrictive:
                  print(f"  - {lic}")
          else:
              print("✅ No restrictive licenses found")
          EOF
          
      - name: Upload License Report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json
          
  # Security report summary
  security-summary:
    needs: [dependency-scan, code-scan, container-scan, codeql, license-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate Security Summary
        run: |
          echo "## Security Scan Summary 🔒" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Scan | ${{ needs.code-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Scan | ${{ needs.container-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Parse and display vulnerabilities if any
          if [ -f "dependency-reports/safety-report.json" ]; then
              echo "### Dependency Vulnerabilities" >> $GITHUB_STEP_SUMMARY
              python3 -c "
import json
try:
    with open('dependency-reports/safety-report.json', 'r') as f:
        data = json.load(f)
        if data:
            print('Found', len(data), 'vulnerabilities')
        else:
            print('✅ No vulnerabilities found')
except:
    print('Unable to parse safety report')
              " >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📅 Scan completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY