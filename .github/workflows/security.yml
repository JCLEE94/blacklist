name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: jclee94/blacklist

jobs:
  dependency-check:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep

    - name: Python Safety Check
      run: |
        safety check --json --output safety-report.json || true
        safety check || echo "Safety check found vulnerabilities"

    - name: Bandit Security Linter
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -ll

    - name: Semgrep Static Analysis
      run: |
        semgrep --config=auto src/ --json --output semgrep-report.json || true
        semgrep --config=auto src/

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image for scanning
      run: |
        docker build -t blacklist-security-scan:latest .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'blacklist-security-scan:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy with table output
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'blacklist-security-scan:latest'
        format: 'table'

    - name: Docker Scout vulnerability scan
      uses: docker/scout-action@v1
      with:
        command: cves
        image: blacklist-security-scan:latest
        sarif-file: scout-results.sarif

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

    - name: GitLeaks scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check Dockerfile best practices
      run: |
        # Check for non-root user
        if grep -q "USER" Dockerfile; then
          echo "✅ Dockerfile uses non-root user"
        else
          echo "❌ Dockerfile should use non-root user"
          exit 1
        fi

        # Check for health check
        if grep -q "HEALTHCHECK" Dockerfile; then
          echo "✅ Dockerfile includes health check"
        else
          echo "❌ Dockerfile should include health check"
          exit 1
        fi

        # Check for minimal base image
        if grep -q "slim\|alpine" Dockerfile; then
          echo "✅ Dockerfile uses minimal base image"
        else
          echo "⚠️ Consider using a minimal base image"
        fi

    - name: Check security configurations
      run: |
        # Check for security environment variables in docker-compose
        if [ -f "docker-compose.yml" ]; then
          if grep -q "FORCE_DISABLE_COLLECTION" docker-compose.yml; then
            echo "✅ Security configuration present"
          else
            echo "⚠️ Consider adding security configurations"
          fi
        fi

        # Check for secrets in code
        if find . -name "*.py" -exec grep -l "password\|secret\|key" {} \; | grep -v "__pycache__" | head -1; then
          echo "⚠️ Potential hardcoded secrets found - review manually"
        else
          echo "✅ No obvious hardcoded secrets found"
        fi

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-check, container-scan, secrets-scan, compliance-check]
    if: always()

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: security-reports
      continue-on-error: true

    - name: Generate security summary
      run: |
        echo "# 🛡️ Security Scan Summary" > security-summary.md
        echo "Date: $(date)" >> security-summary.md
        echo "" >> security-summary.md

        echo "## Scan Results" >> security-summary.md
        echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-summary.md
        echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-summary.md
        echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-summary.md
        echo "- Compliance Check: ${{ needs.compliance-check.result }}" >> security-summary.md
        echo "" >> security-summary.md

        if [ -f "safety-report.json" ]; then
          echo "## Dependency Vulnerabilities" >> security-summary.md
          python3 -c "
import json
try:
    with open('safety-report.json', 'r') as f:
        data = json.load(f)
    if data and len(data) > 0:
        print(f'Found {len(data)} vulnerabilities')
        for vuln in data[:5]:  # Show first 5
            print(f'- {vuln.get(\"vulnerability_id\", \"Unknown\")}: {vuln.get(\"advisory\", \"No description\")[:100]}...')
    else:
        print('No vulnerabilities found')
except:
    print('Could not parse safety report')
          " >> security-summary.md
        fi

        echo "" >> security-summary.md
        echo "## Recommendations" >> security-summary.md
        echo "- Keep dependencies updated regularly" >> security-summary.md
        echo "- Review and fix any high/critical vulnerabilities" >> security-summary.md
        echo "- Ensure secrets are properly managed" >> security-summary.md
        echo "- Follow Docker security best practices" >> security-summary.md

        cat security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md