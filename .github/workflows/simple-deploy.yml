name: Simple Deploy Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: blacklist

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: Run tests
        run: |
          python -m pytest tests/ -v --tb=short || true
        env:
          FORCE_DISABLE_COLLECTION: true
          COLLECTION_ENABLED: false

  build:
    name: Build and Push Docker
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    name: Deploy Status
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deployment Information
        run: |
          echo "‚úÖ Docker image pushed successfully"
          echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "üè∑Ô∏è Tag: ${{ github.sha }}"
          echo ""
          echo "üìã Next steps for ArgoCD deployment:"
          echo "1. kubectl apply -f k8s/manifests/00-argocd-app.yaml"
          echo "2. argocd app sync blacklist"
          echo ""
          echo "üê≥ For Docker deployment:"
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "docker-compose up -d"