stages:
  - build
  - test
  - stop_existing
  - deploy
  - verify

variables:
  REGISTRY_URL: "192.168.50.215:1234"
  DEPLOY_HOST: "192.168.50.215"
  DEPLOY_PORT: "1111"
  DEPLOY_USER: "docker"
  DOCKER_PATH: "/usr/local/bin/docker"
  DOCKER_COMPOSE_PATH: "/usr/local/bin/docker-compose"
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  PROJECT_PORT: "2541"

# Build stage - 컨테이너 이미지 빌드
build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - export TZ=Asia/Seoul
    - export BUILD_TIME=$(date +"%Y-%m-%d %H:%M:%S KST")
    - echo "Building image for project $CI_PROJECT_NAME at $BUILD_TIME"
  script:
    - docker build --pull --build-arg BUILD_TIME="$BUILD_TIME" -t $CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA .
    - docker tag $CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA $REGISTRY_URL/$CI_PROJECT_NAME:latest
    - docker tag $CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA $REGISTRY_URL/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA
    - docker push $REGISTRY_URL/$CI_PROJECT_NAME:latest
    - docker push $REGISTRY_URL/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA
    - echo "✅ Image built and pushed successfully"
  only:
    - main
    - develop
  tags:
    - docker

# Test stage - 컨테이너 기능 테스트
test:
  stage: test
  image: $REGISTRY_URL/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA
  services:
    - name: redis:7-alpine
      alias: redis
  variables:
    REDIS_URL: "redis://redis:6379/0"
    FLASK_ENV: "testing"
    PORT: "2541"
  script:
    - echo "🧪 Starting application tests..."
    - python3 -c "import src.core.minimal_app; print('✅ Module import test passed')"
    - python3 -c "from src.core.minimal_app import create_minimal_app; app = create_minimal_app(); print('✅ App creation test passed')"
    - echo "🔌 Testing Redis connection..."
    - python3 -c "import redis; r = redis.Redis.from_url('redis://redis:6379/0'); r.ping(); print('✅ Redis connection test passed')"
    - echo "📊 Testing database operations..."
    - python3 -c "
      import sqlite3
      conn = sqlite3.connect(':memory:')
      cursor = conn.cursor()
      cursor.execute('CREATE TABLE test (id INTEGER)')
      cursor.execute('INSERT INTO test VALUES (1)')
      result = cursor.fetchone()
      conn.close()
      print('✅ Database operations test passed')
      "
    - echo "✅ All tests completed successfully"
  only:
    - main
    - develop
  tags:
    - docker

# Stop existing containers
stop_existing:
  stage: stop_existing
  image: alpine:latest
  dependencies:
    - build
    - test
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d | ssh-add -
    - ssh-keyscan -p $DEPLOY_PORT -H $DEPLOY_HOST >> ~/.ssh/known_hosts
  script:
    - |
      echo "🛑 Stopping existing containers for $CI_PROJECT_NAME..."
      ssh -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST "
        cd ~/app/$CI_PROJECT_NAME 2>/dev/null || true
        if [ -f docker-compose.yml ]; then
          echo '🔄 Found existing deployment, stopping containers...'
          $DOCKER_COMPOSE_PATH down --remove-orphans || true
          $DOCKER_COMPOSE_PATH rm -f || true
          echo '✅ Existing containers stopped and removed'
        else
          echo '📋 No existing deployment found'
        fi
        
        # Clean up any orphaned containers
        $DOCKER_PATH ps -a | grep '$CI_PROJECT_NAME' | awk '{print \$1}' | xargs -r $DOCKER_PATH rm -f || true
        echo '🧹 Cleanup completed'
      "
  allow_failure: true
  only:
    - main
    - develop
  tags:
    - shell

# Deploy stage - 새 컨테이너 배포
deploy:
  stage: deploy
  image: alpine:latest
  dependencies:
    - stop_existing
  before_script:
    - apk add --no-cache openssh-client rsync
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d | ssh-add -
    - ssh-keyscan -p $DEPLOY_PORT -H $DEPLOY_HOST >> ~/.ssh/known_hosts
  script:
    - |
      echo "🚀 Deploying $CI_PROJECT_NAME to production..."
      
      # Create deployment directory
      ssh -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST "mkdir -p ~/app/$CI_PROJECT_NAME"
      
      # Copy deployment files
      echo "📤 Copying deployment files..."
      scp -P $DEPLOY_PORT docker-compose.yml $DEPLOY_USER@$DEPLOY_HOST:~/app/$CI_PROJECT_NAME/
      
      # Deploy with Docker Compose
      ssh -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST "
        cd ~/app/$CI_PROJECT_NAME
        export CI_PROJECT_NAME='$CI_PROJECT_NAME'
        export BUILD_TIME='$(date \"+%Y-%m-%d %H:%M:%S KST\")'
        
        echo '🔄 Pulling latest images...'
        $DOCKER_COMPOSE_PATH pull
        
        echo '🚀 Starting new deployment...'
        $DOCKER_COMPOSE_PATH up -d --force-recreate
        
        echo '⏳ Waiting for services to start...'
        sleep 15
        
        echo '📋 Container status:'
        $DOCKER_COMPOSE_PATH ps
        
        echo '📋 Container resource usage:'
        $DOCKER_PATH stats --no-stream --format 'table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}'
        
        echo '✅ Deployment completed'
      "
  environment:
    name: production
    url: http://192.168.50.215:2541
  only:
    - main
    - develop
  tags:
    - shell

# Verify deployment - 배포 검증
verify:
  stage: verify
  image: alpine:latest
  dependencies:
    - deploy
  before_script:
    - apk add --no-cache curl openssh-client jq
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d | ssh-add -
    - ssh-keyscan -p $DEPLOY_PORT -H $DEPLOY_HOST >> ~/.ssh/known_hosts
  script:
    - |
      echo "🔍 Verifying deployment of $CI_PROJECT_NAME..."
      
      # Wait for application to be ready
      echo "⏳ Waiting for application startup..."
      sleep 30
      
      # Check container status
      echo "📋 Checking container status..."
      ssh -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST "
        cd ~/app/$CI_PROJECT_NAME
        echo '=== Container Status ==='
        $DOCKER_COMPOSE_PATH ps
        
        echo -e '\n=== Container Health ==='
        $DOCKER_COMPOSE_PATH ps --format table
        
        echo -e '\n=== Recent Logs ==='
        $DOCKER_COMPOSE_PATH logs --tail=20 --timestamps
      "
      
      # Health check
      echo "🏥 Performing health checks..."
      HEALTH_URL="http://$DEPLOY_HOST:$PROJECT_PORT/health"
      
      for i in {1..5}; do
        echo "🔄 Health check attempt $i/5..."
        if curl -f -s "$HEALTH_URL" > /tmp/health_response.json; then
          echo "✅ Health check passed!"
          echo "📊 Health response:"
          cat /tmp/health_response.json | jq . || cat /tmp/health_response.json
          break
        else
          echo "❌ Health check failed (attempt $i/5)"
          if [ $i -eq 5 ]; then
            echo "🚨 All health checks failed!"
            echo "📋 Debug information:"
            ssh -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST "
              cd ~/app/$CI_PROJECT_NAME
              echo '=== Container Status ==='
              $DOCKER_COMPOSE_PATH ps
              echo -e '\n=== Error Logs ==='
              $DOCKER_COMPOSE_PATH logs --tail=50 | grep -iE 'error|failed|exception|fatal' || echo 'No obvious errors found'
            "
            exit 1
          fi
        fi
        sleep 10
      done
      
      # Final verification
      echo "🎯 Final verification complete!"
      echo "🌐 Application URL: http://$DEPLOY_HOST:$PROJECT_PORT"
      echo "✅ Deployment successfully verified!"
  only:
    - main
    - develop
  tags:
    - shell

# Performance monitoring (optional stage)
monitor:
  stage: verify
  image: alpine:latest
  script:
    - apk add --no-cache curl
    - echo "📊 Performance monitoring started..."
    - |
      for i in {1..3}; do
        echo "🔄 Performance test $i/3..."
        time curl -s http://$DEPLOY_HOST:$PROJECT_PORT/api/stats > /dev/null
        sleep 5
      done
    - echo "✅ Performance monitoring completed"
  allow_failure: true
  only:
    - main
  tags:
    - shell