{
  "project_classification": {
    "primary_type": "Enterprise Security Platform",
    "secondary_types": ["Threat Intelligence System", "API Service", "Infrastructure Platform"],
    "domain": "Cybersecurity & Network Security",
    "complexity_level": "Enterprise-grade",
    "maturity_level": "Production-ready"
  },
  "project_purpose": {
    "main_purpose": "통합 블랙리스트 관리 시스템 - 기업용 위협 인텔리젼스 플랫폼",
    "core_functionality": [
      "Multi-source IP blacklist aggregation (REGTECH, SECUDIUM)",
      "FortiGate External Connector integration",
      "Real-time threat intelligence collection",
      "Dual architecture support (Monolithic & MSA)",
      "GitOps-based deployment via ArgoCD",
      "Enterprise security controls with lockout protection"
    ],
    "business_value": "Automated threat prevention and network security management",
    "target_users": "Enterprise security teams, network administrators, SOC analysts"
  },
  "architecture_analysis": {
    "architecture_pattern": "Modular Monolith with MSA Support",
    "deployment_strategy": "GitOps with ArgoCD",
    "scalability_approach": "Horizontal scaling ready",
    "security_stance": "Security-first (external auth blocked by default)",
    "entry_points": [
      "main.py → src/core/app_compact.py (primary)",
      "services/api-gateway/app.py (MSA mode)"
    ],
    "key_patterns": [
      "Dependency Injection via container.py",
      "Mixin-based service architecture",
      "Blueprint-based route modularization",
      "Fallback chain for resilience",
      "Cache-first with Redis/memory fallback"
    ]
  },
  "technology_stack": {
    "primary_language": "Python 3",
    "framework": "Flask 2.3.3",
    "database": "SQLite (dev) / PostgreSQL (prod)",
    "cache": "Redis with memory fallback",
    "frontend": "HTML/CSS/JS with modern design system",
    "deployment": {
      "containerization": "Docker",
      "orchestration": "Kubernetes",
      "gitops": "ArgoCD",
      "registry": "registry.jclee.me (private)",
      "ci_cd": "GitHub Actions (self-hosted)"
    },
    "infrastructure_services": {
      "docker_registry": "registry.jclee.me",
      "helm_repository": "charts.jclee.me",
      "argocd_dashboard": "argo.jclee.me",
      "kubernetes_api": "k8s.jclee.me"
    },
    "key_dependencies": [
      "Flask-CORS, Flask-Compress, Flask-Caching",
      "SQLAlchemy 2.0.41",
      "Redis 4.6.0",
      "Pandas, BeautifulSoup4, Requests",
      "Gunicorn (production server)"
    ]
  },
  "code_quality_analysis": {
    "adherence_to_500_line_rule": "EXCELLENT - All files under 500 lines",
    "largest_files": [
      "src/core/routes/api_routes.py (498 lines)",
      "src/core/blacklist_unified/data_service.py (481 lines)",
      "src/core/data_pipeline.py (476 lines)",
      "src/utils/structured_logging.py (470 lines)"
    ],
    "modularization_status": "POST-REFACTORING - Successfully modularized",
    "architectural_patterns": [
      "Service mixins (CollectionServiceMixin, StatisticsServiceMixin)",
      "Route blueprints (web_routes.py, api_routes.py, etc.)",
      "Dependency injection container pattern",
      "Factory pattern for service creation"
    ],
    "backwards_compatibility": "MAINTAINED - Wrapper modules preserve import paths"
  },
  "security_analysis": {
    "security_posture": "DEFENSIVE - Default deny for external auth",
    "key_security_features": [
      "FORCE_DISABLE_COLLECTION=true (blocks external auth)",
      "COLLECTION_ENABLED=false (collection disabled by default)",
      "RESTART_PROTECTION=true (prevents infinite restarts)",
      "Server lockout prevention mechanisms"
    ],
    "credential_management": "Kubernetes secrets + environment variables",
    "authentication_sources": "REGTECH, SECUDIUM (blocked by default)",
    "security_warnings": "Built-in warnings for unsafe configurations"
  },
  "development_workflow": {
    "testing_strategy": "Comprehensive - Unit, Integration, E2E, Performance",
    "ci_cd_maturity": "Advanced - GitOps with ArgoCD auto-sync",
    "deployment_environments": ["Development", "Staging", "Production"],
    "code_quality_tools": ["black", "isort", "flake8", "bandit", "pytest"],
    "monitoring": "Prometheus + Grafana integration ready"
  },
  "user_intent_analysis": {
    "detected_preferences": {
      "language": "Korean (project comments and documentation)",
      "automation_level": "High (comprehensive scripts and GitOps)",
      "quality_focus": "Very High (500-line rule, modular architecture)",
      "infrastructure_maturity": "Enterprise-level (private registry, multi-cluster)"
    },
    "workflow_patterns": [
      "GitOps-first deployment approach",
      "Security-conscious development (default deny)",
      "Comprehensive testing and validation",
      "Modular architecture with backwards compatibility"
    ]
  },
  "claude_code_integration": {
    "slash_commands_support": "Ready for implementation",
    "suggested_commands": {
      "/정리": "Code cleanup and formatting (cleaner-code-quality agent)",
      "/테스트": "Test execution and coverage (runner-test-automation agent)",
      "/분석": "Project analysis and health check (analyzer-project-state agent)",
      "/배포": "GitOps deployment management (specialist-deployment-infra agent)",
      "/커밋": "Smart commit generation (specialist-github-cicd agent)"
    },
    "mcp_integration_ready": true,
    "task_management_patterns": "TodoWrite for multi-step operations"
  },
  "optimization_opportunities": {
    "immediate": [
      "Implement Claude Code slash commands",
      "Add performance monitoring dashboards",
      "Enhance error recovery mechanisms"
    ],
    "medium_term": [
      "Implement advanced caching strategies",
      "Add ML-based threat scoring",
      "Enhance MSA service discovery"
    ],
    "long_term": [
      "Multi-region deployment support",
      "Advanced analytics and reporting",
      "Integration with additional threat intelligence sources"
    ]
  },
  "workflow_recommendations": {
    "development": "Use /정리 for code cleanup, /테스트 for validation before commits",
    "deployment": "Use /배포 for GitOps deployment, monitor ArgoCD dashboard",
    "maintenance": "Use /분석 for project health checks, /커밋 for smart commits",
    "troubleshooting": "Check security configuration, validate database schema, monitor logs"
  }
}