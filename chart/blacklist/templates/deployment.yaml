apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "blacklist.fullname" . }}
  namespace: {{ .Values.namespace | default "blacklist" }}
  labels:
    {{- include "blacklist.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "blacklist.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "blacklist.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "blacklist.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: {{ .Values.startupProbe.path }}
              port: http
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
          env:
            {{- range .Values.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
            - name: FORCE_DISABLE_COLLECTION
              value: {{ .Values.security.forceDisableCollection | quote }}
            - name: COLLECTION_ENABLED
              value: {{ .Values.collection.enabled | quote }}
            - name: REGTECH_USERNAME
              valueFrom:
                secretKeyRef:
                  name: blacklist-credentials
                  key: regtech-username
            - name: REGTECH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: blacklist-credentials
                  key: regtech-password
            - name: SECUDIUM_USERNAME
              valueFrom:
                secretKeyRef:
                  name: blacklist-credentials
                  key: secudium-username
            - name: SECUDIUM_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: blacklist-credentials
                  key: secudium-password
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: blacklist-credentials
                  key: secret-key
                  optional: true
            - name: JWT_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: blacklist-credentials
                  key: jwt-secret-key
                  optional: true
            - name: API_KEY_ENABLED
              value: "true"
            - name: JWT_ENABLED
              value: "true"
          volumeMounts:
            {{- if .Values.persistence.data.enabled }}
            - name: data
              mountPath: /app/instance
            {{- end }}
            {{- if .Values.persistence.logs.enabled }}
            - name: logs
              mountPath: /app/logs
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        {{- if .Values.persistence.data.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "blacklist.fullname" . }}-data
        {{- end }}
        {{- if .Values.persistence.logs.enabled }}
        - name: logs
          persistentVolumeClaim:
            claimName: {{ include "blacklist.fullname" . }}-logs
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}