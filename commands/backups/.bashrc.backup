# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Source claude_aliases automatically
if [ -f ~/app/tmux/claude_aliases ]; then
    source ~/app/tmux/claude_aliases
    # tmux 세션에서 확인메시지 (첫 로드시에만)
    if [ -n "$TMUX" ] && [ -z "$CLAUDE_ALIASES_LOADED" ]; then
        echo "Claude aliases loaded ✅"
        export CLAUDE_ALIASES_LOADED=1
    fi
fi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
if [ -f "$HOME/.claude_aliases" ]; then
    . "$HOME/.claude_aliases"
fi

. "$HOME/.local/bin/env"
ARGOCD_AUTH_TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhcmdvY2QiLCJzdWIiOiJhZG1pbjphcGlLZXkiLCJuYmYiOjE3NTE2OTkwMzYsImlhdCI6MTc1MTY5OTAzNiwianRpIjoiOTI0Nzk1ZjctNzYyMC00NTRlLTk4Y2EtNTEzNDBlMmU3YjJlIn0.vAoAGRs1n5DSZL-IZLmo9r2vGnDcChN5xvScEpC_4U4
export PATH="$HOME/.local/bin:$PATH"

export PATH="/home/jclee/.local/bin:$PATH"
# Load environment variables
if [ -f .env ]; then
    export $(grep -v '^#' .env  < /dev/null |  xargs)
    echo "✅ Environment variables loaded from .env"
fi
PRODUCTION_URL=https://safework.jclee.me
PRODUCTION_NODEPORT_URL=http://192.168.50.110:32301
export PRODUCTION_NODEPORT_URL='http://192.168.49.2:32301'


alias claude="/home/jclee/.claude/local/claude"
export PATH="$HOME/bin:$PATH"
alias mosh='~/bin/mosh-wrapper'

# Korean locale
export LANG=ko_KR.UTF-8
export LC_ALL=ko_KR.UTF-8

# tmux environment variables
if [ -n "$TMUX" ]; then
    # tmux 세션 내에서 실행 중일 때 환경변수 동기화
    function tmux_update_env() {
        eval $(tmux show-environment -s 2>/dev/null)
    }
    # 프롬프트 표시 전에 환경변수 업데이트
    if [[ -n "$ZSH_VERSION" ]]; then
        precmd_functions+=( tmux_update_env )
    else
        PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND; }tmux_update_env"
    fi
fi

# Korean input environment
export LANG=ko_KR.UTF-8
export LC_ALL=ko_KR.UTF-8
export LC_CTYPE=ko_KR.UTF-8

# Input method settings
export XMODIFIERS=@im=fcitx
export GTK_IM_MODULE=fcitx
export QT_IM_MODULE=fcitx
export DefaultIMModule=fcitx

# Fix for terminal Korean input
stty -ixon  # Disable XON/XOFF flow control
# Claude Code 메모리 최적화 설정
export NODE_OPTIONS="--max-old-space-size=8192"
alias load-claude="source /home/jclee/app/tmux/load-claude-aliases.sh"
