# Optimized Multi-stage Dockerfile for Blacklist System
# Build arguments
ARG PYTHON_VERSION=3.9
ARG BUILD_DATE
ARG GIT_COMMIT

# Stage 1: Dependencies builder
FROM python:${PYTHON_VERSION}-slim AS deps

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Copy and install requirements
WORKDIR /deps
COPY requirements.txt .
RUN pip install --upgrade pip && \
    pip install --user --no-cache-dir -r requirements.txt

# Stage 2: Production image
FROM python:${PYTHON_VERSION}-slim AS production

# Metadata
LABEL maintainer="blacklist-team" \
      version="1.0" \
      description="Blacklist Management System" \
      build.date="${BUILD_DATE}" \
      git.commit="${GIT_COMMIT}"

# Environment
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app \
    TZ=Asia/Seoul \
    PORT=8541

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    tzdata \
    && rm -rf /var/lib/apt/lists/* \
    && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \
    && echo $TZ > /etc/timezone

# Create non-root user
RUN groupadd -r app && useradd -r -g app -m -s /bin/bash app

# Copy Python packages from deps stage
COPY --from=deps /root/.local /home/app/.local
ENV PATH=/home/app/.local/bin:$PATH

# Setup application directory
WORKDIR /app

# Copy application files
COPY --chown=app:app . .

# Create required directories
RUN mkdir -p instance logs data && \
    chown -R app:app /app && \
    chmod -R 755 /app

# Switch to non-root user
USER app

# Create startup script
RUN echo '#!/bin/bash\n\
set -e\n\
echo "🚀 Starting Blacklist Management System..."\n\
echo "📅 Build Date: ${BUILD_DATE:-unknown}"\n\
echo "🔧 Git Commit: ${GIT_COMMIT:-unknown}"\n\
echo "🌍 Environment: ${ENVIRONMENT:-production}"\n\
echo "🔢 Port: ${PORT}"\n\
\n\
# Initialize database if needed\n\
if [ ! -f instance/blacklist.db ]; then\n\
    echo "🗄️ Initializing database..."\n\
    python3 init_database.py\n\
fi\n\
\n\
# Start application\n\
if [ "$ENVIRONMENT" = "development" ]; then\n\
    echo "🔧 Running in development mode..."\n\
    python3 main.py --port ${PORT} --debug\n\
else\n\
    echo "🏭 Running in production mode..."\n\
    exec gunicorn -w ${WORKERS:-4} \\\n\
        -b 0.0.0.0:${PORT} \\\n\
        --timeout ${TIMEOUT:-120} \\\n\
        --access-logfile - \\\n\
        --error-logfile - \\\n\
        --log-level ${LOG_LEVEL:-info} \\\n\
        main:application\n\
fi' > startup.sh && chmod +x startup.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Expose port
EXPOSE ${PORT}

# Start application
ENTRYPOINT ["./startup.sh"]