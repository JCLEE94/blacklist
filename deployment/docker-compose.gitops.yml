version: '3.8'

# GitOps Multi-Environment Deployment Simulation
# This simulates production, staging, and development environments

services:
  # Production Environment
  blacklist-production:
    image: blacklist:latest
    container_name: blacklist-production
    ports:
      - "2541:2541"  # Production port
    environment:
      - NODE_ENV=production
      - FLASK_ENV=production
      - PORT=2541
      - LOG_LEVEL=warning
      - COLLECTION_ENABLED=true
      - REDIS_URL=redis://redis-production:6379/0
      - SECRET_KEY=prod-secret-$(openssl rand -hex 16)
      - SECURE_COOKIES=true
      - GUNICORN_WORKERS=4
      - GUNICORN_THREADS=2
    volumes:
      - blacklist-production-data:/app/instance
      - blacklist-production-logs:/app/logs
    restart: unless-stopped
    depends_on:
      - redis-production
    networks:
      - production-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2541/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis-production:
    image: redis:7-alpine
    container_name: redis-production
    ports:
      - "6379:6379"
    volumes:
      - redis-production-data:/data
    restart: unless-stopped
    networks:
      - production-network
    command: redis-server --appendonly yes --requirepass prod-redis-password

  # Staging Environment
  blacklist-staging:
    image: blacklist:latest
    container_name: blacklist-staging
    ports:
      - "8542:8542"  # Staging port
    environment:
      - NODE_ENV=staging
      - FLASK_ENV=staging
      - PORT=8542
      - LOG_LEVEL=info
      - COLLECTION_ENABLED=false  # Disabled in staging
      - REDIS_URL=redis://redis-staging:6379/0
      - SECRET_KEY=staging-secret-$(openssl rand -hex 16)
      - SECURE_COOKIES=false
      - GUNICORN_WORKERS=2
      - GUNICORN_THREADS=1
    volumes:
      - blacklist-staging-data:/app/instance
      - blacklist-staging-logs:/app/logs
    restart: unless-stopped
    depends_on:
      - redis-staging
    networks:
      - staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8542/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis-staging:
    image: redis:7-alpine
    container_name: redis-staging
    ports:
      - "6380:6379"
    volumes:
      - redis-staging-data:/data
    restart: unless-stopped
    networks:
      - staging-network
    command: redis-server --appendonly yes --requirepass staging-redis-password

  # Development Environment
  blacklist-development:
    image: blacklist:latest
    container_name: blacklist-development
    ports:
      - "8543:8543"  # Development port
    environment:
      - NODE_ENV=development
      - FLASK_ENV=development
      - PORT=8543
      - LOG_LEVEL=debug
      - COLLECTION_ENABLED=false  # Disabled in development
      - REDIS_URL=redis://redis-development:6379/0
      - SECRET_KEY=dev-secret-key-not-for-production
      - SECURE_COOKIES=false
      - GUNICORN_WORKERS=1
      - GUNICORN_THREADS=1
    volumes:
      - blacklist-development-data:/app/instance
      - blacklist-development-logs:/app/logs
    restart: unless-stopped
    depends_on:
      - redis-development
    networks:
      - development-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8543/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis-development:
    image: redis:7-alpine
    container_name: redis-development
    ports:
      - "6381:6379"
    volumes:
      - redis-development-data:/data
    restart: unless-stopped
    networks:
      - development-network
    command: redis-server --appendonly yes

  # Monitoring Stack (simulates Prometheus/Grafana)
  prometheus:
    image: prom/prometheus:latest
    container_name: gitops-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - monitoring-network
      - production-network
      - staging-network
      - development-network

  grafana:
    image: grafana/grafana:latest
    container_name: gitops-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=gitops-admin
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - monitoring-network

  # GitOps Controller Simulation (simulates ArgoCD)
  gitops-controller:
    image: nginx:alpine
    container_name: gitops-controller
    ports:
      - "8080:80"
    volumes:
      - ./gitops-dashboard:/usr/share/nginx/html
    restart: unless-stopped
    networks:
      - monitoring-network
    environment:
      - NGINX_HOST=gitops-controller
      - NGINX_PORT=80

volumes:
  # Production volumes
  blacklist-production-data:
    driver: local
  blacklist-production-logs:
    driver: local
  redis-production-data:
    driver: local

  # Staging volumes
  blacklist-staging-data:
    driver: local
  blacklist-staging-logs:
    driver: local
  redis-staging-data:
    driver: local

  # Development volumes
  blacklist-development-data:
    driver: local
  blacklist-development-logs:
    driver: local
  redis-development-data:
    driver: local

  # Monitoring volumes
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  production-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  staging-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
  development-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/16