version: '3.8'

services:
  # Main Application
  blacklist:
    image: registry.jclee.me/jclee94/blacklist:latest
    container_name: blacklist
    restart: unless-stopped
    ports:
      - "2541:2541"
    env_file:
      - .env
    environment:
      - FLASK_ENV=production
      - PORT=2541
      - HOST=0.0.0.0
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=sqlite:////app/instance/blacklist.db
      # üî¥ Î≥¥Ïïà Í∏∞Î≥∏ ÏÑ§Ï†ï (Ïô∏Î∂Ä Ïù∏Ï¶ù Ï∞®Îã®)
      - FORCE_DISABLE_COLLECTION=true
      - COLLECTION_ENABLED=false
      - RESTART_PROTECTION=true
      - MAX_AUTH_ATTEMPTS=10
      - BLOCK_DURATION_HOURS=24
    volumes:
      - ./instance:/app/instance
      - ./data:/app/data
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - blacklist-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2541/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: blacklist-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - blacklist-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: blacklist-nginx
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - blacklist
    networks:
      - blacklist-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: blacklist-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - blacklist-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: blacklist-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - blacklist-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log Management - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: blacklist-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - blacklist-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Log Management - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: blacklist-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - blacklist-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  # Log Collection - Filebeat
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: blacklist-filebeat
    user: root
    volumes:
      - ./config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/app:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - blacklist-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  blacklist-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
