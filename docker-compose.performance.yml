# Performance Optimization Override for Blacklist
# Version: v1.0.37
# 고성능 운영 환경을 위한 최적화 설정

version: '3.9'

services:
  blacklist:
    # 성능 최적화 설정
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    
    # 추가 환경 변수 (성능 최적화)
    environment:
      # Python 최적화
      PYTHONOPTIMIZE: 2
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
      
      # Gunicorn 고성능 설정
      GUNICORN_WORKERS: 6
      GUNICORN_THREADS: 4
      GUNICORN_WORKER_CLASS: gthread
      GUNICORN_WORKER_CONNECTIONS: 1000
      GUNICORN_MAX_REQUESTS: 2000
      GUNICORN_MAX_REQUESTS_JITTER: 100
      GUNICORN_PRELOAD_APP: "true"
      GUNICORN_TIMEOUT: 120
      GUNICORN_KEEPALIVE: 10
      
      # 데이터베이스 연결 풀 최적화
      DATABASE_POOL_SIZE: 30
      DATABASE_MAX_OVERFLOW: 60
      DATABASE_POOL_TIMEOUT: 45
      DATABASE_POOL_RECYCLE: 1800
      DATABASE_POOL_PRE_PING: "true"
      
      # 캐시 최적화
      CACHE_DEFAULT_TTL: 600
      CACHE_MAX_ENTRIES: 10000
      
      # 애플리케이션 최적화
      WERKZEUG_RUN_MAIN: "true"
      FLASK_SKIP_DOTENV: 1
    
    # 성능 모니터링을 위한 추가 레이블
    labels:
      - "performance.cpu.limit=2.0"
      - "performance.memory.limit=2G"
      - "performance.optimized=true"

  redis:
    # Redis 성능 최적화
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    environment:
      REDIS_MAXMEMORY: 1gb
      REDIS_MAXMEMORY_POLICY: allkeys-lru
      REDIS_SAVE: ""  # RDB 스냅샷 비활성화 (성능 우선)
      REDIS_APPENDONLY: "yes"  # AOF 활성화
      REDIS_APPENDFSYNC: everysec
      REDIS_TCP_KEEPALIVE: 60
      REDIS_TIMEOUT: 300
    
    # Redis 설정 파일 마운트
    command: >
      redis-server
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --tcp-keepalive 60
      --timeout 300
      --save ""

  postgresql:
    # PostgreSQL 성능 최적화
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
        reservations:
          cpus: '1.0'
          memory: 1.5G
    
    environment:
      # PostgreSQL 성능 설정
      POSTGRES_SHARED_BUFFERS: 512MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 2GB
      POSTGRES_MAINTENANCE_WORK_MEM: 128MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
      POSTGRES_RANDOM_PAGE_COST: 1.1
      POSTGRES_EFFECTIVE_IO_CONCURRENCY: 200
      POSTGRES_WORK_MEM: 32MB
      POSTGRES_MAX_WORKER_PROCESSES: 8
      POSTGRES_MAX_PARALLEL_WORKERS_PER_GATHER: 4
      POSTGRES_MAX_PARALLEL_WORKERS: 8
      POSTGRES_MAX_PARALLEL_MAINTENANCE_WORKERS: 4
    
    # PostgreSQL 커스텀 설정 파일 마운트
    volumes:
      - postgresql-data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    
    command: >
      postgres
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=32MB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4

  # 성능 모니터링 서비스
  prometheus:
    image: prom/prometheus:latest
    container_name: blacklist-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - blacklist-net
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: blacklist-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - blacklist-net
    profiles:
      - monitoring
    depends_on:
      - prometheus

# 성능 최적화를 위한 추가 볼륨
volumes:
  prometheus-data:
    driver: local
    name: blacklist-prometheus-data
  
  grafana-data:
    driver: local
    name: blacklist-grafana-data