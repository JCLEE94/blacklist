apiVersion: v1
kind: ServiceAccount
metadata:
  name: auto-updater
  namespace: blacklist-new
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: auto-updater
  namespace: blacklist-new
rules:
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "update", "patch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: auto-updater
  namespace: blacklist-new
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: auto-updater
subjects:
- kind: ServiceAccount
  name: auto-updater
  namespace: blacklist-new
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: auto-updater
  namespace: blacklist-new
spec:
  schedule: "*/5 * * * *"  # 5Î∂ÑÎßàÎã§ Ïã§Ìñâ
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 5
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: auto-updater
        spec:
          serviceAccountName: auto-updater
          restartPolicy: OnFailure
          containers:
          - name: updater
            image: bitnami/kubectl:latest
            env:
            - name: NAMESPACE
              value: "blacklist-new"
            - name: REGISTRY
              value: "registry.jclee.me"
            - name: IMAGE_NAME
              value: "blacklist"
            - name: REGISTRY_AUTH
              valueFrom:
                secretKeyRef:
                  name: regcred
                  key: .dockerconfigjson
            command:
            - /bin/bash
            - -c
            - |
              set -e
              
              echo "üîÑ Auto-updater started at $(date)"
              
              # ÌòÑÏû¨ Î∞∞Ìè¨Îêú Ïù¥ÎØ∏ÏßÄ ÌôïÏù∏
              CURRENT_IMAGE=$(kubectl get deployment blacklist -n ${NAMESPACE} -o jsonpath='{.spec.template.spec.containers[0].image}')
              echo "Current image: ${CURRENT_IMAGE}"
              
              # ÌòÑÏû¨ Ïù¥ÎØ∏ÏßÄÏóêÏÑú ÌÉúÍ∑∏ Ï∂îÏ∂ú
              CURRENT_TAG=$(echo ${CURRENT_IMAGE} | cut -d: -f2)
              echo "Current tag: ${CURRENT_TAG}"
              
              # RegistryÏóêÏÑú ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÌÉúÍ∑∏ ÌôïÏù∏
              echo "Checking for new images in registry..."
              
              # SHA ÌÉúÍ∑∏ÎèÑ ÌôïÏù∏ (GitHub ActionsÏóêÏÑú ÏÉùÏÑ±ÌïòÎäî ÌÉúÍ∑∏)
              # ÌòÑÏû¨ ÌÉúÍ∑∏Í∞Ä SHA ÌòïÏãùÏù∏ÏßÄ ÌôïÏù∏
              if [[ "$CURRENT_TAG" =~ ^[a-f0-9]{7,8}$ ]]; then
                echo "Current tag is a SHA tag: $CURRENT_TAG"
                # SHA ÌÉúÍ∑∏Ïù∏ Í≤ΩÏö∞, latestÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÎèÑ
                LATEST_IMAGE="${REGISTRY}/${IMAGE_NAME}:latest"
              else
                # Í∑∏Î†áÏßÄ ÏïäÏúºÎ©¥ latest ÌÉúÍ∑∏ ÏÇ¨Ïö©
                LATEST_IMAGE="${REGISTRY}/${IMAGE_NAME}:latest"
              fi
              
              # ÏÉà Ïù¥ÎØ∏ÏßÄÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÎèÑ
              echo "Attempting to update to: ${LATEST_IMAGE}"
              
              # ÌòÑÏû¨ Ïù¥ÎØ∏ÏßÄÏôÄ ÎπÑÍµê
              if [ "${CURRENT_IMAGE}" == "${LATEST_IMAGE}" ] && [[ ! "$CURRENT_TAG" =~ ^[a-f0-9]{7,8}$ ]]; then
                echo "‚ÑπÔ∏è No update needed - already running latest image"
              else
                echo "üîÑ Updating from ${CURRENT_IMAGE} to ${LATEST_IMAGE}"
                
                # Ïù¥ÎØ∏ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏
                kubectl set image deployment/blacklist blacklist=${LATEST_IMAGE} -n ${NAMESPACE}
                
                # Î°§ÏïÑÏõÉ ÏÉÅÌÉú ÌôïÏù∏ (ÏµúÎåÄ 5Î∂Ñ ÎåÄÍ∏∞)
                if kubectl rollout status deployment/blacklist -n ${NAMESPACE} --timeout=300s; then
                  echo "‚úÖ Deployment updated successfully"
                  
                  # Ìó¨Ïä§ Ï≤¥ÌÅ¨
                  sleep 30
                  READY_REPLICAS=$(kubectl get deployment blacklist -n ${NAMESPACE} -o jsonpath='{.status.readyReplicas}')
                  DESIRED_REPLICAS=$(kubectl get deployment blacklist -n ${NAMESPACE} -o jsonpath='{.spec.replicas}')
                  
                  if [ "${READY_REPLICAS}" == "${DESIRED_REPLICAS}" ]; then
                    echo "‚úÖ All replicas are ready (${READY_REPLICAS}/${DESIRED_REPLICAS})"
                    
                    # ÏóÖÎç∞Ïù¥Ìä∏Îêú Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏ ÌôïÏù∏
                    NEW_IMAGE=$(kubectl get deployment blacklist -n ${NAMESPACE} -o jsonpath='{.spec.template.spec.containers[0].image}')
                    echo "üéØ New image deployed: ${NEW_IMAGE}"
                  else
                    echo "‚ö†Ô∏è Not all replicas are ready (${READY_REPLICAS}/${DESIRED_REPLICAS})"
                  fi
                else
                  echo "‚ùå Rollout failed or timed out"
                
                  # Î°§Î∞± ÏãúÎèÑ
                  echo "Attempting rollback..."
                  kubectl rollout undo deployment/blacklist -n ${NAMESPACE}
                  kubectl rollout status deployment/blacklist -n ${NAMESPACE} --timeout=300s
                  
                  exit 1
                fi
              fi
              
              echo "üîÑ Auto-updater completed at $(date)"
---
# Health check job that runs after updates
apiVersion: batch/v1
kind: Job
metadata:
  name: post-update-health-check
  namespace: blacklist-new
spec:
  template:
    metadata:
      labels:
        app: health-checker
    spec:
      serviceAccountName: auto-updater
      restartPolicy: Never
      containers:
      - name: health-check
        image: curlimages/curl:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "üè• Running post-update health check..."
          
          # NodePort ÏÑúÎπÑÏä§ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
          NODE_PORT=32541
          
          # 30Ï¥à ÎåÄÍ∏∞ (ÏÑúÎπÑÏä§ ÏïàÏ†ïÌôî)
          sleep 30
          
          # Health check ÏàòÌñâ
          MAX_ATTEMPTS=10
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "Health check attempt $ATTEMPT/$MAX_ATTEMPTS..."
            
            # Internal service health check
            if curl -f -s --connect-timeout 5 http://blacklist:2541/health > /dev/null 2>&1; then
              echo "‚úÖ Service is healthy"
              
              # Ï∂îÍ∞Ä ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌÖåÏä§Ìä∏
              curl -s http://blacklist:2541/api/stats > /dev/null && echo "‚úÖ /api/stats: OK" || echo "‚ö†Ô∏è /api/stats: Failed"
              curl -s http://blacklist:2541/api/collection/status > /dev/null && echo "‚úÖ /api/collection/status: OK" || echo "‚ö†Ô∏è /api/collection/status: Failed"
              
              exit 0
            else
              echo "‚è≥ Service not ready, waiting..."
              sleep 10
            fi
          done
          
          echo "‚ùå Health check failed after $MAX_ATTEMPTS attempts"
          exit 1