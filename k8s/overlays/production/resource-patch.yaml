apiVersion: apps/v1
kind: Deployment
metadata:
  name: blacklist
  labels:
    environment: production
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "Production deployment of blacklist application"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        environment: production
        version: latest
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "2541"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: blacklist
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        env:
        - name: FLASK_ENV
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: GUNICORN_WORKERS
          value: "4"
        - name: GUNICORN_THREADS
          value: "2"
        - name: GUNICORN_MAX_REQUESTS
          value: "1000"
        - name: GUNICORN_MAX_REQUESTS_JITTER
          value: "100"
        - name: MAX_AUTH_ATTEMPTS
          value: "3"
        - name: BLOCK_DURATION_HOURS
          value: "2"
        - name: COLLECTION_ENABLED
          value: "true"
        - name: CACHE_TIMEOUT
          value: "600"
        - name: REQUEST_TIMEOUT
          value: "30"
        - name: ENVIRONMENT
          value: "production"
        livenessProbe:
          httpGet:
            path: /health
            port: 2541
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 2541
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health
            port: 2541
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 15
          failureThreshold: 8

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: blacklist-ingress
  labels:
    environment: production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/rate-limit: "50"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      SecRuleEngine On
      SecRule REQUEST_METHOD "@streq GET" "id:1001,phase:1,deny,status:403,msg:'GET requests blocked in production'"
spec:
  tls:
  - hosts:
    - blacklist.jclee.me
    secretName: blacklist-prod-tls
  rules:
  - host: blacklist.jclee.me
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: blacklist-service
            port:
              number: 80

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: blacklist-pdb
  labels:
    environment: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: blacklist
      environment: production

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: blacklist-hpa
  labels:
    environment: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: blacklist
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60