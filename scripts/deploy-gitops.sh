#!/bin/bash
# deploy-gitops.sh - GitOps deployment script with App of Apps pattern
# Usage: ./deploy-gitops.sh [production|staging|development|all] [--setup-secrets]

set -e

ENVIRONMENT=${1:-production}
SETUP_SECRETS=${2:-}

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# ÌôòÍ≤ΩÎ≥Ñ ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ Îß§Ìïë
get_namespace() {
    case "$1" in
        production)
            echo "blacklist"
            ;;
        staging)
            echo "blacklist-staging"
            ;;
        development)
            echo "blacklist-dev"
            ;;
        *)
            echo "blacklist"
            ;;
    esac
}

# ArgoCD CLI ÏÑ§Ïπò ÌôïÏù∏
check_argocd_cli() {
    if ! command -v argocd &> /dev/null; then
        log_error "ArgoCD CLI not found. Please install it first."
        log_info "Installation: curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64"
        exit 1
    fi
}

# ArgoCD ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌôïÏù∏
check_argocd_connection() {
    log_info "Checking ArgoCD server connection..."
    
    if ! argocd version --grpc-web &> /dev/null; then
        log_warning "ArgoCD server not accessible. Trying to connect..."
        
        # Port forwardÎ•º Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ïã§Ìñâ
        kubectl port-forward svc/argocd-server -n argocd 8080:443 &
        local pf_pid=$!
        
        # Ïû†Ïãú ÎåÄÍ∏∞
        sleep 5
        
        # ArgoCD Î°úÍ∑∏Ïù∏ ÏãúÎèÑ
        if ! argocd login localhost:8080 --grpc-web --insecure --username admin --password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d) &> /dev/null; then
            log_error "Failed to connect to ArgoCD server"
            kill $pf_pid 2>/dev/null || true
            exit 1
        fi
        
        # Port forward Ï¢ÖÎ£å
        kill $pf_pid 2>/dev/null || true
    fi
    
    log_success "ArgoCD server connection established"
}

# Secrets ÏÑ§Ï†ï
setup_secrets() {
    if [ "$SETUP_SECRETS" = "--setup-secrets" ]; then
        log_info "Setting up secrets for environment: $ENVIRONMENT"
        
        if [ -f "./scripts/setup-multienv-secrets.sh" ]; then
            ./scripts/setup-multienv-secrets.sh "$ENVIRONMENT"
        else
            log_warning "Multi-environment secrets script not found, using legacy script"
            if [ -f "./scripts/setup-all-secrets.sh" ]; then
                ./scripts/setup-all-secrets.sh
            else
                log_error "No secrets setup script found"
                exit 1
            fi
        fi
    fi
}

# App of Apps Î∞∞Ìè¨
deploy_app_of_apps() {
    log_info "Deploying App of Apps pattern..."
    
    # App of Apps Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Î∞∞Ìè¨
    kubectl apply -f argocd/app-of-apps.yaml
    
    # ArgoCD Project ÌôïÏù∏/ÏÉùÏÑ±
    if ! argocd proj get blacklist-project --grpc-web &> /dev/null; then
        log_info "Creating ArgoCD project: blacklist-project"
        kubectl apply -f argocd/application.yaml
    fi
    
    log_success "App of Apps deployed successfully"
}

# Í∞úÎ≥Ñ ÌôòÍ≤Ω Î∞∞Ìè¨
deploy_environment() {
    local env=$1
    local namespace=$(get_namespace $env)
    local app_name="blacklist-$env"
    
    log_info "Deploying $env environment to namespace: $namespace"
    
    # ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ ÏÉùÏÑ±
    kubectl create namespace $namespace --dry-run=client -o yaml | kubectl apply -f -
    
    # ÌôòÍ≤ΩÎ≥Ñ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Î∞∞Ìè¨
    kubectl apply -f argocd/environments/$env.yaml
    
    # ArgoCD ÎèôÍ∏∞Ìôî
    if command -v argocd &> /dev/null; then
        log_info "Synchronizing ArgoCD application: $app_name"
        argocd app sync $app_name --grpc-web || log_warning "ArgoCD sync failed, but will retry automatically"
        
        # Health check ÎåÄÍ∏∞
        log_info "Waiting for application to be healthy..."
        argocd app wait $app_name --health --grpc-web --timeout 300 || log_warning "Health check timeout, but deployment may still be in progress"
    fi
    
    log_success "$env environment deployed successfully"
}

# Î∞∞Ìè¨ ÏÉÅÌÉú ÌôïÏù∏
check_deployment_status() {
    local env=$1
    local namespace=$(get_namespace $env)
    
    log_info "Checking deployment status for $env environment in namespace: $namespace"
    
    # Pod ÏÉÅÌÉú ÌôïÏù∏
    echo "Pods in namespace $namespace:"
    kubectl get pods -n $namespace -o wide
    
    # Service ÏÉÅÌÉú ÌôïÏù∏
    echo "Services in namespace $namespace:"
    kubectl get svc -n $namespace
    
    # Ingress ÏÉÅÌÉú ÌôïÏù∏ (ÏûàÎäî Í≤ΩÏö∞)
    if kubectl get ingress -n $namespace &> /dev/null; then
        echo "Ingress in namespace $namespace:"
        kubectl get ingress -n $namespace
    fi
    
    # ArgoCD Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏÉÅÌÉú ÌôïÏù∏
    if command -v argocd &> /dev/null; then
        echo "ArgoCD application status:"
        argocd app get blacklist-$env --grpc-web
    fi
}

# Î°úÍ∑∏ ÌôïÏù∏
show_logs() {
    local env=$1
    local namespace=$(get_namespace $env)
    
    log_info "Showing logs for $env environment in namespace: $namespace"
    
    # ÏµúÍ∑º Î°úÍ∑∏ ÌôïÏù∏
    kubectl logs -n $namespace -l app=blacklist --tail=100
}

# Î©îÏù∏ Ïã§Ìñâ Î°úÏßÅ
main() {
    log_info "Starting GitOps deployment for: $ENVIRONMENT"
    
    # ÏÇ¨Ï†Ñ ÌôïÏù∏
    check_argocd_cli
    check_argocd_connection
    
    # Secrets ÏÑ§Ï†ï
    setup_secrets
    
    case "$ENVIRONMENT" in
        production)
            deploy_app_of_apps
            deploy_environment production
            check_deployment_status production
            ;;
        staging)
            deploy_app_of_apps
            deploy_environment staging
            check_deployment_status staging
            ;;
        development)
            deploy_app_of_apps
            deploy_environment development
            check_deployment_status development
            ;;
        all)
            deploy_app_of_apps
            deploy_environment production
            deploy_environment staging
            deploy_environment development
            
            log_info "Checking all environments status..."
            check_deployment_status production
            check_deployment_status staging
            check_deployment_status development
            ;;
        *)
            log_error "Invalid environment: $ENVIRONMENT"
            log_info "Usage: $0 [production|staging|development|all] [--setup-secrets]"
            exit 1
            ;;
    esac
    
    echo ""
    log_success "üéâ GitOps deployment completed!"
    echo ""
    log_info "Access your applications:"
    echo "- Production: kubectl port-forward svc/blacklist -n blacklist 8080:80"
    echo "- Staging: kubectl port-forward svc/blacklist -n blacklist-staging 8080:80"
    echo "- Development: kubectl port-forward svc/blacklist -n blacklist-dev 8080:80"
    echo ""
    log_info "Monitor with ArgoCD:"
    echo "- ArgoCD UI: kubectl port-forward svc/argocd-server -n argocd 8080:443"
    echo "- CLI: argocd app list --grpc-web"
}

# Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
main "$@"