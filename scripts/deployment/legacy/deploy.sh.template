#!/bin/bash
# ArgoCD GitOps 배포 스크립트 - 환경별 설정 지원

# 환경 변수 기본값 설정
ENVIRONMENT="${ENVIRONMENT:-production}"

# 설정 파일 로드
CONFIG_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../config" && pwd)"
ENV_FILE="$CONFIG_DIR/environments/${ENVIRONMENT}.env"

if [[ -f "$ENV_FILE" ]]; then
    echo "🔧 환경 설정 로드: $ENVIRONMENT"
    set -a
    source "$ENV_FILE"
    set +a
else
    echo "❌ 환경 설정 파일을 찾을 수 없습니다: $ENV_FILE"
    exit 1
fi

echo "🚀 ${PROJECT_NAME:-blacklist} GitOps 배포 시작..."

echo "📍 GitOps 배포 설정:"
echo "   - 환경: ${ENVIRONMENT}"
echo "   - 프로젝트: ${PROJECT_NAME:-blacklist}"
echo "   - 네임스페이스: ${K8S_NAMESPACE:-blacklist}"
echo "   - 레지스트리: ${REGISTRY_URL}"
echo "   - 이미지 태그: ${IMAGE_TAG:-latest}"
echo "   - ArgoCD 서버: ${ARGOCD_SERVER}"
echo "   - 도메인: ${BASE_DOMAIN}"

# 1. 네임스페이스 확인 및 생성
echo "📦 네임스페이스 확인..."
if kubectl get namespace ${K8S_NAMESPACE:-blacklist} &>/dev/null; then
    echo "   - 네임스페이스 ${K8S_NAMESPACE:-blacklist} 이미 존재"
else
    echo "   - 네임스페이스 ${K8S_NAMESPACE:-blacklist} 생성 중..."
    envsubst < k8s/namespace.yaml.template | kubectl apply -f -
fi

# 2. Registry Secret 생성 (필요한 경우)
echo "🔐 Registry Secret 생성..."
if [[ -n "${REGISTRY_USERNAME:-}" && -n "${REGISTRY_PASSWORD:-}" ]]; then
    kubectl create secret docker-registry regcred \
        --docker-server="${REGISTRY_URL}" \
        --docker-username="${REGISTRY_USERNAME}" \
        --docker-password="${REGISTRY_PASSWORD}" \
        --namespace="${K8S_NAMESPACE:-blacklist}" \
        --dry-run=client -o yaml | kubectl apply -f -
    echo "   - Registry secret 생성/업데이트 완료"
else
    echo "   - Registry 인증 정보가 없습니다. Public registry로 가정합니다."
fi

# 3. 애플리케이션 Secret 생성
echo "🔑 애플리케이션 Secret 생성..."
# 필수 환경 변수 체크
missing_vars=()
required_vars=("REGTECH_USERNAME" "REGTECH_PASSWORD" "SECUDIUM_USERNAME" "SECUDIUM_PASSWORD" "JWT_SECRET_KEY" "API_SECRET_KEY")

for var in "${required_vars[@]}"; do
    if [[ -z "${!var:-}" ]]; then
        missing_vars+=("$var")
    fi
done

if [[ ${#missing_vars[@]} -gt 0 ]]; then
    echo "   - ⚠️  필수 환경 변수가 설정되지 않았습니다:"
    for var in "${missing_vars[@]}"; do
        echo "     - $var"
    done
    echo "   - 환경 설정 파일에서 이 값들을 설정하세요: $ENV_FILE"
else
    kubectl create secret generic ${PROJECT_NAME:-blacklist}-secret \
        --from-literal=REGTECH_USERNAME="${REGTECH_USERNAME}" \
        --from-literal=REGTECH_PASSWORD="${REGTECH_PASSWORD}" \
        --from-literal=SECUDIUM_USERNAME="${SECUDIUM_USERNAME}" \
        --from-literal=SECUDIUM_PASSWORD="${SECUDIUM_PASSWORD}" \
        --from-literal=JWT_SECRET_KEY="${JWT_SECRET_KEY}" \
        --from-literal=API_SECRET_KEY="${API_SECRET_KEY}" \
        --namespace="${K8S_NAMESPACE:-blacklist}" \
        --dry-run=client -o yaml | kubectl apply -f -
    echo "   - 애플리케이션 secret 생성/업데이트 완료"
fi

# 4. Kubernetes 리소스 배포 (템플릿 렌더링)
echo "☸️  Kubernetes 리소스 배포..."

# 템플릿 렌더링 디렉토리 생성
RENDERED_DIR="k8s/rendered/${ENVIRONMENT}"
mkdir -p "$RENDERED_DIR"

# 기본 리소스 템플릿 렌더링
templates=(
    "k8s/namespace.yaml.template"
    "k8s/service.yaml.template"
    "k8s/ingress.yaml.template"
)

for template in "${templates[@]}"; do
    if [[ -f "$template" ]]; then
        output_file="$RENDERED_DIR/$(basename "$template" .template)"
        echo "   - 렌더링: $template → $output_file"
        envsubst < "$template" > "$output_file"
        kubectl apply -f "$output_file"
    fi
done

# 5. ArgoCD Application 배포
echo "🔄 ArgoCD Application 배포..."
if [[ -f "argocd/application.yaml.template" ]]; then
    argocd_output="argocd/rendered/${ENVIRONMENT}/application.yaml"
    mkdir -p "$(dirname "$argocd_output")"
    
    echo "   - ArgoCD 설정 렌더링: $argocd_output"
    envsubst < "argocd/application.yaml.template" > "$argocd_output"
    
    # ArgoCD 네임스페이스 확인
    if kubectl get namespace argocd &>/dev/null; then
        kubectl apply -f "$argocd_output"
        echo "   - ArgoCD Application 배포 완료"
    else
        echo "   - ⚠️  ArgoCD 네임스페이스가 없습니다. ArgoCD를 먼저 설치하세요."
    fi
else
    echo "   - ArgoCD 템플릿을 찾을 수 없습니다."
fi

# 6. 배포 상태 확인
echo "✅ 배포 상태 확인..."
echo "   - 네임스페이스: ${K8S_NAMESPACE:-blacklist}"
kubectl get pods -n "${K8S_NAMESPACE:-blacklist}" 2>/dev/null || echo "   - 아직 Pod가 생성되지 않았습니다."

# 7. ArgoCD 동기화 (ArgoCD CLI가 있는 경우)
if command -v argocd &> /dev/null; then
    echo "🔄 ArgoCD 동기화..."
    argocd app sync ${PROJECT_NAME:-blacklist} --grpc-web 2>/dev/null || echo "   - ArgoCD 동기화 실패 (수동으로 확인하세요)"
fi

echo ""
echo "🎉 ${PROJECT_NAME:-blacklist} GitOps 배포 완료!"
echo ""
echo "📍 배포 정보:"
echo "   - 환경: ${ENVIRONMENT}"
echo "   - 네임스페이스: ${K8S_NAMESPACE:-blacklist}"
echo "   - 도메인: ${BASE_DOMAIN}"
echo "   - ArgoCD: ${ARGOCD_SERVER}"
echo ""
echo "🔍 상태 확인 명령:"
echo "   kubectl get pods -n ${K8S_NAMESPACE:-blacklist}"
echo "   kubectl get svc -n ${K8S_NAMESPACE:-blacklist}"
echo "   kubectl get ingress -n ${K8S_NAMESPACE:-blacklist}"
echo ""
if command -v argocd &> /dev/null; then
    echo "🔄 ArgoCD 관리 명령:"
    echo "   argocd app get ${PROJECT_NAME:-blacklist} --grpc-web"
    echo "   argocd app sync ${PROJECT_NAME:-blacklist} --grpc-web"
fi
echo ""